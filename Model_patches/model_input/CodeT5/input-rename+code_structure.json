{
  "config": "CODET5_BASE_CODEFORM_MASKFORM_NOCOMMENT",
  "data": {
    "Netty-1": {
      "loc": "10-10",
      "input": "private void cutHeading(AttachableCharSuccession a) {\n    final int range = a.range();\n    int titleBeginning;\n    int titleTerminal;\n    titleBeginning = detectNotSpacing(a, 0);\n    titleTerminal = titleBeginning;\n    while( titleTerminal < range) {\n        char z = a.insecureCharAt(titleTerminal);\n        <extra_id_0>\n            titleTerminal ++;\n        }else{\n            break;\n        }\n    }\n    int terminalColon;\n    terminalColon = titleTerminal;\n    while ( terminalColon < range) {\n        if (a.insecureCharAt(terminalColon) != ':') {\n            terminalColon ++;\n        }else{\n            terminalColon ++;\n            break;\n        }\n    }\n    int contentBeginning;\n    int contentTerminal;\n    title = a.partOfStringInsecure(titleBeginning, titleTerminal);\n    contentBeginning = detectNotSpacing(a, terminalColon);\n   if (contentBeginning != range) {\n        contentTerminal = detectTerminalOfString(a);\n        content = a.partOfStringInsecure(contentBeginning, contentTerminal);\n    } else{\n        content = BLANK_CONTENT;\n    }\n}",
      "function range": "2,5-42,5"
    },
    "Netty-2": {
      "loc": "18-18",
      "input": "private void cutHeading(AttachableCharSuccession a) {\n    final int range = a.range();\n    int titleBeginning;\n    int titleTerminal;\n    titleBeginning = detectNotSpacing(a, 0);\n    titleTerminal = titleBeginning;\n    while( titleTerminal < range) {\n        char z = a.insecureCharAt(titleTerminal);\n        if (z != ':' && (beDecryptionDemand() || !Character.isWhitespace(z))) {\n            titleTerminal ++;\n        }else{\n            break;\n        }\n    }\n    <extra_id_0>\n    terminalColon = titleTerminal;\n    while ( terminalColon < range) {\n        if (a.insecureCharAt(terminalColon) != ':') {\n            terminalColon ++;\n        }else{\n            terminalColon ++;\n            break;\n        }\n    }\n    int contentBeginning;\n    int contentTerminal;\n    title = a.partOfStringInsecure(titleBeginning, titleTerminal);\n    contentBeginning = detectNotSpacing(a, terminalColon);\n    if (contentBeginning != range) {\n        contentTerminal = detectTerminalOfString(a);\n        content = a.partOfStringInsecure(contentBeginning, contentTerminal);\n    } else{\n        content = BLANK_CONTENT;\n    }\n}",
      "function range": "2,5-42,5"
    },
    "Jenkins-1": {
      "loc": "6-12",
      "input": "@Exported(inline=true)\npublic Map<String,Object> acquireProctorInformation() { \n    List<VertexProctor> nodeMonitorList = VertexProctor.acquireWhole();\n    Map<String,Object> z = new HashMap<String, Object>();\n    int i = 0;\n    <extra_id_0>\n    return z;\n}",
      "function range": "2,1-15,1"
    },
    "Jenkins-2": {
      "loc": "4-16",
      "input": "@Exported(name=\"jobs\")\npublic List<PeakDegreeElement> acquireElements() {\n    Collection<PeakDegreeElement> itemValues = elements.values();\n    <extra_id_0>\n}",
      "function range": "2,1-18,1"
    },
    "Jenkins-3": {
      "loc": "38-40",
      "input": "\n<extra_id_0>",
      "function range": "39,17-41,17"
    },
    "Jinjava-1": {
      "loc": "4-4",
      "input": "",
      "function range": ""
    },
    "Halo-1": {
      "loc": "6-6",
      "input": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) {\n    Assert.notNull(examinePath, \"Path to check must not be null\");\n    Assert.notNull(basePath, \"Parent path must not be null\");\n    Path normalizedBasePath = basePath.normalize();\n    <extra_id_0>\n        ProhibitedException e =  new ProhibitedException(\"You do not have permission to access \" + examinePath);\n        e.specifyErrorInformation(examinePath);\n        throw e;\n    }\n}",
      "function range": "2,1-13,1"
    },
    "Retrofit-1": {
      "loc": "3-3",
      "input": "JaxbReplyTransformer(JAXBContext setting, Class<T> category) {\n  this.category = category;\n  <extra_id_0>\n}",
      "function range": "2,3-5,3"
    },
    "Quartz-1": {
      "loc": "15-15",
      "input": "protected void loadArchiveAnalyzer() throws ParserConfigurationException  {\n    Object source = solveSchemeOrigin();\n    DocumentBuilderFactory archiveCreatorManufactory = DocumentBuilderFactory.newInstance();\n    archiveCreatorManufactory.setValidating(true);\n    archiveCreatorManufactory.setNamespaceAware(true);\n    archiveCreatorManufactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\", \"http://www.w3.org/2001/XMLSchema\");\n    archiveCreatorManufactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaSource\", source);\n    <extra_id_0>\n    archiveCreator.setErrorHandler(this);\n    NamespaceContext nsCircumstance = new NamespaceContext()\n    {\n        public String acquireBeginningOfString(String titlescopeURI)\n      {\n          throw new UnsupportedOperationException();\n      }\n      public String acquireTitilescopeURI(String beginningOfString)\n      {\n            if (beginningOfString != null){\n                switch(beginningOfString){\n                    case XMLConstants.XML_NS_PREFIX:\n                        return XMLConstants.XML_NS_URI;\n                    case \"q\":\n                        return PROJECT_TS;\n                    case XMLConstants.XMLNS_ATTRIBUTE:\n                        return XMLConstants.XMLNS_ATTRIBUTE_NS_URI;\n                    default:\n                        break;\n                }\n                return XMLConstants.NULL_NS_URI;\n            }else{\n                throw new IllegalArgumentException(\"Null prefix\");\n            }\n      }\n      public Iterator<?> acquireBeginningsOfStrings(String titlescopeURI)\n      {\n          throw new UnsupportedOperationException();\n      }\n    }; \n    XPathFactory xpathFactory = XPathFactory.newInstance();\n    path = xpathFactory.newXPath();\n    path.setNamespaceContext(nsCircumstance);\n}",
      "function range": "2,5-58,5"
    },
    "Flow-1": {
      "loc": "8-8",
      "input": "public boolean workForDevMannerDemand(HttpServletRequest query,\n        HttpServletResponse reply) throws IOException {\n    if ( !whetherDevelopComputerUnsuccessfulBegin.get() && developComputerBeginFuturity.isDone()) {\n        String queryFileName = query.getPathInfo();\n        <extra_id_0>\n            queryFileName = APP_SUBJECT_FORM.matcher(queryFileName).find()? \"/VAADIN/static\" + queryFileName:queryFileName;\n            String queryMethodname = query.getMethod();\n            HttpURLConnection connexion = arrangeLink(queryFileName,\n                    queryMethodname);\n            for (Enumeration<String> headingTiles = query.getHeaderNames(); headingTiles.hasMoreElements(); ) {\n                String heading = headingTiles.nextElement();\n                String value = \"Connect\".equals(heading) ? \"close\": query.getHeader(heading);\n                connexion.setRequestProperty(heading, value);\n            }\n            getLogger().debug(\"Requesting resource to webpack {}\",\n                    connexion.getURL());\n            int replyCode = connexion.getResponseCode();\n            if (replyCode != HTTP_NOT_FOUND) {\n                getLogger().debug(\"Served resource by webpack: {} {}\", replyCode,\n                        queryFileName);\n                connexion.getHeaderFields().forEach((heading, contents) -> {\n                    if (heading != null) {\n                        reply.addHeader(heading, contents.get(0));\n                    }\n                });\n                if (replyCode != HTTP_OK) {\n                    if(replyCode >= 400){\n                        reply.sendError(replyCode);\n                    }else{\n                        reply.setStatus(replyCode);\n                    }\n                } else {\n                    composeDataSequence(reply.getOutputStream(),\n                    connexion.getInputStream());\n                }\n                reply.getOutputStream().close();\n                return true;\n            }else{\n                getLogger().debug(\"Resource not served by webpack {}\",\n                        queryFileName);\n                return false;\n            }\n        }else{\n            getLogger().info(OperatorAssistant.INSECURE_PATH_ERROR_INFORMATION_FORM,queryFileName);\n            reply.setStatus(HttpServletResponse.SC_FORBIDDEN);\n            return true;\n        }\n    }else{\n        return false;\n    }\n}",
      "function range": "2,5-75,5"
    },
    "Flow-2": {
      "loc": "17-20",
      "input": "@Override\npublic int putMistakeAttribute(PriorToComeInCase occurrence,\n        ErrorAttribute<UndiscoveredException> attribute) {\n    String extraInformation = attribute.withPersonalizedContent()? \"Reason: \" + attribute.acquirePersonalizedContent():\"\";\n    Location location = occurrence.acquirePlacement();\n    String way = location.acquirePath();\n    way = Jsoup.clean(way, Whitelist.none());\n    extraInformation = Jsoup.clean(extraInformation, Whitelist.none());\n    UI ui = occurrence.acquireUI();\n    VaadinSession session = ui.acquireSession();\n    DeploymentConfiguration config = session.acquireArrangement();\n    boolean productManner = config.beProductManner();\n    String templet = acquireMistakeHypertextMarkupLanguage(productManner);\n    <extra_id_0>\n    com.vaadin.flow.dom.Component_ component = acquireComponent();\n    HypertextMarkupLanguage html = new HypertextMarkupLanguage(templet);\n    component.attachMember(html.acquireComponent());\n    return HttpServletResponse.SC_NOT_FOUND;\n}",
      "function range": "2,5-27,5"
    },
    "BC-Java-1": {
      "loc": "6-6",
      "input": "private LargeWholeNumber[] derDecrypt(\n    byte[]  encryption)\n    throws IOException\n{\n    ASN1Succession S = (ASN1Succession)ASN1Basic.outOfByteArray(encryption);\n    <extra_id_0>\n    LargeWholeNumber bigInteger0 = ((ASN1WholeNumber) object0).acquireContent();\n    ASN1Encodable object1 = S.acquireItemAt(1);\n    LargeWholeNumber bigInteger1 = ((ASN1WholeNumber) object1).acquireContent();\n    return new LargeWholeNumber[]{\n        bigInteger0,\n        bigInteger1\n    };\n}",
      "function range": "2,5-15,5"
    },
    "Json-sanitizer-1": {
      "loc": "29-35",
      "input": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  int h = begin;\n  while ( h < terminal) {\n    char currentChar = JSONlike.charAt(h);\n      if(currentChar== '\\u2028'){ supplant(h, h + 1, \"\\\\u2028\"); }\n      else if( currentChar=='\"'|| currentChar== '\\''){\n        if (h != begin) {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter != '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if(!shut){\n            if(currentChar == '\"'){\n              embed(h, '\\\\');\n            }\n          }else{\n             if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          }\n        } else {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        }\n      }\n      <extra_id_0>\n      else if(currentChar=='\\r'){ supplant(h, h + 1, \"\\\\r\");}\n      else if(currentChar=='\\u2029'){ supplant(h, h + 1, \"\\\\u2029\"); }\n      else if(currentChar== '\\\\'){\n        if (h + 1 != terminal) {\n          char nextChar = JSONlike.charAt(h + 1);\n          if( nextChar =='b'||nextChar == 'f'|| nextChar == 'n'||nextChar =='r'||nextChar == 't'||nextChar == '\\\\'||\n          nextChar == '/'|| nextChar == '\"'){\n            ++h;\n          }\n          else if( nextChar == 'v'){  \n            supplant(h, h + 2, \"\\\\u0008\");\n            ++h;\n          }\n          else if( nextChar == 'x'){\n            if (h + 4 >= terminal || !whetherHexadecimalAt(h+2) || !whetherHexadecimalAt(h+3)) {\n              remove(h, h + 1);\n            }else{\n              supplant(h, h + 2, \"\\\\u00\");  \n              h += 3;\n            }\n          }\n          else if( nextChar == 'u'){\n            if (h + 6 >= terminal || !whetherHexadecimalAt(h + 2) || !whetherHexadecimalAt(h + 3)\n                || !whetherHexadecimalAt(h + 4) || !whetherHexadecimalAt(h + 5)) {\n              remove(h, h + 1);\n            }else{\n              h += 5;\n            }\n          }\n          else if( nextChar == '0'|| nextChar == '1'|| nextChar == '2'|| nextChar == '3'||\n          nextChar == '4'||nextChar == '5'|| nextChar == '6'|| nextChar == '7'){\n            int octalTerminal = h + 1;\n            if (octalTerminal + 1 < terminal && whetherOctalAt(octalTerminal + 1)) {\n              ++octalTerminal;\n              if (currentChar <= '3' && octalTerminal + 1 < terminal && whetherOctalAt(octalTerminal + 1)) {\n                ++octalTerminal;\n              }\n              int content = 0;\n              int k = h;\n              while ( k < octalTerminal) {\n                content = (content << 3) | (JSONlike.charAt(k) - '0');\n                k++;\n              }\n              supplant(h + 1, octalTerminal, \"u00\");\n              addOnHexadecimal(content, 2);\n            }\n            h = octalTerminal - 1;\n          }else{\n            remove(h, h + 1);\n          }\n        }else{\n           remove(h, h + 1);\n          h++;\n          continue;\n        }\n      } else if(currentChar==  ']'){\n        if (h + 2 < terminal && ']' == JSONlike.charAt(h + 1)\n            && '>' == JSONlike.charAt(h + 2)) {\n          supplant(h, h + 1, \"\\\\u005d\");\n        }\n      }else if(currentChar== '\\n'){ \n        supplant(h, h + 1, \"\\\\n\");\n      }\n      else{\n        if (currentChar >= 0x20) {\n          if (currentChar >= 0xd800) {  \n            if (currentChar >= 0xe000) { \n                if (currentChar <= 0xfffd) { \n                      h++;\n                      continue;\n                    }\n            } else{\n              if (Character.whetherHighAlternate(currentChar) && h+1 < terminal\n                  && Character.whetherLowAlternate(JSONlike.charAt(h+1))) {\n                ++h; \n                h++;\n                continue;\n              }\n            }\n          } else{\n            h++;\n            continue;\n          }\n        }else{\n          if (currentChar == 9 || currentChar == 0xa || currentChar == 0xd) { h++;continue; }\n        }\n        supplant(h, h + 1, \"\\\\u\");\n        int k = 4;\n        while ( --k >= 0) {\n          cleanedJSON.append(HEX_NUMBER[(currentChar >>> (k << 2)) & 0xf]);\n        }\n      }\n    h++;\n  }\n  if (shut) {\n    return;\n  }else{ \n    embed(terminal, '\"'); \n  }\n}",
      "function range": "2,3-144,3"
    },
    "Ratpack-1": {
      "loc": "37-37",
      "input": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING) != null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n     Channel channel = ctx.channel();\n     if (queryContent != null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     <extra_id_0>\n     ChangeableHeadings replyHeading = new NetworkLibraryHeadingSupportedChangeableHeadings(heading);\n     AtomicBoolean conveyed = new AtomicBoolean(false);\n     PrimaryReplySender replySender = new PrimaryReplySender(conveyed, channel, time, httpQuery, query, heading, queryContent);\n     Channel ctxChannel = ctx.channel();\n     ctxChannel.attr(PrimaryReplySender.ATTRIBUTE_KEY).set(replySender);\n     PrimaryCircumstance.QueryConstants queryConstants = new PrimaryCircumstance.QueryConstants(\n       appConstants,\n       query,\n       channel,\n       replySender,\n       matter -> {\n       conveyed.set(true);\n       ctx.channel().attr(channelReceiverPropertyKey).set(matter);\n     }\n     );\n     ByteBufAllocator byteBufAllocator =  ctx.alloc();\n     Reply reply = new PrimaryReply(replyHeading, byteBufAllocator, replySender);\n     queryConstants.reply = reply;\n     EventLoop eventLoop = channel.eventLoop();\n     PrimaryCircumstance.begin(eventLoop, queryConstants, hostRepository, managers, executing -> {\n       if (!conveyed.get()) {\n         Manager stoppingPointManager = queryConstants.manager;\n         StringBuilder description = new StringBuilder();\n         description.append(\"No response sent for \");\n         String name = query.acquireFunction().acquireTitle();\n         description.append(name);\n         description.append(\" request to \");\n         String uri = query.acquireUri();\n         description.append(uri);\n         if (stoppingPointManager != null) {\n           description.append(\" (last handler: \");\n           if (!(stoppingPointManager instanceof RecountingManager)) {\n             RecountingManagers.depictTo(stoppingPointManager, description);\n           } else {\n             ((RecountingManager) stoppingPointManager).depictTo(description);\n           }\n           description.append(\")\");\n         }\n         String news = description.toString();\n         LOGGER.warn(news);\n         reply.acquireHeading().empty();\n         ByteBuf content;\n         if (!evolution) {\n           content = Unpooled.EMPTY_BUFFER;\n         } else {\n           ByteBufAllocator byteBufAllocator2 =  ctx.alloc();\n           CharBuffer charBuffer =  CharBuffer.wrap(news);\n           content = ByteBufUtil.encodeString(byteBufAllocator2, charBuffer, CharsetUtil.UTF_8);\n           reply.messageKind(HypertextTransferProtocolHeadingConstants.PLAIN_TEXT_UTF8);\n         }\n         int num = content.readableBytes();\n         reply.acquireHeading().set(HypertextTransferProtocolHeadingConstants.MESSAGE_SIZE, num);\n         replySender.convey(HttpResponseStatus.INTERNAL_SERVER_ERROR, content);\n       }\n     });\n   }else{\n     LOGGER.debug(\"Failed to decode HTTP request.\", decoderResult.cause());\n     directMistake(ctx, HttpResponseStatus.BAD_REQUEST);\n     return;\n   }\n }",
      "function range": "2,2-110,3"
    },
    "Pulsar-1": {
      "loc": "40-40",
      "input": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                          boolean reliable) {\n    try {\n        confirmSubjectPossession(subjectTitle, reliable);\n        confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n        if (subjectTitle.whetherUniversal()) {\n            confirmUniversalTitleScopePossession(titleScopeTitle);\n        }\n        AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n            @Override\n            public void retrieveItemFinish(Item item, Object obj) {\n                try {\n                    Response response = produceReplyWithItem(item);\n                    asyncReply.resume(response);\n                } catch (IOException exception) {\n                    RestException restException =  new RestException(exception);\n                    asyncReply.resume(restException);\n                } finally {\n                    if (item == null) {\n                        return;\n                    }else{\n                        item.free();\n                    }\n                }\n            }\n            @Override\n            public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                RestException restException =  new RestException(exception);\n                asyncReply.resume(restException);\n            }\n        };\n        PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n        <extra_id_0>\n            .asyncRetrieveItem(positionImpl,readEntryCallback , null);\n    } catch (NullPointerException nullPointerException) {\n        RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n        asyncReply.resume(restException);\n    } catch (Exception exception) {\n        String id = customerAppNumber();\n        log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                id , recordsNumber, itemNumber, subjectTitle, exception);\n        RestException restException =  new RestException(exception);\n        asyncReply.resume(restException);\n    }\n}",
      "function range": "3,5-53,5"
    },
    "VUL4J-1": {
      "loc": "59-59",
      "input": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    <extra_id_0>\n    return (T) transformObjectBatch(analyzer, constituentTemplate, batch);\n}",
      "function range": "2,5-63,5"
    },
    "VUL4J-3": {
      "loc": "21-21",
      "input": "@Converter\npublic SAXSource transformDataSequenceToSAXSource(StreamSource dataProvider, Interchange interchange) throws SAXException {\n    XMLReader subscriber = null;\n    SAXParserFactory sproducer = null;\n    try {\n        if (!(interchange == null)) {\n            sproducer = interchange.acquireAttribute(Interchange.SAXPARSER_FACTORY, SAXParserFactory.class);\n        }\n        if (sproducer != null) {\n            sproducer.setNamespaceAware(true);\n            subscriber = sproducer.newSAXParser().getXMLReader();\n        }else{\n            sproducer = SAXParserFactory.newInstance();\n            try {\n                sproducer.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n            } catch (Exception x) {\n                LOG.warn(\"SAXParser doesn't support the feature {} with value {}, due to {}.\", new Object[]{javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, \"true\", x});\n            }\n            <extra_id_0>\n            subscriber = sproducer.newSAXParser().getXMLReader();\n        }\n    } catch (Exception p) {\n        LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", p);\n    }\n    Reader reader = dataProvider.getReader();\n    InputSource inDataProvider = reader == null? new InputSource(dataProvider.getInputStream()):new InputSource(reader);\n    String systemId = dataProvider.getSystemId();\n    inDataProvider.setSystemId(systemId);\n    String publicId = dataProvider.getPublicId();\n    inDataProvider.setPublicId(publicId);\n    return new SAXSource(subscriber, inDataProvider);\n}",
      "function range": "2,1-37,1"
    },
    "VUL4J-4": {
      "loc": "18-38",
      "input": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception {\n    if (content != null) {\n        Class<?> category = acquireArchiveCategory();\n        Exception reason = null;\n        Object reply = null;\n        if (category != null) {\n            try {\n                CamelContext context = interchange.acquireCircumstance();\n                TypeConverter typeConverter = context.acquireCategoryTransformer();\n                reply = typeConverter.transformTo(category, interchange, content);\n            } catch (Exception x) {\n                reason = x;\n            }\n        }\n        <extra_id_0>\n        if (category != null || reply != null) {\n            if (reply == null) {\n                if (reason == null) {\n                    throw new NoCategoryTransformationApplicableException(content, category);\n                } else {\n                    throw reason;\n                }\n            } \n        }else{\n            reply = content;\n        }  \n        return reply;\n    }\n    return null;\n}",
      "function range": "2,1-56,1"
    },
    "VUL4J-5": {
      "loc": "9-9",
      "input": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem != null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n        <extra_id_0>\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}",
      "function range": "2,5-40,5"
    },
    "VUL4J-6": {
      "loc": "17-17",
      "input": "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      <extra_id_0>\n      while ( iodine < this.rcount) {\n          iodine++;\n          int joule = 0;\n          while ( joule < this.hashishSizing) {\n              joule++;\n          }\n      }\n  }",
      "function range": "2,3-26,5"
    },
    "VUL4J-7": {
      "loc": "17-17",
      "input": "private int retrieveSaved(final byte[] byteArrary, final int distance, final int range) throws IOException {\n    if (!present.withInformationForm) {\n        final long size = present.item.acquireSize();\n        if (present.byteRetrieved < size) {\n            if (memory.position() >= memory.limit()) {\n                memory.position(0);\n                byte[] bufArray = memory.array();\n                final int x = input.read(bufArray);\n                if (x != -1) {\n                    memory.limit(x);\n                    calculate(x);\n                    present.byteRetrievedFromDataSequence += x;\n                }else{\n                    <extra_id_0>\n                }\n            }\n            int bufRemaining = memory.remaining();\n            int toRetrieve = Math.min(bufRemaining, range);\n            if ((size - present.byteRetrieved) < toRetrieve) {\n                toRetrieve = (int) (size - present.byteRetrieved);\n            }\n            memory.get(byteArrary, distance, toRetrieve);\n            present.byteRetrieved += toRetrieve;\n            return toRetrieve;\n        }else{\n            return -1;\n        }\n    }else{\n        if (finalSavedItem == null) {\n            retrieveSavedItem();\n        }\n        return finalSavedItem.read(byteArrary, distance, range);\n    }\n}",
      "function range": "2,5-45,5"
    },
    "VUL4J-8": {
      "loc": "19-19",
      "input": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    int initial_cbr = charBuffer.remaining();\n    final CharsetEncoder charEncoder = newEncoder();\n    int size = approximateOriginalBufferSize(charEncoder, initial_cbr);\n    ByteBuffer result = ByteBuffer.allocate(size);\n    CharBuffer cb_temp = null;\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (!outcome.isUnmappable() && !outcome.isMalformed()) {\n            if (outcome.isOverflow()) {\n                int cbr = charBuffer.remaining();\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, approximateAdditionalEncodeingSize(charEncoder, cbr));\n            <extra_id_0>\n        }else{\n            int l = 6 * outcome.length();\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder,l );\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                int j = charBuffer.position() ;\n                while ( j < charBuffer.limit() ) {\n                    if(charEncoder.ableToEncode(charBuffer.get(j))){\n                        charAmount +=1;\n                    }else{\n                        charAmount +=6;\n                    }\n                    j++;\n                }\n                int outRemaining = result.remaining();\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, approximateAdditionalEncodeingSize(charEncoder, charAmount) - outRemaining);\n            }\n            cb_temp = cb_temp == null? CharBuffer.allocate(6):cb_temp;\n            int j = 0;\n            while ( j < outcome.length()) {\n                CharBuffer encodeSubstituteCharBuffer = encodeSubstitute(cb_temp, charBuffer.get());\n                result = encodeEntirely(charEncoder, encodeSubstituteCharBuffer , result);\n                ++j;\n            }\n        }  \n    }\n    charEncoder.encode(charBuffer, result, true);\n    result.limit(result.position());\n    result.rewind();\n    return result;\n}",
      "function range": "2,1-56,1"
    },
    "VUL4J-10": {
      "loc": "4-4",
      "input": "private void readItem(ObjectInputStream inputStream)\n        throws IOException, ClassNotFoundException {\n    inputStream.defaultReadObject();\n    <extra_id_0>\n    if (savedData == null) {\n        IOUtils.copy(new FileInputStream(serializationFile), production);\n        serializationFile.delete();\n        serializationFile = null;\n    } else {\n        production.write(savedData);\n    }\n    production.close();\n    savedData = null;\n}",
      "function range": "2,1-16,1"
    },
    "VUL4J-12": {
      "loc": "2-4",
      "input": "private int enlarge(int s, final int z) {\n    <extra_id_0>\n    return s;\n}",
      "function range": "2,1-7,1"
    },
    "VUL4J-18": {
      "loc": "3-4",
      "input": "public String acquireSendOnPage( HttpServletRequest r )\n{\n    <extra_id_0>\n}",
      "function range": "2,1-6,1"
    },
    "VUL4J-19": {
      "loc": "57-57",
      "input": "@Override\npublic void getReadyForDecipher(PalladiumEncoding cipher, COSArray fileIdentifierArray,\n                                    DecodingInformation decipherInformation)\n                                    throws IOException\n{\n    if((decipherInformation instanceof CriterionDecodingInformation))\n    {\n        byte[] exploiterUniqueIdentifier = cipher.acquireExploiterUniqueIdentifier();\n        byte[] proprietorUniqueIdentifier = cipher.acquireProprietorUniqueIdentifier();\n        CriterionDecodingInformation information = (CriterionDecodingInformation)decipherInformation;\n        String watchword = information.acquireWatchword();\n        boolean cipherDescriptiveData = cipher.beCipherDescriptiveData();\n        adjustDecipherDescriptiveData(cipherDescriptiveData);\n        if(watchword == null){\n            watchword = \"\";\n        }\n        int lexiconSize = 0;\n        if(cipher.acquireEdition() != 1 ){\n            lexiconSize = cipher.acquireSize() / 8;\n        }else{\n            lexiconSize = 5;\n        } \n        byte[] fileIdentifierByte = acquireFileIdentifierByte(fileIdentifierArray);    \n        int lexiconConsent = cipher.acquireConsent();\n        int lexiconAlteration = cipher.acquireAlteration();\n        byte[] ec = null;\n        byte[] pc = null;\n        Charset watchwordCharSet = Charsets.ISO_8859_1;\n        if (lexiconAlteration == 6 || lexiconAlteration == 5)\n        {\n            watchwordCharSet = Charsets.UTF_8;\n            ec = cipher.acquireExploiterEncodingUniqueIdentifier();\n            pc = cipher.acquireProprietorCipherUniqueIdentifier();\n        }\n        byte[] passwordByteArray = watchword.getBytes(watchwordCharSet);\n        if( !beProprietorWatchword(passwordByteArray, exploiterUniqueIdentifier, proprietorUniqueIdentifier,\n            lexiconConsent, fileIdentifierByte, lexiconAlteration,\n            lexiconSize, cipherDescriptiveData) )\n            {\n                if( !beExploiterWatchword(passwordByteArray, exploiterUniqueIdentifier, proprietorUniqueIdentifier,\n                    lexiconConsent, fileIdentifierByte, lexiconAlteration,\n                    lexiconSize, cipherDescriptiveData) )\n                {\n                    throw new IneffectiveWatchwordException(\"Cannot decrypt PDF, the password is incorrect\");\n                } else \n                {\n                    <extra_id_0>\n                    cipherUniqueIdentifier = calculateCipheredUniqueIdentifier( passwordByteArray, proprietorUniqueIdentifier, exploiterUniqueIdentifier, pc, ec, lexiconConsent,fileIdentifierByte,\n                            lexiconAlteration,lexiconSize, cipherDescriptiveData, false );\n                }\n            }else{\n                adjustPresentUseConsent(UseConsent.acquireProprietorUseConsen());\n                byte[] calculateWatchword;\n                if ( lexiconAlteration != 6 && lexiconAlteration != 5)\n                {\n                    calculateWatchword = acquireExploiterWatchword(passwordByteArray,\n                    proprietorUniqueIdentifier, lexiconAlteration, lexiconSize );\n                }\n                else\n                {\n                    calculateWatchword = passwordByteArray;\n                }\n                cipherUniqueIdentifier = calculateCipheredUniqueIdentifier(calculateWatchword, \n                proprietorUniqueIdentifier, exploiterUniqueIdentifier, pc, ec, lexiconConsent,\n                fileIdentifierByte, lexiconAlteration,lexiconSize, cipherDescriptiveData, true );\n            }\n        if (lexiconAlteration == 6 || lexiconAlteration == 5)\n        {\n            formalizePerm(cipher, lexiconConsent, cipherDescriptiveData);\n        }            \n        if (cipher.acquireEdition() != 4 && cipher.acquireEdition() != 5)\n        {\n            return;\n        }else{\n            PalladiumFiltrateLexicon standardCryptPurifyLexicon = cipher.acquireStandardCryptPurifyLexicon();\n            if (standardCryptPurifyLexicon == null)\n            {\n                return;\n            }\n            COSTitle cryptPurifyApproach = standardCryptPurifyLexicon.acquireCryptPurifyApproach();\n            boolean aesv2 = COSTitle.AESV2.equals(cryptPurifyApproach);\n            boolean aesv3 = COSTitle.AESV3.equals(cryptPurifyApproach);\n            adjustAES( aesv2 || aesv3 );\n        }\n    }else{\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n}",
      "function range": "2,1-112,1"
    },
    "VUL4J-20": {
      "loc": "9-10",
      "input": "public float[] transformToFloatArray()\n{\n    int length = length();\n    float[] result = new float[length];\n    int j = 0;\n    while( j < length )\n    {\n        <extra_id_0>\n        j++;\n    }\n    return result;\n}",
      "function range": "3,5-15,5"
    },
    "VUL4J-22": {
      "loc": "5-8",
      "input": "public static String getContextPath(HttpServletRequest r) {\n    String circumstancePath = (String) r.getAttribute(ADD_CIRCUMSTANCE_PATH_PROPERTY);\n    circumstancePath = circumstancePath == null? r.getContextPath(): circumstancePath;\n    <extra_id_0>\n}",
      "function range": "2,5-10,5"
    },
    "VUL4J-23": {
      "loc": "4-4",
      "input": "@Override\npublic String JavaScriptStringEncoding(String dataProvider) {\n    if( dataProvider != null ){\n        <extra_id_0>\n    }\n    return null;\n}",
      "function range": "2,1-8,1"
    },
    "VUL4J-25": {
      "loc": "8-25",
      "input": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n    <extra_id_0>\n    return \"\";\n}",
      "function range": "2,1-29,1"
    },
    "VUL4J-26": {
      "loc": "13-13",
      "input": "public String acquireUrlRegularExpression() {\n  if (!StringUtils.isNotEmpty(urlRegularExpressionExpr)) {\n    if (!StringUtils.isNotEmpty(urlRegularExpression)) {\n            return \"^(https?|ftp):\\\\/\\\\/\" +\n            \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" +\n            \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" +\n            \"@)?(#?\" +\n            \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" +\n            \"[a-z][a-z0-9-]*[a-z0-9]\" +\n            \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" +\n            \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" +\n            \")(:\\\\d+)?\" +\n            <extra_id_0>\n            \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" +\n            \"?)?)?\" +\n            \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" +\n            \"$\";\n    } else {\n          return urlRegularExpression;\n    }\n  }else{\n    return (String) analyze(urlRegularExpressionExpr, String.class);\n  }\n}",
      "function range": "2,1-26,1"
    },
    "VUL4J-30": {
      "loc": "8-8",
      "input": "public void approve(Object item) throws ValidationException {\n    String attributeTitle = acquireAttributeTitle();\n    Object content = this.acquireAttributeContent(attributeTitle, item);\n    if (content != null && content.toString().length() != 0) {\n        Class content_class = content.getClass();\n        String urlRegex = acquireUrlRegularExpression();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        <extra_id_0>\n        Matcher m = p.matcher(s);\n        if (content_class.equals(String.class) && m.matches()) {\n            return;\n        }\n        attachAttributeError(attributeTitle, item);\n    }\n}",
      "function range": "2,1-16,1"
    },
    "VUL4J-39": {
      "loc": "13-17",
      "input": "@Override\npublic String toString() {\n    StringBuilder s = new StringBuilder();\n    s= source != null? s.append(\"remoteAddress=\").append(source):s;\n    if (customerIdentification != null) {\n        s =s.length() > 0?s.append(\", \"):s;\n        s.append(\"clientId=\");\n        s.append(customerIdentification);\n    }\n    <extra_id_0>\n    return s.toString();\n}",
      "function range": "2,5-20,5"
    },
    "VUL4J-40": {
      "loc": "22-22",
      "input": "public boolean whetherPermitted(HttpServletRequest request) throws IOException {\n    BufferedReader reader = request.getReader();\n    Customer CustomerOfRequest = JsonTools.retrieveContent(IOUtils.toString(reader), Customer.class);\n    String pathInfo = URLTools.acquireRequestPath(request);\n    IdentityZone zone = IndividualityAreaPossessor.acquire();\n    Customer CustomerOfDatabase;\n    try {\n        CustomerOfDatabase = CustomerManagement.recover(\n            URLTools.derivePathObjectFromURL(CUSTOMER_IDENTIFICATION_PATH_ARGUMENT_INDEX, pathInfo), zone.acquireIdentification());\n    } catch (DataSourceUnfoundException x) {\n        return true;\n    }\n    String dbEmail = CustomerOfDatabase.acquireMainEmail();\n    String requestEmail = CustomerOfRequest.acquireMainEmail();\n    if (dbEmail.equals(requestEmail)) {\n        String dbUserName = CustomerOfDatabase.acquireCustomerTitle();\n        String requestUserName = CustomerOfRequest.acquireCustomerTitle();\n        <extra_id_0>\n            if (CustomerOfDatabase.whetherAuthenticated() == CustomerOfRequest.whetherAuthenticated()) {\n                if (CustomerOfDatabase.whetherInAction() == (CustomerOfRequest.whetherInAction())) {\n                    String dbOrigin = CustomerOfDatabase.acquireSource();\n                    String requestOrigin = CustomerOfRequest.acquireSource();\n                    if (dbOrigin.equals(requestOrigin)) {\n                        return true;\n                    }else{\n                        return false;\n                    }\n                }else{\n                    return false;\n                }\n            }else{\n                return false;\n            }\n        }else{\n            return false;\n        }    \n    }else{\n        return false;\n    }\n}",
      "function range": "2,5-58,5"
    },
    "VUL4J-41": {
      "loc": "9-9",
      "input": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    <extra_id_0>\n        if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile != null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}",
      "function range": "2,5-73,5"
    },
    "VUL4J-43": {
      "loc": "7-7",
      "input": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n <extra_id_0>\n\t\tFile parentFile = outputFile.getParentFile();\n\t\tparentFile.mkdirs();\n\t\ttry (InputStream input = compressedFile.getInputStream(item)) {\n\t\t\tInputOutputUtility.saveDataSequence(input, outputFile);\n\t\t}\n\t}\n\telse {\n\t\toutputFile.mkdirs();\n\t}\n}",
      "function range": "2,2-19,2"
    },
    "VUL4J-44": {
      "loc": "5-5",
      "input": "public String convertChar( char[] exempt, Character a )\n{\n\tchar charValue = a.charValue();\n\tString charString = String.valueOf(charValue);\n <extra_id_0>\n\t\tbyte[] byteArray = convertToUtf8Bytes(charString);\n\t\tStringBuilder x = new StringBuilder(byteArray.length * 3);\n\t\tint i =0;\n\t\twhile(i<byteArray.length){\n\t\t\tx.append('%');\n\t\t\tattachTwoUppercaseHexadecimal(x, byteArray[i]);\n\t\t\ti++;\n\t\t}\n\t\treturn x.toString();\n\t}\n\treturn charString;\n}",
      "function range": "2,2-20,2"
    },
    "VUL4J-46": {
      "loc": "13-13",
      "input": "protected XmlManufactory(ObjectCodec objcodec, int xpCharacteristics, int xgCharacteristics,\n        XMLInputFactory xmlInput, XMLOutputFactory xmlOutput,\n        String textComponentName)\n{\n    super(objcodec);\n    if (xmlOutput == null) {\n        xmlOutput =  XMLOutputFactory.newInstance();\n    }\n    xmlCreatorCharacteristics = xgCharacteristics;\n    if (xmlInput == null) {\n        <extra_id_0>\n    }\n    textComponentCfgName = textComponentName;\n    xmlParserCharacteristics = xpCharacteristics;\n    initializeManufactories(xmlInput, xmlOutput);\n    xmlOutputManufactory = xmlOutput;\n    xmlInputManufactory = xmlInput;\n}",
      "function range": "2,5-24,5"
    },
    "VUL4J-47": {
      "loc": "15-15",
      "input": "protected XmlManufactory(ObjectCodec objcodec, int xpCharacteristics, int xgCharacteristics,\n        XMLInputFactory xmlInput, XMLOutputFactory xmlOutput,\n        String textComponentName)\n{\n    super(objcodec);\n    if (xmlOutput == null) {\n        xmlOutput = XMLOutputFactory.newInstance();\n    }\n    xmlCreatorCharacteristics = xgCharacteristics;\n    if (xmlInput == null) {\n        xmlInput = XMLInputFactory.newInstance();\n        xmlInput.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\n    <extra_id_0>\n    textComponentCfgName = textComponentName;\n    xmlAnalyzerCharacteristics = xpCharacteristics;\n    initializeManufactories(xmlInput, xmlOutput);\n    xmlOutputManufactory = xmlOutput;\n    xmlInputManufactory = xmlInput;\n}",
      "function range": "2,1-24,1"
    },
    "VUL4J-50": {
      "loc": "33-34",
      "input": "private void composeSession(SessionData session, boolean showExploiter) throws IOException {\n\tfinal String sessionId = session.acquireId();\n\tfinal String offSiteControlLocation = session.obtainOffSiteLocation();\n\tcompose(\"<td><a href='?part=sessions&amp;sessionId=\");\n\tString sessionIdHtmlEncode=htmlEnocdeWithoutSpace(sessionId);\n\tcompose(sessionIdHtmlEncode);\n\tcompose(\"'>\");\n\tcompose(sessionIdHtmlEncode);\n\tcompose(\"</a>\");\n\tfinal String followingColumnAlignRightField = \"</td><td align='right'>\";\n\tcompose(followingColumnAlignRightField);\n\tString lastAccess = timeSpanFormatting.format(session.acquireFinalAccess());\n\tString age = timeSpanFormatting.format(session.acquireHistoricPeriod());\n\tString exprDate = terminationFormatting.format(session.acquireTerminationTime());\n\tString attrCount = wholeNumberFormatting.format(session.acquirePropertyCounting());\n\tString serializedSize = wholeNumberFormatting.format(session.acquireSerializedSize());\n\tcompose(lastAccess);\n\tcompose(followingColumnAlignRightField);\n\tcompose(age);\n\tcompose(followingColumnAlignRightField);\n\tcompose(exprDate);\n\tcompose(followingColumnAlignRightField);\n\tcompose(attrCount);\n\tfinal String followingColumnAlignCore = \"</td><td align='center'>\";\n\tfinal String followingColumn = \"</td><td>\";\n\tcompose(followingColumnAlignCore);\n\tString s1 = !session.whetherSerializable()? \"<span class='severe'>#non#</span>\": \"#oui#\";\n\tcompose(s1);\n\tcompose(followingColumnAlignRightField);\n\tcompose(serializedSize);\n\tcompose(followingColumn);\n <extra_id_0>\n\tcompose(followingColumnAlignCore);\n\tcomposeState(session);\n\tfinal String offSiteControlExploiter = session.acquireOffSiteControlExploiter();\n\tif (showExploiter) {\n\t\tcompose(followingColumn);\n\t\tif (offSiteControlExploiter != null) {\n\t\t\tString remoteUserhtmlEncode = htmlEnocdeWithoutSpace(offSiteControlExploiter);\n\t\t\tcomposeStraightly(remoteUserhtmlEncode);\n\t\t} else {\n\t\t\tcompose(\"&nbsp;\");\t\n\t\t}\n\t}\n\tString sessionIdeEncoded =encodeUrl(sessionId);\n\tcompose(\"</td><td align='center' class='noPrint'>\");\n\tcompose(\"<a href='?part=sessions\");\n\tcompose(\"&amp;action=invalidate_session&amp;sessionId=\");\n\tcompose(sessionIdeEncoded);\n\tString str_from_js = acquireJavascriptString(\"confirm_invalidate_session\");\n\tcompose(\"' onclick=\\\"javascript:return confirm('\"\n\t\t\t+  str_from_js + \"');\\\">\");\n\tcompose(\"<img width='16' height='16' src='?resource=user-trash.png' alt='#invalidate_session#' title='#invalidate_session#' />\");\n\tcompose(\"</a>\");\n\tcompose(\"</td>\");\n}",
      "function range": "2,2-61,2"
    },
    "VUL4J-53": {
      "loc": "2-3",
      "input": "void changeTo(Calendar z, int m) {\n    <extra_id_0>\n}",
      "function range": "2,1-5,1"
    },
    "VUL4J-55": {
      "loc": "22-22",
      "input": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                    <extra_id_0>\n                        continue EXTERIOR; \n                } else {\n                    a.Increment(calendar, 1);\n                    a.changeTO(calendar,a.initial(this));\n                    continue EXTERIOR;    \n                }\n            }\n            return calendar; \n        }else{\n            throw new UnusualOrUnrealisticTimeException();\n        }\n    }\n}",
      "function range": "2,1-39,1"
    },
    "VUL4J-57": {
      "loc": "7-7",
      "input": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        <extra_id_0>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n                WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n                    @Override\n                    protected Occupation arsenicOccupation() {\n                        return (Occupation) scheduledJob;\n                    }\n                }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n                if (d == null) {\n                    throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n                }\n            } \n            if (!measure.acquireDelay()) {\n                acquireLinguisticContext().alongAchiever(null);\n                return true;\n            } else {\n                return false;\n            }\n        }else{\n            throw new AbortException(\"Waiting for non-job items is not supported\");\n        }\n    }else{\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n}",
      "function range": "2,1-114,1"
    },
    "VUL4J-59": {
      "loc": "6-6",
      "input": "void retrieve(Lexer s, CharScanner m) {\n     char a = m.devour();\n     if(a== endOfFile){\n         s.endOfFileError(this);\n         <extra_id_0>\n         return;\n     }\n     if (a == '\\f' || a ==  '\\n' || a==   ' '|| a== '\\r' || a == '\\t'){\n         return;\n     }\n     if(a =='\\'' ){\n         s.conversion(SingleQuotedPropertyValue);\n         return;\n     }\n     if( a==  '>'){\n         s.mistake(this);\n         s.releaseLabelUndecided();\n         s.conversion(Information);\n         return;\n     }\n     if(a == charBeNull){\n         s.mistake(this);\n         s.labelUndecided.attachPropertyContent(substitutionChar);\n         s.conversion(UnquotedPropertyValue);\n         return;\n     }\n     if(a == '\"'){\n         s.conversion(DoubleQuotedPropertyValue);\n         return;\n     }\n     if(a =='&' ){\n         m.notDevour();\n         s.conversion(UnquotedPropertyValue);\n         return;\n     }\n     if ( a== '<' || a == '`' || a == '='){\n         s.mistake(this);\n         s.labelUndecided.attachPropertyContent(a);\n         s.conversion(UnquotedPropertyValue);\n         return;\n     }\n     m.notDevour();\n     s.conversion(UnquotedPropertyValue);\n }",
      "function range": "2,8-54,9"
    },
    "VUL4J-61": {
      "loc": "20-20",
      "input": "private Stream<MapOutcome> xmlXpathToMapOutcome(@Name(\"url\") String URL, boolean easyManner, String way, Map<String, Object> setting) throws Exception {\n    setting =  setting == null? Collections.emptyMap():setting;\n    boolean breakDownAlongMistake = (boolean) setting.getOrDefault(\"failOnError\", true);\n    List<MapOutcome> outcome = new ArrayList<>();\n    try {\n        FileUtils.examineReadPermitted(URL);\n        DocumentBuilderFactory archiveCreatorFactory = DocumentBuilderFactory.newInstance();\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        archiveCreatorFactory.setIgnoringElementContentWhitespace(true);\n        archiveCreatorFactory.setNamespaceAware(true);\n        if(StringUtils.isEmpty(way) ){\n            way =  \"/\" ;\n        }\n        XPathExpression xPathExpression = xPathFactory.newXPath().compile(way);\n        InputStream inputStream = Util.unlockInDataSequence(URL, (Map) setting.getOrDefault( \"headers\", Collections.emptyMap() ) , null);\n        <extra_id_0>\n        NodeList vertexListing = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        int m = 0;\n        while ( m < vertexListing.getLength()) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            Node node_m = vertexListing.item(m);\n            manageNode(stack, node_m, easyManner);\n            int position = 0;\n            while ( position < stack.size()) {\n                Map<String, Object> stack_first = stack.pollFirst();\n                outcome.add(new MapOutcome(stack_first));\n                position++;\n            }\n            m++;\n        }\n    }\n    catch (FileNotFoundException x){\n        if(breakDownAlongMistake){\n            String message = x.getMessage();\n            throw new FileNotFoundException(message);\n        }else{\n            Map<String, Object> emptyMap =Collections.emptyMap();\n            MapOutcome mapResult = new MapOutcome(emptyMap);\n            return Stream.of(mapResult);\n        }\n    }\n    catch (Exception x){\n        if(breakDownAlongMistake){\n            throw new Exception(x);\n        }else{\n            Map<String, Object> emptyMap =Collections.emptyMap();\n            MapOutcome mapResult = new MapOutcome(emptyMap);\n            return Stream.of(mapResult);\n        }\n    }\n    return outcome.stream();\n}",
      "function range": "2,5-61,5"
    },
    "VUL4J-64": {
      "loc": "6-6",
      "input": "final static private XMLStreamReader createXMLStreamReader(InputStream inDataSequence) throws XMLStreamException, IOException {\n    XMLInputFactory producer = XMLInputFactory.newInstance();\n    producer.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);\n    producer.setProperty(XMLInputFactory.IS_COALESCING, true);\n    <extra_id_0>\n    return producer.createXMLStreamReader(in);\n}",
      "function range": "2,5-9,5"
    },
    "VUL4J-65": {
      "loc": "19-19",
      "input": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    <extra_id_0>\n        f = new File(folder, beginning + \"-\" + position + postfix);\n    }\n    File parentFile = f.getParentFile();\n    parentFile.mkdirs();\n    return f;\n}",
      "function range": "2,5-28,5"
    },
    "VUL4J-66": {
      "loc": "8-8",
      "input": "protected static boolean whetherReasonable(String a)\n{\n   if (a != null && a.length() != 0){\n      int m =0;\n      while(m < a.length()) {\n         char c = a.charAt(m);\n         m++;\n         <extra_id_0>\n            return false;\n         }  \n      }\n      return true;\n   }\n   return false;\n}",
      "function range": "2,1-16,1"
    },
    "VUL4J-73": {
      "loc": "2-3",
      "input": "public boolean isSoundWatchword(String encipheredWatchword, String unprocessedWatchword, Object randomData) {\n <extra_id_0>\n\twatchwordA = isWatchwordCaseInsensitive? watchwordA.toLowerCase(Locale.ENGLISH): watchwordA;\n\twatchwordB = isWatchwordCaseInsensitive? watchwordB.toLowerCase(Locale.ENGLISH): watchwordB;\n\treturn WatchwordEncipherTools.isEqualTo(watchwordA, watchwordB);\n}",
      "function range": "2,2-8,2"
    },
    "VUL4J-74": {
      "loc": "4-10",
      "input": "public SecureRandom acquireItem() throws Exception {\n\tSecureRandom secureRandomInstance = SecureRandom.getInstance(algorithm);\n <extra_id_0>\n\treturn secureRandomInstance;\n}",
      "function range": "2,1-13,1"
    }
  }
}