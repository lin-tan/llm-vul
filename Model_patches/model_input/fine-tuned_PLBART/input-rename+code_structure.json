{
  "config": "finetune",
  "data": {
    "Netty-1": {
      "loc": "10-10",
      "input": "<s> private void cutHeading(AttachableCharSuccession a) { final int range = a.range(); int titleBeginning; int titleTerminal; titleBeginning = detectNotSpacing(a, 0); titleTerminal = titleBeginning; while( titleTerminal < range) { char z = a.insecureCharAt(titleTerminal); </s> if (z != ':' && !Character.isWhitespace(z)) { </s> titleTerminal ++; }else{ break; } } int terminalColon; terminalColon = titleTerminal; while ( terminalColon < range) { if (a.insecureCharAt(terminalColon) != ':') { terminalColon ++; }else{ terminalColon ++; break; } } int contentBeginning; int contentTerminal; title = a.partOfStringInsecure(titleBeginning, titleTerminal); contentBeginning = detectNotSpacing(a, terminalColon); if (contentBeginning != range) { contentTerminal = detectTerminalOfString(a); content = a.partOfStringInsecure(contentBeginning, contentTerminal); } else{ content = BLANK_CONTENT; } } </s> java"
    },
    "Netty-2": {
      "loc": "18-18",
      "input": "<s> private void cutHeading(AttachableCharSuccession a) { final int range = a.range(); int titleBeginning; int titleTerminal; titleBeginning = detectNotSpacing(a, 0); titleTerminal = titleBeginning; while( titleTerminal < range) { char z = a.insecureCharAt(titleTerminal); if (z != ':' && (beDecryptionDemand() || !Character.isWhitespace(z))) { titleTerminal ++; }else{ break; } } </s> int terminalColon; </s> terminalColon = titleTerminal; while ( terminalColon < range) { if (a.insecureCharAt(terminalColon) != ':') { terminalColon ++; }else{ terminalColon ++; break; } } int contentBeginning; int contentTerminal; title = a.partOfStringInsecure(titleBeginning, titleTerminal); contentBeginning = detectNotSpacing(a, terminalColon); if (contentBeginning != range) { contentTerminal = detectTerminalOfString(a); content = a.partOfStringInsecure(contentBeginning, contentTerminal); } else{ content = BLANK_CONTENT; } } </s> java"
    },
    "Jenkins-1": {
      "loc": "6-12",
      "input": "<s> @Exported(inline=true) public Map<String,Object> acquireProctorInformation() { List<VertexProctor> nodeMonitorList = VertexProctor.acquireWhole(); Map<String,Object> z = new HashMap<String, Object>(); int i = 0; </s> while(i < nodeMonitorList.size() ){ VertexProctor proctor = nodeMonitorList.get(i); Class proctorClass = proctor.getClass(); String name = proctorClass.getName(); z.put( name ,proctor.information(this)); i++; } </s> return z; } </s> java"
    },
    "Jenkins-2": {
      "loc": "4-16",
      "input": "<s> @Exported(name=\"jobs\") public List<PeakDegreeElement> acquireElements() { Collection<PeakDegreeElement> itemValues = elements.values(); </s> if (!(mandateScheme instanceof MandateScheme.Unguarded) && !(mandateScheme instanceof CompleteDominanceWhenLoggedInMandateScheme)) { List<PeakDegreeElement> visibleElements = new ArrayList<PeakDegreeElement>(); Iterator<PeakDegreeElement> iterator = itemValues.iterator(); while( iterator.hasNext()){ PeakDegreeElement element = iterator.next(); if (!element.withAuthority(Item.RETRIEVE)) continue; visibleElements.add(element); } return visibleElements; } return new ArrayList(itemValues); </s> } </s> java"
    },
    "Jenkins-3": {
      "loc": "38-40",
      "input": "<s>  </s> protected Collection<UIComponent> whole() { return uiComponents; } </s>  </s> java"
    },
    "Halo-1": {
      "loc": "6-6",
      "input": "<s> public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(examinePath, \"Path to check must not be null\"); Assert.notNull(basePath, \"Parent path must not be null\"); Path normalizedBasePath = basePath.normalize(); </s> if (!examinePath.startsWith(normalizedBasePath)) { </s> ProhibitedException e = new ProhibitedException(\"You do not have permission to access \" + examinePath); e.specifyErrorInformation(examinePath); throw e; } } </s> java"
    },
    "Retrofit-1": {
      "loc": "3-3",
      "input": "<s> JaxbReplyTransformer(JAXBContext setting, Class<T> category) { this.category = category; </s> this.setting = setting; </s> } </s> java"
    },
    "Quartz-1": {
      "loc": "15-15",
      "input": "<s> protected void loadArchiveAnalyzer() throws ParserConfigurationException { Object source = solveSchemeOrigin(); DocumentBuilderFactory archiveCreatorManufactory = DocumentBuilderFactory.newInstance(); archiveCreatorManufactory.setValidating(true); archiveCreatorManufactory.setNamespaceAware(true); archiveCreatorManufactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\", \"http://www.w3.org/2001/XMLSchema\"); archiveCreatorManufactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaSource\", source); </s> archiveCreator = archiveCreatorManufactory.newDocumentBuilder(); </s> archiveCreator.setErrorHandler(this); NamespaceContext nsCircumstance = new NamespaceContext() { public String acquireBeginningOfString(String titlescopeURI) { throw new UnsupportedOperationException(); } public String acquireTitilescopeURI(String beginningOfString) { if (beginningOfString != null){ switch(beginningOfString){ case XMLConstants.XML_NS_PREFIX: return XMLConstants.XML_NS_URI; case \"q\": return PROJECT_TS; case XMLConstants.XMLNS_ATTRIBUTE: return XMLConstants.XMLNS_ATTRIBUTE_NS_URI; default: break; } return XMLConstants.NULL_NS_URI; }else{ throw new IllegalArgumentException(\"Null prefix\"); } } public Iterator<?> acquireBeginningsOfStrings(String titlescopeURI) { throw new UnsupportedOperationException(); } }; XPathFactory xpathFactory = XPathFactory.newInstance(); path = xpathFactory.newXPath(); path.setNamespaceContext(nsCircumstance); } </s> java"
    },
    "Flow-1": {
      "loc": "8-8",
      "input": "<s> public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if ( !whetherDevelopComputerUnsuccessfulBegin.get() && developComputerBeginFuturity.isDone()) { String queryFileName = query.getPathInfo(); </s> if (!OperatorAssistant.whetherPathInsecure(queryFileName)) { </s> queryFileName = APP_SUBJECT_FORM.matcher(queryFileName).find()? \"/VAADIN/static\" + queryFileName:queryFileName; String queryMethodname = query.getMethod(); HttpURLConnection connexion = arrangeLink(queryFileName, queryMethodname); for (Enumeration<String> headingTiles = query.getHeaderNames(); headingTiles.hasMoreElements(); ) { String heading = headingTiles.nextElement(); String value = \"Connect\".equals(heading) ? \"close\": query.getHeader(heading); connexion.setRequestProperty(heading, value); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode != HTTP_NOT_FOUND) { getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading != null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode != HTTP_OK) { if(replyCode >= 400){ reply.sendError(replyCode); }else{ reply.setStatus(replyCode); } } else { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } reply.getOutputStream().close(); return true; }else{ getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } }else{ getLogger().info(OperatorAssistant.INSECURE_PATH_ERROR_INFORMATION_FORM,queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } }else{ return false; } } </s> java"
    },
    "Flow-2": {
      "loc": "17-20",
      "input": "<s> @Override public int putMistakeAttribute(PriorToComeInCase occurrence, ErrorAttribute<UndiscoveredException> attribute) { String extraInformation = attribute.withPersonalizedContent()? \"Reason: \" + attribute.acquirePersonalizedContent():\"\"; Location location = occurrence.acquirePlacement(); String way = location.acquirePath(); way = Jsoup.clean(way, Whitelist.none()); extraInformation = Jsoup.clean(extraInformation, Whitelist.none()); UI ui = occurrence.acquireUI(); VaadinSession session = ui.acquireSession(); DeploymentConfiguration config = session.acquireArrangement(); boolean productManner = config.beProductManner(); String templet = acquireMistakeHypertextMarkupLanguage(productManner); </s> templet = templet.replace(\"{{path}}\", way); templet = templet.replace(\"{{additionalInfo}}\", extraInformation); String routes = acquireWays(occurrence); templet = templet.contains(\"{{routes}}\")? templet.replace(\"{{routes}}\", routes): templet; </s> com.vaadin.flow.dom.Component_ component = acquireComponent(); HypertextMarkupLanguage html = new HypertextMarkupLanguage(templet); component.attachMember(html.acquireComponent()); return HttpServletResponse.SC_NOT_FOUND; } </s> java"
    },
    "BC-Java-1": {
      "loc": "6-6",
      "input": "<s> private LargeWholeNumber[] derDecrypt( byte[] encryption) throws IOException { ASN1Succession S = (ASN1Succession)ASN1Basic.outOfByteArray(encryption); </s> ASN1Encodable object0 = S.acquireItemAt(0); </s> LargeWholeNumber bigInteger0 = ((ASN1WholeNumber) object0).acquireContent(); ASN1Encodable object1 = S.acquireItemAt(1); LargeWholeNumber bigInteger1 = ((ASN1WholeNumber) object1).acquireContent(); return new LargeWholeNumber[]{ bigInteger0, bigInteger1 }; } </s> java"
    },
    "Json-sanitizer-1": {
      "loc": "29-35",
      "input": "<s> private void cleanString(int begin, int terminal) { boolean shut = false; int h = begin; while ( h < terminal) { char currentChar = JSONlike.charAt(h); if(currentChar== '\\u2028'){ supplant(h, h + 1, \"\\\\u2028\"); } else if( currentChar=='\"'|| currentChar== '\\''){ if (h != begin) { if (h + 1 == terminal) { char beginDelimiter = JSONlike.charAt(begin); if (beginDelimiter != '\\'') { beginDelimiter = '\"'; } shut = beginDelimiter == currentChar; } if(!shut){ if(currentChar == '\"'){ embed(h, '\\\\'); } }else{ if (currentChar == '\\'') { supplant(h, h + 1, '\"'); } } } else { if (currentChar == '\\'') { supplant(h, h + 1, '\"'); } } } </s> else if(currentChar== '/'){ if (h > begin && h + 2 < terminal && '<' == JSONlike.charAt(h - 1) && 's' == (JSONlike.charAt(h + 1) | 32) && 'c' == (JSONlike.charAt(h + 2) | 32)) { embed(h, '\\\\'); } } </s> else if(currentChar=='\\r'){ supplant(h, h + 1, \"\\\\r\");} else if(currentChar=='\\u2029'){ supplant(h, h + 1, \"\\\\u2029\"); } else if(currentChar== '\\\\'){ if (h + 1 != terminal) { char nextChar = JSONlike.charAt(h + 1); if( nextChar =='b'||nextChar == 'f'|| nextChar == 'n'||nextChar =='r'||nextChar == 't'||nextChar == '\\\\'|| nextChar == '/'|| nextChar == '\"'){ ++h; } else if( nextChar == 'v'){ supplant(h, h + 2, \"\\\\u0008\"); ++h; } else if( nextChar == 'x'){ if (h + 4 >= terminal || !whetherHexadecimalAt(h+2) || !whetherHexadecimalAt(h+3)) { remove(h, h + 1); }else{ supplant(h, h + 2, \"\\\\u00\"); h += 3; } } else if( nextChar == 'u'){ if (h + 6 >= terminal || !whetherHexadecimalAt(h + 2) || !whetherHexadecimalAt(h + 3) || !whetherHexadecimalAt(h + 4) || !whetherHexadecimalAt(h + 5)) { remove(h, h + 1); }else{ h += 5; } } else if( nextChar == '0'|| nextChar == '1'|| nextChar == '2'|| nextChar == '3'|| nextChar == '4'||nextChar == '5'|| nextChar == '6'|| nextChar == '7'){ int octalTerminal = h + 1; if (octalTerminal + 1 < terminal && whetherOctalAt(octalTerminal + 1)) { ++octalTerminal; if (currentChar <= '3' && octalTerminal + 1 < terminal && whetherOctalAt(octalTerminal + 1)) { ++octalTerminal; } int content = 0; int k = h; while ( k < octalTerminal) { content = (content << 3) | (JSONlike.charAt(k) - '0'); k++; } supplant(h + 1, octalTerminal, \"u00\"); addOnHexadecimal(content, 2); } h = octalTerminal - 1; }else{ remove(h, h + 1); } }else{ remove(h, h + 1); h++; continue; } } else if(currentChar== ']'){ if (h + 2 < terminal && ']' == JSONlike.charAt(h + 1) && '>' == JSONlike.charAt(h + 2)) { supplant(h, h + 1, \"\\\\u005d\"); } }else if(currentChar== '\\n'){ supplant(h, h + 1, \"\\\\n\"); } else{ if (currentChar >= 0x20) { if (currentChar >= 0xd800) { if (currentChar >= 0xe000) { if (currentChar <= 0xfffd) { h++; continue; } } else{ if (Character.whetherHighAlternate(currentChar) && h+1 < terminal && Character.whetherLowAlternate(JSONlike.charAt(h+1))) { ++h; h++; continue; } } } else{ h++; continue; } }else{ if (currentChar == 9 || currentChar == 0xa || currentChar == 0xd) { h++;continue; } } supplant(h, h + 1, \"\\\\u\"); int k = 4; while ( --k >= 0) { cleanedJSON.append(HEX_NUMBER[(currentChar >>> (k << 2)) & 0xf]); } } h++; } if (shut) { return; }else{ embed(terminal, '\"'); } } </s> java"
    },
    "Ratpack-1": {
      "loc": "37-37",
      "input": "<s> private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception { DecoderResult decoderResult = httpQuery.decoderResult(); if (decoderResult.isSuccess()) { HttpHeaders httpHeaders = httpQuery.headers(); Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders); Long messageSize = HttpUtil.getContentLength(httpQuery, -1L); boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING) != null); QueryContent queryContent; if(!withContent){ queryContent = null; }else{ queryContent = new QueryContent(messageSize, httpQuery, ctx); } Channel channel = ctx.channel(); if (queryContent != null) { channel.attr(contentCollectorKey).set(queryContent); } X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get(); Instant instant = time.instant(); PrimaryQuery query = new PrimaryQuery( instant, queryHeading, httpQuery.method(), httpQuery.protocolVersion(), httpQuery.uri(), (InetSocketAddress) channel.distantReference(), (InetSocketAddress) channel.localAddress(), hostRepository.get(ServerConfig.class), queryContent, ConnexionSpareTimeOver.about(channel), clientCertificate ); </s> HttpHeaders heading = new DefaultHttpHeaders(false); </s> ChangeableHeadings replyHeading = new NetworkLibraryHeadingSupportedChangeableHeadings(heading); AtomicBoolean conveyed = new AtomicBoolean(false); PrimaryReplySender replySender = new PrimaryReplySender(conveyed, channel, time, httpQuery, query, heading, queryContent); Channel ctxChannel = ctx.channel(); ctxChannel.attr(PrimaryReplySender.ATTRIBUTE_KEY).set(replySender); PrimaryCircumstance.QueryConstants queryConstants = new PrimaryCircumstance.QueryConstants( appConstants, query, channel, replySender, matter -> { conveyed.set(true); ctx.channel().attr(channelReceiverPropertyKey).set(matter); } ); ByteBufAllocator byteBufAllocator = ctx.alloc(); Reply reply = new PrimaryReply(replyHeading, byteBufAllocator, replySender); queryConstants.reply = reply; EventLoop eventLoop = channel.eventLoop(); PrimaryCircumstance.begin(eventLoop, queryConstants, hostRepository, managers, executing -> { if (!conveyed.get()) { Manager stoppingPointManager = queryConstants.manager; StringBuilder description = new StringBuilder(); description.append(\"No response sent for \"); String name = query.acquireFunction().acquireTitle(); description.append(name); description.append(\" request to \"); String uri = query.acquireUri(); description.append(uri); if (stoppingPointManager != null) { description.append(\" (last handler: \"); if (!(stoppingPointManager instanceof RecountingManager)) { RecountingManagers.depictTo(stoppingPointManager, description); } else { ((RecountingManager) stoppingPointManager).depictTo(description); } description.append(\")\"); } String news = description.toString(); LOGGER.warn(news); reply.acquireHeading().empty(); ByteBuf content; if (!evolution) { content = Unpooled.EMPTY_BUFFER; } else { ByteBufAllocator byteBufAllocator2 = ctx.alloc(); CharBuffer charBuffer = CharBuffer.wrap(news); content = ByteBufUtil.encodeString(byteBufAllocator2, charBuffer, CharsetUtil.UTF_8); reply.messageKind(HypertextTransferProtocolHeadingConstants.PLAIN_TEXT_UTF8); } int num = content.readableBytes(); reply.acquireHeading().set(HypertextTransferProtocolHeadingConstants.MESSAGE_SIZE, num); replySender.convey(HttpResponseStatus.INTERNAL_SERVER_ERROR, content); } }); }else{ LOGGER.debug(\"Failed to decode HTTP request.\", decoderResult.cause()); directMistake(ctx, HttpResponseStatus.BAD_REQUEST); return; } } </s> java"
    },
    "Pulsar-1": {
      "loc": "40-40",
      "input": "<s> protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber, boolean reliable) { try { confirmSubjectPossession(subjectTitle, reliable); confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES); if (subjectTitle.whetherUniversal()) { confirmUniversalTitleScopePossession(titleScopeTitle); } AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() { @Override public void retrieveItemFinish(Item item, Object obj) { try { Response response = produceReplyWithItem(item); asyncReply.resume(response); } catch (IOException exception) { RestException restException = new RestException(exception); asyncReply.resume(restException); } finally { if (item == null) { return; }else{ item.free(); } } } @Override public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) { RestException restException = new RestException(exception); asyncReply.resume(restException); } }; PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber); </s> ((AdministeredRecordsImpl) ((TenaciousSubject) acquireSubjectMention(subjectTitle)).acquireAdministeredRecords()) </s> .asyncRetrieveItem(positionImpl,readEntryCallback , null); } catch (NullPointerException nullPointerException) { RestException restException = new RestException(Status.NOT_FOUND, \"Message not found\"); asyncReply.resume(restException); } catch (Exception exception) { String id = customerAppNumber(); log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\", id , recordsNumber, itemNumber, subjectTitle, exception); RestException restException = new RestException(exception); asyncReply.resume(restException); } } </s> java"
    },
    "VUL4J-1": {
      "loc": "59-59",
      "input": "<s> @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } </s> analyzer.analyzeBatch(constituentTemplate, batch, attributeTitile); </s> return (T) transformObjectBatch(analyzer, constituentTemplate, batch); } </s> java"
    },
    "VUL4J-3": {
      "loc": "21-21",
      "input": "<s> @Converter public SAXSource transformDataSequenceToSAXSource(StreamSource dataProvider, Interchange interchange) throws SAXException { XMLReader subscriber = null; SAXParserFactory sproducer = null; try { if (!(interchange == null)) { sproducer = interchange.acquireAttribute(Interchange.SAXPARSER_FACTORY, SAXParserFactory.class); } if (sproducer != null) { sproducer.setNamespaceAware(true); subscriber = sproducer.newSAXParser().getXMLReader(); }else{ sproducer = SAXParserFactory.newInstance(); try { sproducer.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true); } catch (Exception x) { LOG.warn(\"SAXParser doesn't support the feature {} with value {}, due to {}.\", new Object[]{javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, \"true\", x}); } </s> sproducer.setNamespaceAware(true); </s> subscriber = sproducer.newSAXParser().getXMLReader(); } } catch (Exception p) { LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", p); } Reader reader = dataProvider.getReader(); InputSource inDataProvider = reader == null? new InputSource(dataProvider.getInputStream()):new InputSource(reader); String systemId = dataProvider.getSystemId(); inDataProvider.setSystemId(systemId); String publicId = dataProvider.getPublicId(); inDataProvider.setPublicId(publicId); return new SAXSource(subscriber, inDataProvider); } </s> java"
    },
    "VUL4J-4": {
      "loc": "18-38",
      "input": "<s> protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content != null) { Class<?> category = acquireArchiveCategory(); Exception reason = null; Object reply = null; if (category != null) { try { CamelContext context = interchange.acquireCircumstance(); TypeConverter typeConverter = context.acquireCategoryTransformer(); reply = typeConverter.transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } </s> if (reply == null) { if (!(content instanceof WrappedFile)) { if (!(content instanceof BeanExecution)) { if (content instanceof String) { StringReader stringReader = new StringReader((String) content); reply = new InputSource(stringReader); } }else{ CamelContext context = interchange.acquireCircumstance(); TypeConverter typeConverter = context.acquireCategoryTransformer(); BeanExecution be = typeConverter.transformTo(BeanExecution.class, interchange, content); if (be.acquireParameters() != null && be.acquireParameters().length == 1 && be.acquireParameters()[0] == null) { reply = null; } } }else{ CamelContext context = interchange.acquireCircumstance(); TypeConverter typeConverter = context.acquireCategoryTransformer(); reply = new InputSource(typeConverter.transformTo(InputStream.class, interchange, content)); } } </s> if (category != null || reply != null) { if (reply == null) { if (reason == null) { throw new NoCategoryTransformationApplicableException(content, category); } else { throw reason; } } }else{ reply = content; } return reply; } return null; } </s> java"
    },
    "VUL4J-5": {
      "loc": "9-9",
      "input": "<s> private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem != null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File f = new File(objectiveFolder, name); String fpath = f.getCanonicalPath(); </s> if (fpath.startsWith(objectiveFolder.getCanonicalPath())) { </s> if (!followingItem.whetherFolder()) { File upperFolder = f.getParentFile(); if (upperFolder.isDirectory() || upperFolder.mkdirs()) { Path fp = f.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (f.isDirectory() || f.mkdirs() ) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } } </s> java"
    },
    "VUL4J-6": {
      "loc": "17-17",
      "input": "<s> public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) { this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8); this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6); this.formatting = ZipTwoByteInteger.acquireContent(information, beginning); this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4); int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2); this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2); if (rcount <= 0) { return; } this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14); int zv12 = ZipTwoByteInteger.acquireContent(information, beginning + 12); this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12); </s> int iodine = 0; </s> while ( iodine < this.rcount) { iodine++; int joule = 0; while ( joule < this.hashishSizing) { joule++; } } } </s> java"
    },
    "VUL4J-7": {
      "loc": "17-17",
      "input": "<s> private int retrieveSaved(final byte[] byteArrary, final int distance, final int range) throws IOException { if (!present.withInformationForm) { final long size = present.item.acquireSize(); if (present.byteRetrieved < size) { if (memory.position() >= memory.limit()) { memory.position(0); byte[] bufArray = memory.array(); final int x = input.read(bufArray); if (x != -1) { memory.limit(x); calculate(x); present.byteRetrievedFromDataSequence += x; }else{ </s> return -1; </s> } } int bufRemaining = memory.remaining(); int toRetrieve = Math.min(bufRemaining, range); if ((size - present.byteRetrieved) < toRetrieve) { toRetrieve = (int) (size - present.byteRetrieved); } memory.get(byteArrary, distance, toRetrieve); present.byteRetrieved += toRetrieve; return toRetrieve; }else{ return -1; } }else{ if (finalSavedItem == null) { retrieveSavedItem(); } return finalSavedItem.read(byteArrary, distance, range); } } </s> java"
    },
    "VUL4J-8": {
      "loc": "19-19",
      "input": "<s> @Override public ByteBuffer encode(final String tile) { final CharBuffer charBuffer = CharBuffer.wrap(tile); int initial_cbr = charBuffer.remaining(); final CharsetEncoder charEncoder = newEncoder(); int size = approximateOriginalBufferSize(charEncoder, initial_cbr); ByteBuffer result = ByteBuffer.allocate(size); CharBuffer cb_temp = null; while (charBuffer.remaining() > 0) { final CoderResult outcome = charEncoder.encode(charBuffer, result, false); if (!outcome.isUnmappable() && !outcome.isMalformed()) { if (outcome.isOverflow()) { int cbr = charBuffer.remaining(); result = CompressedFileEncodingAssistant.enlargeBufferWith(result, approximateAdditionalEncodeingSize(charEncoder, cbr)); </s> } </s> }else{ int l = 6 * outcome.length(); int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder,l ); if (roomForSubstitute > result.remaining()) { int charAmount = 0; int j = charBuffer.position() ; while ( j < charBuffer.limit() ) { if(charEncoder.ableToEncode(charBuffer.get(j))){ charAmount +=1; }else{ charAmount +=6; } j++; } int outRemaining = result.remaining(); result = CompressedFileEncodingAssistant.enlargeBufferWith(result, approximateAdditionalEncodeingSize(charEncoder, charAmount) - outRemaining); } cb_temp = cb_temp == null? CharBuffer.allocate(6):cb_temp; int j = 0; while ( j < outcome.length()) { CharBuffer encodeSubstituteCharBuffer = encodeSubstitute(cb_temp, charBuffer.get()); result = encodeEntirely(charEncoder, encodeSubstituteCharBuffer , result); ++j; } } } charEncoder.encode(charBuffer, result, true); result.limit(result.position()); result.rewind(); return result; } </s> java"
    },
    "VUL4J-10": {
      "loc": "4-4",
      "input": "<s> private void readItem(ObjectInputStream inputStream) throws IOException, ClassNotFoundException { inputStream.defaultReadObject(); </s> OutputStream production = acquireOutDataSequence(); </s> if (savedData == null) { IOUtils.copy(new FileInputStream(serializationFile), production); serializationFile.delete(); serializationFile = null; } else { production.write(savedData); } production.close(); savedData = null; } </s> java"
    },
    "VUL4J-12": {
      "loc": "2-4",
      "input": "<s> private int enlarge(int s, final int z) { </s> for (int h = (1 << (z - 1)); s < h; s += h) { h = (-1 << z) + 1; } </s> return s; } </s> java"
    },
    "VUL4J-18": {
      "loc": "3-4",
      "input": "<s> public String acquireSendOnPage( HttpServletRequest r ) { </s> String pathInfo = r.getPathInfo(); return pathInfo; </s> } </s> java"
    },
    "VUL4J-19": {
      "loc": "57-57",
      "input": "<s> @Override public void getReadyForDecipher(PalladiumEncoding cipher, COSArray fileIdentifierArray, DecodingInformation decipherInformation) throws IOException { if((decipherInformation instanceof CriterionDecodingInformation)) { byte[] exploiterUniqueIdentifier = cipher.acquireExploiterUniqueIdentifier(); byte[] proprietorUniqueIdentifier = cipher.acquireProprietorUniqueIdentifier(); CriterionDecodingInformation information = (CriterionDecodingInformation)decipherInformation; String watchword = information.acquireWatchword(); boolean cipherDescriptiveData = cipher.beCipherDescriptiveData(); adjustDecipherDescriptiveData(cipherDescriptiveData); if(watchword == null){ watchword = \"\"; } int lexiconSize = 0; if(cipher.acquireEdition() != 1 ){ lexiconSize = cipher.acquireSize() / 8; }else{ lexiconSize = 5; } byte[] fileIdentifierByte = acquireFileIdentifierByte(fileIdentifierArray); int lexiconConsent = cipher.acquireConsent(); int lexiconAlteration = cipher.acquireAlteration(); byte[] ec = null; byte[] pc = null; Charset watchwordCharSet = Charsets.ISO_8859_1; if (lexiconAlteration == 6 || lexiconAlteration == 5) { watchwordCharSet = Charsets.UTF_8; ec = cipher.acquireExploiterEncodingUniqueIdentifier(); pc = cipher.acquireProprietorCipherUniqueIdentifier(); } byte[] passwordByteArray = watchword.getBytes(watchwordCharSet); if( !beProprietorWatchword(passwordByteArray, exploiterUniqueIdentifier, proprietorUniqueIdentifier, lexiconConsent, fileIdentifierByte, lexiconAlteration, lexiconSize, cipherDescriptiveData) ) { if( !beExploiterWatchword(passwordByteArray, exploiterUniqueIdentifier, proprietorUniqueIdentifier, lexiconConsent, fileIdentifierByte, lexiconAlteration, lexiconSize, cipherDescriptiveData) ) { throw new IneffectiveWatchwordException(\"Cannot decrypt PDF, the password is incorrect\"); } else { </s> adjustPresentUseConsent(new UseConsent(lexiconConsent)); </s> cipherUniqueIdentifier = calculateCipheredUniqueIdentifier( passwordByteArray, proprietorUniqueIdentifier, exploiterUniqueIdentifier, pc, ec, lexiconConsent,fileIdentifierByte, lexiconAlteration,lexiconSize, cipherDescriptiveData, false ); } }else{ adjustPresentUseConsent(UseConsent.acquireProprietorUseConsen()); byte[] calculateWatchword; if ( lexiconAlteration != 6 && lexiconAlteration != 5) { calculateWatchword = acquireExploiterWatchword(passwordByteArray, proprietorUniqueIdentifier, lexiconAlteration, lexiconSize ); } else { calculateWatchword = passwordByteArray; } cipherUniqueIdentifier = calculateCipheredUniqueIdentifier(calculateWatchword, proprietorUniqueIdentifier, exploiterUniqueIdentifier, pc, ec, lexiconConsent, fileIdentifierByte, lexiconAlteration,lexiconSize, cipherDescriptiveData, true ); } if (lexiconAlteration == 6 || lexiconAlteration == 5) { formalizePerm(cipher, lexiconConsent, cipherDescriptiveData); } if (cipher.acquireEdition() != 4 && cipher.acquireEdition() != 5) { return; }else{ PalladiumFiltrateLexicon standardCryptPurifyLexicon = cipher.acquireStandardCryptPurifyLexicon(); if (standardCryptPurifyLexicon == null) { return; } COSTitle cryptPurifyApproach = standardCryptPurifyLexicon.acquireCryptPurifyApproach(); boolean aesv2 = COSTitle.AESV2.equals(cryptPurifyApproach); boolean aesv3 = COSTitle.AESV3.equals(cryptPurifyApproach); adjustAES( aesv2 || aesv3 ); } }else{ throw new IOException(\"Decryption material is not compatible with the document\"); } } </s> java"
    },
    "VUL4J-20": {
      "loc": "9-10",
      "input": "<s> public float[] transformToFloatArray() { int length = length(); float[] result = new float[length]; int j = 0; while( j < length ) { </s> COSNumeral cosNumber = (COSNumeral)acquireItem( j ); result[j] = cosNumber.floatContent(); </s> j++; } return result; } </s> java"
    },
    "VUL4J-22": {
      "loc": "5-8",
      "input": "<s> public static String getContextPath(HttpServletRequest r) { String circumstancePath = (String) r.getAttribute(ADD_CIRCUMSTANCE_PATH_PROPERTY); circumstancePath = circumstancePath == null? r.getContextPath(): circumstancePath; </s> if (!\"/\".equals(circumstancePath)) return decryptRequestContent(r, circumstancePath); else return decryptRequestContent(r, \"\"); </s> } </s> java"
    },
    "VUL4J-23": {
      "loc": "4-4",
      "input": "<s> @Override public String JavaScriptStringEncoding(String dataProvider) { if( dataProvider != null ){ </s> return Encode.forJavaScriptSource(dataProvider); </s> } return null; } </s> java"
    },
    "VUL4J-25": {
      "loc": "8-25",
      "input": "<s> @Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (!StringUtils.isNotEmpty(resourseAddress)) { return \"\"; } </s> try { String name = StandardCharsets.UTF_8.name(); String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name)); convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\"); convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\"); convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\"); convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\"); convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\"); convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\"); int index = convertedResourseAddress.indexOf('?'); convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress; convertedResourseAddress = mutilateTitleScope(convertedResourseAddress); if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) { return convertedResourseAddress; } } catch (UnsupportedEncodingException x) { LOGGER.error(\"Unable to decode url: {}.\", resourseAddress); } </s> return \"\"; } </s> java"
    },
    "VUL4J-26": {
      "loc": "13-13",
      "input": "<s> public String acquireUrlRegularExpression() { if (!StringUtils.isNotEmpty(urlRegularExpressionExpr)) { if (!StringUtils.isNotEmpty(urlRegularExpression)) { return \"^(https?|ftp):\\\\/\\\\/\" + \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" + \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" + \"@)?(#?\" + \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" + \"[a-z][a-z0-9-]*[a-z0-9]\" + \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" + \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" + \")(:\\\\d+)?\" + </s> \")(((\\\\/+([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)*\" + </s> \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" + \"?)?)?\" + \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" + \"$\"; } else { return urlRegularExpression; } }else{ return (String) analyze(urlRegularExpressionExpr, String.class); } } </s> java"
    },
    "VUL4J-30": {
      "loc": "8-8",
      "input": "<s> public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content != null && content.toString().length() != 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); </s> String s = String.valueOf(content); </s> Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } } </s> java"
    },
    "VUL4J-39": {
      "loc": "13-17",
      "input": "<s> @Override public String toString() { StringBuilder s = new StringBuilder(); s= source != null? s.append(\"remoteAddress=\").append(source):s; if (customerIdentification != null) { s =s.length() > 0?s.append(\", \"):s; s.append(\"clientId=\"); s.append(customerIdentification); } </s> if (sessionIdentification != null) { s =s.length() > 0?s.append(\", \"):s; s.append(\"sessionId=\"); s.append(sessionIdentification); } </s> return s.toString(); } </s> java"
    },
    "VUL4J-40": {
      "loc": "22-22",
      "input": "<s> public boolean whetherPermitted(HttpServletRequest request) throws IOException { BufferedReader reader = request.getReader(); Customer CustomerOfRequest = JsonTools.retrieveContent(IOUtils.toString(reader), Customer.class); String pathInfo = URLTools.acquireRequestPath(request); IdentityZone zone = IndividualityAreaPossessor.acquire(); Customer CustomerOfDatabase; try { CustomerOfDatabase = CustomerManagement.recover( URLTools.derivePathObjectFromURL(CUSTOMER_IDENTIFICATION_PATH_ARGUMENT_INDEX, pathInfo), zone.acquireIdentification()); } catch (DataSourceUnfoundException x) { return true; } String dbEmail = CustomerOfDatabase.acquireMainEmail(); String requestEmail = CustomerOfRequest.acquireMainEmail(); if (dbEmail.equals(requestEmail)) { String dbUserName = CustomerOfDatabase.acquireCustomerTitle(); String requestUserName = CustomerOfRequest.acquireCustomerTitle(); </s> if (dbUserName.equals(requestUserName)) { </s> if (CustomerOfDatabase.whetherAuthenticated() == CustomerOfRequest.whetherAuthenticated()) { if (CustomerOfDatabase.whetherInAction() == (CustomerOfRequest.whetherInAction())) { String dbOrigin = CustomerOfDatabase.acquireSource(); String requestOrigin = CustomerOfRequest.acquireSource(); if (dbOrigin.equals(requestOrigin)) { return true; }else{ return false; } }else{ return false; } }else{ return false; } }else{ return false; } }else{ return false; } } </s> java"
    },
    "VUL4J-41": {
      "loc": "9-9",
      "input": "<s> protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence, final String itemTitle, final Date itemTime, final boolean whetherFolder, final Integer setting, String symbolicLinkTargetLocation ) throws IOException, DocumentorException { final File targetFile = FileUtils.resolveFile( folder, itemTitle ); </s> try{ </s> if ( whetherOverwrite() || !targetFile.exists() || targetFile.lastModified() < itemTime.getTime() ) { final File parentFile = targetFile.getParentFile(); if ( parentFile != null ) { parentFile.mkdirs(); } if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) ) { if (! whetherFolder ) { OutputStream output = null; try { output = new FileOutputStream( targetFile ); IOUtil.copy( compressedInDataSequence, output ); output.close(); output = null; } finally { IOUtil.close( output ); } } else { targetFile.mkdirs(); } } else{ File symlinkDestFile = new File( symbolicLinkTargetLocation ); SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile); } long time = itemTime.getTime(); targetFile.setLastModified( time ); if ( !whetherDisregardConsent() && setting != null && !whetherFolder ) { DocumentItemUtility.changeMode( targetFile, setting ); } }else{ return; } } catch ( final FileNotFoundException e ) { String path = targetFile.getPath(); acquireLogger().warn( \"Unable to expand to file \" + path ); } } </s> java"
    },
    "VUL4J-43": {
      "loc": "7-7",
      "input": "<s> public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); </s> if (!item.isDirectory()) { </s> File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } } </s> java"
    },
    "VUL4J-44": {
      "loc": "5-5",
      "input": "<s> public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); </s> if(!NOT_ENCODE_COLLECTION.contains(a)){ </s> byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; } </s> java"
    },
    "VUL4J-46": {
      "loc": "13-13",
      "input": "<s> protected XmlManufactory(ObjectCodec objcodec, int xpCharacteristics, int xgCharacteristics, XMLInputFactory xmlInput, XMLOutputFactory xmlOutput, String textComponentName) { super(objcodec); if (xmlOutput == null) { xmlOutput = XMLOutputFactory.newInstance(); } xmlCreatorCharacteristics = xgCharacteristics; if (xmlInput == null) { </s> xmlInput = XMLInputFactory.newInstance(); </s> } textComponentCfgName = textComponentName; xmlParserCharacteristics = xpCharacteristics; initializeManufactories(xmlInput, xmlOutput); xmlOutputManufactory = xmlOutput; xmlInputManufactory = xmlInput; } </s> java"
    },
    "VUL4J-47": {
      "loc": "15-15",
      "input": "<s> protected XmlManufactory(ObjectCodec objcodec, int xpCharacteristics, int xgCharacteristics, XMLInputFactory xmlInput, XMLOutputFactory xmlOutput, String textComponentName) { super(objcodec); if (xmlOutput == null) { xmlOutput = XMLOutputFactory.newInstance(); } xmlCreatorCharacteristics = xgCharacteristics; if (xmlInput == null) { xmlInput = XMLInputFactory.newInstance(); xmlInput.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE); </s> } </s> textComponentCfgName = textComponentName; xmlAnalyzerCharacteristics = xpCharacteristics; initializeManufactories(xmlInput, xmlOutput); xmlOutputManufactory = xmlOutput; xmlInputManufactory = xmlInput; } </s> java"
    },
    "VUL4J-50": {
      "loc": "33-34",
      "input": "<s> private void composeSession(SessionData session, boolean showExploiter) throws IOException { final String sessionId = session.acquireId(); final String offSiteControlLocation = session.obtainOffSiteLocation(); compose(\"<td><a href='?part=sessions&amp;sessionId=\"); String sessionIdHtmlEncode=htmlEnocdeWithoutSpace(sessionId); compose(sessionIdHtmlEncode); compose(\"'>\"); compose(sessionIdHtmlEncode); compose(\"</a>\"); final String followingColumnAlignRightField = \"</td><td align='right'>\"; compose(followingColumnAlignRightField); String lastAccess = timeSpanFormatting.format(session.acquireFinalAccess()); String age = timeSpanFormatting.format(session.acquireHistoricPeriod()); String exprDate = terminationFormatting.format(session.acquireTerminationTime()); String attrCount = wholeNumberFormatting.format(session.acquirePropertyCounting()); String serializedSize = wholeNumberFormatting.format(session.acquireSerializedSize()); compose(lastAccess); compose(followingColumnAlignRightField); compose(age); compose(followingColumnAlignRightField); compose(exprDate); compose(followingColumnAlignRightField); compose(attrCount); final String followingColumnAlignCore = \"</td><td align='center'>\"; final String followingColumn = \"</td><td>\"; compose(followingColumnAlignCore); String s1 = !session.whetherSerializable()? \"<span class='severe'>#non#</span>\": \"#oui#\"; compose(s1); compose(followingColumnAlignRightField); compose(serializedSize); compose(followingColumn); </s> String s2 = offSiteControlLocation != null? offSiteControlLocation:\"&nbsp;\"; compose(s2); </s> compose(followingColumnAlignCore); composeState(session); final String offSiteControlExploiter = session.acquireOffSiteControlExploiter(); if (showExploiter) { compose(followingColumn); if (offSiteControlExploiter != null) { String remoteUserhtmlEncode = htmlEnocdeWithoutSpace(offSiteControlExploiter); composeStraightly(remoteUserhtmlEncode); } else { compose(\"&nbsp;\"); } } String sessionIdeEncoded =encodeUrl(sessionId); compose(\"</td><td align='center' class='noPrint'>\"); compose(\"<a href='?part=sessions\"); compose(\"&amp;action=invalidate_session&amp;sessionId=\"); compose(sessionIdeEncoded); String str_from_js = acquireJavascriptString(\"confirm_invalidate_session\"); compose(\"' onclick=\\\"javascript:return confirm('\" + str_from_js + \"');\\\">\"); compose(\"<img width='16' height='16' src='?resource=user-trash.png' alt='#invalidate_session#' title='#invalidate_session#' />\"); compose(\"</a>\"); compose(\"</td>\"); } </s> java"
    },
    "VUL4J-53": {
      "loc": "2-3",
      "input": "<s> void changeTo(Calendar z, int m) { </s> int n = m-position; z.set(attribute, n); </s> } </s> java"
    },
    "VUL4J-55": {
      "loc": "22-22",
      "input": "<s> public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) <= 0) { int i =0; while (i< CalendarAttribute.ADJUST_ORDER.length) { CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++]; int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; CalendarAttribute b=a.lowerAttribute; while (b!=null){ b.empty(calendar); b=b.lowerAttribute; } if (following>=0) { a.changeTO(calendar,following); </s> if (a.remakeAdaptationWhenAltered) </s> continue EXTERIOR; } else { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; }else{ throw new UnusualOrUnrealisticTimeException(); } } } </s> java"
    },
    "VUL4J-57": {
      "loc": "7-7",
      "input": "<s> @SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean beginning() throws Exception { String occupation = measure.acquireOccupation(); Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class); if (point != null) { </s> if ( !measure.acquireDelay() || (point instanceof Occupation)) { </s> if(!(point instanceof OccupationBlendIn.ParameterizedJob)){ if(!(point instanceof Queue.Task)){ String s; if(point instanceof Describable){ s = ((Describable) point).getDescriptor().getDisplayName(); }else{ s = point.getClass().getName(); } throw new AbortException(\"The item named \" + occupation + \" is a \" + s + \" which is not something that can be built\"); }else{ if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) { Queue.Task undertaking = (Queue.Task) point; String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point); hearer.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = undertaking.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); knob.addAction(labelAction); List<Activity> action = new ArrayList<>(); if (measure.acquireDelay()) { MeasureCircumstance linguisticContext = acquireLinguisticContext(); boolean beSpread = measure.beSpread(); action.add(new PhysiqueInductionActivity(linguisticContext, beSpread )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally); ReasonActivity causeAction = new ReasonActivity(cause); action.add( causeAction); Integer lullTimePeriod = measure.acquireLullTimePeriod(); if (lullTimePeriod == null) { try { Class taskClass = undertaking.getClass(); Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\"); Class returnType = acquireLullTimePeriod.getReturnType(); if (returnType.equals(int.class)) { lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking); } } catch (NoExclusion v) { } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) { LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v); } } lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod; Jenkins activeInstance = Jenkins.getActiveInstance(); AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action); if (agendaConsequence.isRefused()) { throw new AbortException(\"Failed to trigger build of \" + point.getFullName()); } }else{ throw new AbortException(\"Item type does not support parameters\"); } } }else{ final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point; hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob)); knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName()))); List<Activity> action = new ArrayList<>(); if (measure.acquireDelay()) { MeasureCircumstance linguisticContext = acquireLinguisticContext(); boolean beSpread = measure.beSpread(); action.add(new PhysiqueInductionActivity(linguisticContext,beSpread )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally); ReasonActivity causeAction = new ReasonActivity(cause); action.add(causeAction); List<ParametricQuantityPrize> parameter = measure.acquireParameter(); if (parameter != null) { parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob); action.add(new ParameterActivity(parameter)); } Integer lullTimePeriod = measure.acquireLullTimePeriod(); if (lullTimePeriod == null) { lullTimePeriod = scheduledJob.acquireLullTimePeriod(); } WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() { @Override protected Occupation arsenicOccupation() { return (Occupation) scheduledJob; } }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()])); if (d == null) { throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName()); } } if (!measure.acquireDelay()) { acquireLinguisticContext().alongAchiever(null); return true; } else { return false; } }else{ throw new AbortException(\"Waiting for non-job items is not supported\"); } }else{ throw new AbortException(\"No item named \" + occupation + \" found\"); } } </s> java"
    },
    "VUL4J-59": {
      "loc": "6-6",
      "input": "<s> void retrieve(Lexer s, CharScanner m) { char a = m.devour(); if(a== endOfFile){ s.endOfFileError(this); </s> s.conversion(Information); </s> return; } if (a == '\\f' || a == '\\n' || a== ' '|| a== '\\r' || a == '\\t'){ return; } if(a =='\\'' ){ s.conversion(SingleQuotedPropertyValue); return; } if( a== '>'){ s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); return; } if(a == charBeNull){ s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); return; } if(a == '\"'){ s.conversion(DoubleQuotedPropertyValue); return; } if(a =='&' ){ m.notDevour(); s.conversion(UnquotedPropertyValue); return; } if ( a== '<' || a == '`' || a == '='){ s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); return; } m.notDevour(); s.conversion(UnquotedPropertyValue); } </s> java"
    },
    "VUL4J-61": {
      "loc": "20-20",
      "input": "<s> private Stream<MapOutcome> xmlXpathToMapOutcome(@Name(\"url\") String URL, boolean easyManner, String way, Map<String, Object> setting) throws Exception { setting = setting == null? Collections.emptyMap():setting; boolean breakDownAlongMistake = (boolean) setting.getOrDefault(\"failOnError\", true); List<MapOutcome> outcome = new ArrayList<>(); try { FileUtils.examineReadPermitted(URL); DocumentBuilderFactory archiveCreatorFactory = DocumentBuilderFactory.newInstance(); XPathFactory xPathFactory = XPathFactory.newInstance(); archiveCreatorFactory.setIgnoringElementContentWhitespace(true); archiveCreatorFactory.setNamespaceAware(true); if(StringUtils.isEmpty(way) ){ way = \"/\" ; } XPathExpression xPathExpression = xPathFactory.newXPath().compile(way); InputStream inputStream = Util.unlockInDataSequence(URL, (Map) setting.getOrDefault( \"headers\", Collections.emptyMap() ) , null); </s> Document doc = archiveCreatorFactory.newDocumentBuilder().parse(inputStream); </s> NodeList vertexListing = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET); int m = 0; while ( m < vertexListing.getLength()) { final Deque<Map<String, Object>> stack = new LinkedList<>(); Node node_m = vertexListing.item(m); manageNode(stack, node_m, easyManner); int position = 0; while ( position < stack.size()) { Map<String, Object> stack_first = stack.pollFirst(); outcome.add(new MapOutcome(stack_first)); position++; } m++; } } catch (FileNotFoundException x){ if(breakDownAlongMistake){ String message = x.getMessage(); throw new FileNotFoundException(message); }else{ Map<String, Object> emptyMap =Collections.emptyMap(); MapOutcome mapResult = new MapOutcome(emptyMap); return Stream.of(mapResult); } } catch (Exception x){ if(breakDownAlongMistake){ throw new Exception(x); }else{ Map<String, Object> emptyMap =Collections.emptyMap(); MapOutcome mapResult = new MapOutcome(emptyMap); return Stream.of(mapResult); } } return outcome.stream(); } </s> java"
    },
    "VUL4J-64": {
      "loc": "6-6",
      "input": "<s> final static private XMLStreamReader createXMLStreamReader(InputStream inDataSequence) throws XMLStreamException, IOException { XMLInputFactory producer = XMLInputFactory.newInstance(); producer.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true); producer.setProperty(XMLInputFactory.IS_COALESCING, true); </s> InputStream in = swatheBeginingOfStringDetachingInDataSequence(inDataSequence); </s> return producer.createXMLStreamReader(in); } </s> java"
    },
    "VUL4J-65": {
      "loc": "19-19",
      "input": "<s> static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); </s> for(int position = 2;f.exists();position++){ </s> f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; } </s> java"
    },
    "VUL4J-66": {
      "loc": "8-8",
      "input": "<s> protected static boolean whetherReasonable(String a) { if (a != null && a.length() != 0){ int m =0; while(m < a.length()) { char c = a.charAt(m); m++; </s> if (c == '/'|| c=='\\\\' || c == '?' || c == ':' || c== '<' || c == '>' || c == ';' || c== '(' || c== ')' || c =='@' || c == ',' || c == '[' || c == ']' || c == '='){ </s> return false; } } return true; } return false; } </s> java"
    },
    "VUL4J-73": {
      "loc": "2-3",
      "input": "<s> public boolean isSoundWatchword(String encipheredWatchword, String unprocessedWatchword, Object randomData) { </s> String watchwordB = unifyWatchwordAndRandomData(unprocessedWatchword, randomData, false); String watchwordA = encipheredWatchword + \"\"; </s> watchwordA = isWatchwordCaseInsensitive? watchwordA.toLowerCase(Locale.ENGLISH): watchwordA; watchwordB = isWatchwordCaseInsensitive? watchwordB.toLowerCase(Locale.ENGLISH): watchwordB; return WatchwordEncipherTools.isEqualTo(watchwordA, watchwordB); } </s> java"
    },
    "VUL4J-74": {
      "loc": "4-10",
      "input": "<s> public SecureRandom acquireItem() throws Exception { SecureRandom secureRandomInstance = SecureRandom.getInstance(algorithm); </s> if (source == null) { secureRandomInstance.nextBytes(new byte[1]); } else { InputStream inputStream = source.getInputStream(); secureRandomInstance.setSeed(FileCopyUtils.copyToByteArray(inputStream)); } </s> return secureRandomInstance; } </s> java"
    }
  }
}