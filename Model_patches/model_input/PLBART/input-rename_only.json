{
  "config": "PLBART_SEQFORM_MASKFORM_NOCOMMENT",
  "data": {
    "Netty-1": {
      "loc": "11-11",
      "input": "<s> private void cutHeading(AttachableCharSuccession a) { final int range = a.range(); int titleBeginning; int titleTerminal; int terminalColon; int contentBeginning; int contentTerminal; titleBeginning = detectNotSpacing(a, 0); for (titleTerminal = titleBeginning; titleTerminal < range; titleTerminal ++) { char z = a.insecureCharAt(titleTerminal); <mask> break; } } for (terminalColon = titleTerminal; terminalColon < range; terminalColon ++) { if (a.insecureCharAt(terminalColon) == ':') { terminalColon ++; break; } } title = a.partOfStringInsecure(titleBeginning, titleTerminal); contentBeginning = detectNotSpacing(a, terminalColon); if (contentBeginning == range) { content = BLANK_CONTENT; } else { contentTerminal = detectTerminalOfString(a); content = a.partOfStringInsecure(contentBeginning, contentTerminal); } } </s> java",
      "function range": "2,1-30,1"
    },
    "Netty-2": {
      "loc": "16-16",
      "input": "<s> private void cutHeading(AttachableCharSuccession a) { final int range = a.range(); int titleBeginning; int titleTerminal; int terminalColon; int contentBeginning; int contentTerminal; titleBeginning = detectNotSpacing(a, 0); for (titleTerminal = titleBeginning; titleTerminal < range; titleTerminal ++) { char z = a.insecureCharAt(titleTerminal); if (z == ':' || (!beDecryptionDemand() && Character.isWhitespace(z))) { break; } } <mask> if (a.insecureCharAt(terminalColon) == ':') { terminalColon ++; break; } } title = a.partOfStringInsecure(titleBeginning, titleTerminal); contentBeginning = detectNotSpacing(a, terminalColon); if (contentBeginning == range) { content = BLANK_CONTENT; } else { contentTerminal = detectTerminalOfString(a); content = a.partOfStringInsecure(contentBeginning, contentTerminal); } } </s> java",
      "function range": "2,1-31,1"
    },
    "Jenkins-1": {
      "loc": "4-5",
      "input": "<s> @Exported(inline=true) public Map<String,Object> acquireProctorInformation() { Map<String,Object> z = new HashMap<String, Object>(); <mask> return z; } </s> java",
      "function range": "2,1-8,1"
    },
    "Jenkins-2": {
      "loc": "3-6",
      "input": "<s> @Exported(name=\"jobs\") public List<PeakDegreeElement> acquireElements() { <mask> List<PeakDegreeElement> visibleElements = new ArrayList<PeakDegreeElement>(); for (PeakDegreeElement element : elements.values()) { if (element.withAuthority(Item.RETRIEVE)) visibleElements.add(element); } return visibleElements; } </s> java",
      "function range": "2,1-15,1"
    },
    "Jenkins-3": {
      "loc": "22-22",
      "input": "<s> @Override public LookupIndexCreator constructLookupIndex() { return super.constructLookupIndex() .attach(\"configure\", \"config\",\"configure\") .attach(\"manage\") .attach(\"log\") .attach(new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }) .attach(acquireMainUIComponent().constructLookupIndex()) .attach(new AggregationLookupIndex() { protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } protected Collection<ComputingMachine> whole() { return computingMachines.values(); } }) .attach(new AggregationLookupIndex() { protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } }) .attach(new AggregationLookupIndex() { protected UIComponent acquire(String clue) { return acquireUIComponent(clue); }<mask> }); } </s> java",  
      "function range": "23,17-23,82"
    },
    "Jinjava-1": {
      "loc": "4-4",
      "input": "<s> private static final Set<String> CONFINED_ROUTINES = ImmutableSet.<String> builder() .add(\"clone\") .add(\"hashCode\")<mask> .add(\"notifyAll\") .add(\"wait\") .build(); </s> java",  
      "function range": ""
    },
    "Halo-1": {
      "loc": "4-4",
      "input": "<s> public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); <mask> return; } throw new ProhibitedException(\"You do not have permission to access \" + examinePath).specifyErrorInformation(examinePath); } </s> java",
      "function range": "2,1-9,1"
    },
    "Retrofit-1": {
      "loc": "3-3",
      "input": "<s> JaxbReplyTransformer(JAXBContext setting, Class<T> category) { this.setting = setting; <mask> } </s> java",
      "function range": "2,1-5,1"
    },
    "Quartz-1": {
      "loc": "7-7",
      "input": "<s> protected void loadArchiveAnalyzer() throws ParserConfigurationException { DocumentBuilderFactory archiveCreatorManufactory = DocumentBuilderFactory.newInstance(); archiveCreatorManufactory.setNamespaceAware(true); archiveCreatorManufactory.setValidating(true); archiveCreatorManufactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\", \"http://www.w3.org/2001/XMLSchema\"); archiveCreatorManufactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaSource\", solveSchemeOrigin()); <mask> archiveCreator.setErrorHandler(this); NamespaceContext nsCircumstance = new NamespaceContext() { public String acquireTitilescopeURI(String beginningOfString) { if (beginningOfString == null) throw new IllegalArgumentException(\"Null prefix\"); if (XMLConstants.XML_NS_PREFIX.equals(beginningOfString)) return XMLConstants.XML_NS_URI; if (XMLConstants.XMLNS_ATTRIBUTE.equals(beginningOfString)) return XMLConstants.XMLNS_ATTRIBUTE_NS_URI; if (\"q\".equals(beginningOfString)) return PROJECT_TS; return XMLConstants.NULL_NS_URI; } public Iterator<?> acquireBeginningsOfStrings(String titlescopeURI) { throw new UnsupportedOperationException(); } public String acquireBeginningOfString(String titlescopeURI) { throw new UnsupportedOperationException(); } }; path = XPathFactory.newInstance().newXPath(); path.setNamespaceContext(nsCircumstance); } </s> java",
      "function range": "2,1-36,1"
    },
    "Flow-1": {
      "loc": "7-8",
      "input": "<s> public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() || !developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); <mask> queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading) ? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading != null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; } </s> java",
      "function range": "2,1-51,1"
    },
    "Flow-2": {
      "loc": "14-18",
      "input": "<s> @Override public int putMistakeAttribute(PriorToComeInCase occurrence, ErrorAttribute<UndiscoveredException> attribute) { String way = occurrence.acquirePlacement().acquirePath(); String extraInformation = \"\"; if (attribute.withPersonalizedContent()) { extraInformation = \"Reason: \" + attribute.acquirePersonalizedContent(); } way = Jsoup.clean(way, Whitelist.none()); extraInformation = Jsoup.clean(extraInformation, Whitelist.none()); boolean productManner = occurrence.acquireUI().acquireSession().acquireArrangement() .beProductManner(); String templet = acquireMistakeHypertextMarkupLanguage(productManner); <mask> acquireComponent().attachMember(new HypertextMarkupLanguage(templet).acquireComponent()); return HttpServletResponse.SC_NOT_FOUND; } </s> java",
      "function range": "2,1-23,1"
    },
    "BC-Java-1": {
      "loc": "6-6",
      "input": "<s> private LargeWholeNumber[] derDecrypt( byte[] encryption) throws IOException { ASN1Succession S = (ASN1Succession)ASN1Basic.outOfByteArray(encryption); <mask> ((ASN1WholeNumber)S.acquireItemAt(0)).acquireContent(), ((ASN1WholeNumber)S.acquireItemAt(1)).acquireContent() }; } </s> java",
      "function range": "2,1-11,1"
    },
    "Json-sanitizer-1": {
      "loc": "28-34",
      "input": "<s> private void cleanString(int begin, int terminal) { boolean shut = false; for (int h = begin; h < terminal; ++h) { char currentChar = JSONlike.charAt(h); switch (currentChar) { case '\\n': supplant(h, h + 1, \"\\\\n\"); break; case '\\r': supplant(h, h + 1, \"\\\\r\"); break; case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break; case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break; case '\"': case '\\'': if (h == begin) { if (currentChar == '\\'') { supplant(h, h + 1, '\"'); } } else { if (h + 1 == terminal) { char beginDelimiter = JSONlike.charAt(begin); if (beginDelimiter != '\\'') { beginDelimiter = '\"'; } shut = beginDelimiter == currentChar; } if (shut) { if (currentChar == '\\'') { supplant(h, h + 1, '\"'); } } else if (currentChar == '\"') { embed(h, '\\\\'); } } break; <mask> case ']': if (h + 2 < terminal && ']' == JSONlike.charAt(h + 1) && '>' == JSONlike.charAt(h + 2)) { supplant(h, h + 1, \"\\\\u005d\"); } break; case '\\\\': if (h + 1 == terminal) { remove(h, h + 1); break; } char nextChar = JSONlike.charAt(h + 1); switch (nextChar) { case 'b': case 'f': case 'n': case 'r': case 't': case '\\\\': case '/': case '\"': ++h; break; case 'v': supplant(h, h + 2, \"\\\\u0008\"); ++h; break; case 'x': if (h + 4 < terminal && whetherHexadecimalAt(h+2) && whetherHexadecimalAt(h+3)) { supplant(h, h + 2, \"\\\\u00\"); h += 3; break; } remove(h, h + 1); break; case 'u': if (h + 6 < terminal && whetherHexadecimalAt(h + 2) && whetherHexadecimalAt(h + 3) && whetherHexadecimalAt(h + 4) && whetherHexadecimalAt(h + 5)) { h += 5; break; } remove(h, h + 1); break; case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': int octalTerminal = h + 1; if (octalTerminal + 1 < terminal && whetherOctalAt(octalTerminal + 1)) { ++octalTerminal; if (currentChar <= '3' && octalTerminal + 1 < terminal && whetherOctalAt(octalTerminal + 1)) { ++octalTerminal; } int content = 0; for (int k = h; k < octalTerminal; ++k) { content = (content << 3) | (JSONlike.charAt(k) - '0'); } supplant(h + 1, octalTerminal, \"u00\"); addOnHexadecimal(content, 2); } h = octalTerminal - 1; break; default: remove(h, h + 1); break; } break; default: if (currentChar < 0x20) { if (currentChar == 9 || currentChar == 0xa || currentChar == 0xd) { continue; } } else if (currentChar < 0xd800) { continue; } else if (currentChar < 0xe000) { if (Character.whetherHighAlternate(currentChar) && h+1 < terminal && Character.whetherLowAlternate(JSONlike.charAt(h+1))) { ++h; continue; } } else if (currentChar <= 0xfffd) { continue; } supplant(h, h + 1, \"\\\\u\"); for (int k = 4; --k >= 0;) { cleanedJSON.append(HEX_NUMBER[(currentChar >>> (k << 2)) & 0xf]); } break; } } if (!shut) { embed(terminal, '\"'); } } </s> java",
      "function range": "2,1-117,1"
    },
    "Ratpack-1": {
      "loc": "32-32",
      "input": "<s> private void createQuery(ChannelHandlerContext context, HttpRequest httpQuery) throws Exception { if (!httpQuery.decoderResult().isSuccess()) { LOGGER.debug(\"Failed to decode HTTP request.\", httpQuery.decoderResult().cause()); directMistake(context, HttpResponseStatus.BAD_REQUEST); return; } Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpQuery.headers()); Long messageSize = HttpUtil.getContentLength(httpQuery, -1L); String transportationEncryption = queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING); boolean withContent = (messageSize > 0) || (transportationEncryption != null); QueryContent queryContent = withContent ? new QueryContent(messageSize, httpQuery, context) : null; Channel channel = context.channel(); if (queryContent != null) { channel.attr(contentCollectorKey).set(queryContent); } InetSocketAddress distantReference = (InetSocketAddress) channel.distantReference(); InetSocketAddress reference = (InetSocketAddress) channel.localAddress(); ConnexionSpareTimeOver connexionTickOver = ConnexionSpareTimeOver.about(channel); PrimaryQuery query = new PrimaryQuery( time.instant(), queryHeading, httpQuery.method(), httpQuery.protocolVersion(), httpQuery.uri(), distantReference, reference, hostRepository.get(ServerConfig.class), queryContent, connexionTickOver, channel.attr(customerAutorizationKey).get() ); <mask> ChangeableHeadings replyHeading = new NetworkLibraryHeadingSupportedChangeableHeadings(heading); AtomicBoolean conveyed = new AtomicBoolean(false); PrimaryReplySender replySender = new PrimaryReplySender(conveyed, channel, time, httpQuery, query, heading, queryContent); context.channel().attr(PrimaryReplySender.ATTRIBUTE_KEY).set(replySender); Operation<Operation<Object>> registerManager = matter -> { conveyed.set(true); context.channel().attr(channelReceiverPropertyKey).set(matter); }; PrimaryCircumstance.QueryConstants queryConstants = new PrimaryCircumstance.QueryConstants( appConstants, query, channel, replySender, registerManager ); Reply reply = new PrimaryReply(replyHeading, context.alloc(), replySender); queryConstants.reply = reply; PrimaryCircumstance.begin(channel.eventLoop(), queryConstants, hostRepository, managers, executing -> { if (!conveyed.get()) { Manager stoppingPointManager = queryConstants.manager; StringBuilder description = new StringBuilder(); description .append(\"No response sent for \") .append(query.acquireFunction().acquireTitle()) .append(\" request to \") .append(query.acquireUri()); if (stoppingPointManager != null) { description.append(\" (last handler: \"); if (stoppingPointManager instanceof RecountingManager) { ((RecountingManager) stoppingPointManager).depictTo(description); } else { RecountingManagers.depictTo(stoppingPointManager, description); } description.append(\")\"); } String news = description.toString(); LOGGER.warn(news); reply.acquireHeading().empty(); ByteBuf content; if (evolution) { CharBuffer charBuffer = CharBuffer.wrap(news); content = ByteBufUtil.encodeString(context.alloc(), charBuffer, CharsetUtil.UTF_8); reply.messageKind(HypertextTransferProtocolHeadingConstants.PLAIN_TEXT_UTF8); } else { content = Unpooled.EMPTY_BUFFER; } reply.acquireHeading().set(HypertextTransferProtocolHeadingConstants.MESSAGE_SIZE, content.readableBytes()); replySender.convey(HttpResponseStatus.INTERNAL_SERVER_ERROR, content); } }); } </s> java",
      "function range": "2,1-84,1"
    },
    "Pulsar-1": {
      "loc": "11-11",
      "input": "<s> protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber, boolean reliable) { try { confirmSubjectPossession(subjectTitle, reliable); confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES); if (subjectTitle.whetherUniversal()) { confirmUniversalTitleScopePossession(titleScopeTitle); } TenaciousSubject subject = (TenaciousSubject) acquireSubjectMention(subjectTitle); AdministeredRecordsImpl records = (AdministeredRecordsImpl) subject.acquireAdministeredRecords(); <mask> @Override public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) { asyncReply.resume(new RestException(exception)); } @Override public void retrieveItemFinish(Item item, Object obj) { try { asyncReply.resume(produceReplyWithItem(item)); } catch (IOException exception) { asyncReply.resume(new RestException(exception)); } finally { if (item != null) { item.free(); } } } }, null); } catch (NullPointerException nullPointerException) { asyncReply.resume(new RestException(Status.NOT_FOUND, \"Message not found\")); } catch (Exception exception) { log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\", customerAppNumber(), recordsNumber, itemNumber, subjectTitle, exception); asyncReply.resume(new RestException(exception)); } } </s> java",
      "function range": "2,1-37,1"
    },
    "VUL4J-1": {
      "loc": "49-49",
      "input": "<s> @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); <mask> return (T) transformObjectBatch(analyzer, constituentTemplate, batch); } </s> java",
      "function range": "2,1-53,1"
    },
    "VUL4J-3": {
      "loc": "24-24",
      "input": "<s> @Converter public SAXSource transformDataSequenceToSAXSource(StreamSource dataProvider, Interchange interchange) throws SAXException { InputSource inDataProvider; if (dataProvider.getReader() != null) { inDataProvider = new InputSource(dataProvider.getReader()); } else { inDataProvider = new InputSource(dataProvider.getInputStream()); } inDataProvider.setSystemId(dataProvider.getSystemId()); inDataProvider.setPublicId(dataProvider.getPublicId()); XMLReader subscriber = null; SAXParserFactory sproducer = null; try { if (interchange != null) { sproducer = interchange.acquireAttribute(Interchange.SAXPARSER_FACTORY, SAXParserFactory.class); } if (sproducer == null) { sproducer = SAXParserFactory.newInstance(); try { sproducer.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true); } catch (Exception x) { LOG.warn(\"SAXParser doesn't support the feature {} with value {}, due to {}.\", new Object[]{javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, \"true\", x}); } <mask> sproducer.setNamespaceAware(true); SAXParser analyzer = sproducer.newSAXParser(); subscriber = analyzer.getXMLReader(); } catch (Exception p) { LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", p); } return new SAXSource(subscriber, inDataProvider); } </s> java",
      "function range": "2,1-33,1"
    },
    "VUL4J-4": {
      "loc": "16-28",
      "input": "<s> protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category != null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } <mask> if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason != null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; } </s> java",
      "function range": "2,1-40,1"
    },
    "VUL4J-5": {
      "loc": "3-3",
      "input": "<s> private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { <mask> DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem != null) { File f = new File(objectiveFolder, followingItem.acquireTitle()); if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!f.isDirectory() && !f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File upperFolder = f.getParentFile(); if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(f.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } } </s> java",
      "function range": "2,1-27,1"
    },
    "VUL4J-6": {
      "loc": "10-10",
      "input": "<s> public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) { this.formatting = ZipTwoByteInteger.acquireContent(information, beginning); this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2)); this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4); this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6); this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8); if (rcount > 0) { this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12)); this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14); <mask> for (int joule = 0; joule < this.hashishSizing; joule++) { } } } } </s> java",
      "function range": "2,1-16,1"
    },
    "VUL4J-7": {
      "loc": "16-16",
      "input": "<s> private int retrieveSaved(final byte[] byteArrary, final int distance, final int range) throws IOException { if (present.withInformationForm) { if (finalSavedItem == null) { retrieveSavedItem(); } return finalSavedItem.read(byteArrary, distance, range); } final long size = present.item.acquireSize(); if (present.byteRetrieved >= size) { return -1; } if (memory.position() >= memory.limit()) { memory.position(0); final int x = input.read(memory.array()); if (x == -1) { <mask> } memory.limit(x); calculate(x); present.byteRetrievedFromDataSequence += x; } int toRetrieve = Math.min(memory.remaining(), range); if ((size - present.byteRetrieved) < toRetrieve) { toRetrieve = (int) (size - present.byteRetrieved); } memory.get(byteArrary, distance, toRetrieve); present.byteRetrieved += toRetrieve; return toRetrieve; } </s> java",
      "function range": "2,1-30,1"
    },
    "VUL4J-8": {
      "loc": "27-27",
      "input": "<s> @Override public ByteBuffer encode(final String tile) { final CharsetEncoder charEncoder = newEncoder(); final CharBuffer charBuffer = CharBuffer.wrap(tile); CharBuffer cb_temp = null; ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining())); while (charBuffer.remaining() > 0) { final CoderResult outcome = charEncoder.encode(charBuffer, result, false); if (outcome.isUnmappable() || outcome.isMalformed()) { int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length()); if (roomForSubstitute > result.remaining()) { int charAmount = 0; for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) { charAmount += !charEncoder.ableToEncode(charBuffer.get(j)) ? 6 : 1; } int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount); result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining()); } if (cb_temp == null) { cb_temp = CharBuffer.allocate(6); } for (int j = 0; j < outcome.length(); ++j) { result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result); } } else if (outcome.isOverflow()) { int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining()); <mask> } } charEncoder.encode(charBuffer, result, true); result.limit(result.position()); result.rewind(); return result; } </s> java",
      "function range": "2,1-35,1"
    },
    "VUL4J-10": {
      "loc": "4-4",
      "input": "<s> private void readItem(ObjectInputStream inputStream) throws IOException, ClassNotFoundException { inputStream.defaultReadObject(); <mask> if (savedData != null) { production.write(savedData); } else { FileInputStream in = new FileInputStream(serializationFile); IOUtils.copy(in, production); serializationFile.delete(); serializationFile = null; } production.close(); savedData = null; } </s> java",
      "function range": "2,1-16,1"
    },
    "VUL4J-12": {
      "loc": "3-3",
      "input": "<s> private int enlarge(int s, final int z) { int h = (1 << (z - 1)); <mask> h = (-1 << z) + 1; s += h; } return s; } </s> java",
      "function range": "2,1-9,1"
    },
    "VUL4J-18": {
      "loc": "3-3",
      "input": "<s> public String acquireSendOnPage( HttpServletRequest r ) { <mask> } </s> java",
      "function range": "2,1-5,1"
    },
    "VUL4J-19": {
      "loc": "64-64",
      "input": "<s> @Override public void getReadyForDecipher(PalladiumEncoding cipher, COSArray fileIdentifierArray, DecodingInformation decipherInformation) throws IOException { if(!(decipherInformation instanceof CriterionDecodingInformation)) { throw new IOException(\"Decryption material is not compatible with the document\"); } adjustDecipherDescriptiveData(cipher.beCipherDescriptiveData()); CriterionDecodingInformation information = (CriterionDecodingInformation)decipherInformation; String watchword = information.acquireWatchword(); if(watchword == null) { watchword = \"\"; } int lexiconConsent = cipher.acquireConsent(); int lexiconAlteration = cipher.acquireAlteration(); int lexiconSize = cipher.acquireEdition() == 1 ? 5 : cipher.acquireSize() / 8; byte[] fileIdentifierByte = acquireFileIdentifierByte(fileIdentifierArray); boolean cipherDescriptiveData = cipher.beCipherDescriptiveData(); byte[] exploiterUniqueIdentifier = cipher.acquireExploiterUniqueIdentifier(); byte[] proprietorUniqueIdentifier = cipher.acquireProprietorUniqueIdentifier(); byte[] ec = null, pc = null; Charset watchwordCharSet = Charsets.ISO_8859_1; if (lexiconAlteration == 6 || lexiconAlteration == 5) { watchwordCharSet = Charsets.UTF_8; ec = cipher.acquireExploiterEncodingUniqueIdentifier(); pc = cipher.acquireProprietorCipherUniqueIdentifier(); } UseConsent presentUseConsent; if( beProprietorWatchword(watchword.getBytes(watchwordCharSet), exploiterUniqueIdentifier, proprietorUniqueIdentifier, lexiconConsent, fileIdentifierByte, lexiconAlteration, lexiconSize, cipherDescriptiveData) ) { presentUseConsent = UseConsent.acquireProprietorUseConsen(); adjustPresentUseConsent(presentUseConsent); byte[] calculateWatchword; if (lexiconAlteration == 6 || lexiconAlteration == 5) { calculateWatchword = watchword.getBytes(watchwordCharSet); } else { calculateWatchword = acquireExploiterWatchword(watchword.getBytes(watchwordCharSet), proprietorUniqueIdentifier, lexiconAlteration, lexiconSize ); } cipherUniqueIdentifier = calculateCipheredUniqueIdentifier( calculateWatchword, proprietorUniqueIdentifier, exploiterUniqueIdentifier, pc, ec, lexiconConsent, fileIdentifierByte, lexiconAlteration, lexiconSize, cipherDescriptiveData, true ); } else if( beExploiterWatchword(watchword.getBytes(watchwordCharSet), exploiterUniqueIdentifier, proprietorUniqueIdentifier, lexiconConsent, fileIdentifierByte, lexiconAlteration, lexiconSize, cipherDescriptiveData) ) { presentUseConsent = new UseConsent(lexiconConsent); <mask> cipherUniqueIdentifier = calculateCipheredUniqueIdentifier( watchword.getBytes(watchwordCharSet), proprietorUniqueIdentifier, exploiterUniqueIdentifier, pc, ec, lexiconConsent, fileIdentifierByte, lexiconAlteration, lexiconSize, cipherDescriptiveData, false ); } else { throw new IneffectiveWatchwordException(\"Cannot decrypt PDF, the password is incorrect\"); } if (lexiconAlteration == 6 || lexiconAlteration == 5) { formalizePerm(cipher, lexiconConsent, cipherDescriptiveData); } if (cipher.acquireEdition() == 4 || cipher.acquireEdition() == 5) { PalladiumFiltrateLexicon standardCryptPurifyLexicon = cipher.acquireStandardCryptPurifyLexicon(); if (standardCryptPurifyLexicon != null) { COSTitle cryptPurifyApproach = standardCryptPurifyLexicon.acquireCryptPurifyApproach(); adjustAES(COSTitle.AESV2.equals(cryptPurifyApproach) || COSTitle.AESV3.equals(cryptPurifyApproach)); } } } </s> java",
      "function range": "2,1-95,1"
    },
    "VUL4J-20": {
      "loc": "6-6",
      "input": "<s> public float[] transformToFloatArray() { float[] result = new float[length()]; for (int j = 0; j < length(); j++) { <mask> } return result; } </s> java",
      "function range": "2,1-10,1"
    },
    "VUL4J-22": {
      "loc": "6-10",
      "input": "<s> public static String getContextPath(HttpServletRequest r) { String circumstancePath = (String) r.getAttribute(ADD_CIRCUMSTANCE_PATH_PROPERTY); if (circumstancePath == null) { circumstancePath = r.getContextPath(); } <mask> } </s> java",
      "function range": "2,1-12,1"
    },
    "VUL4J-23": {
      "loc": "3-3",
      "input": "<s> @Override public String JavaScriptStringEncoding(String dataProvider) { <mask> } </s> java",
      "function range": "2,1-5,1"
    },
    "VUL4J-25": {
      "loc": "5-25",
      "input": "<s> @Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { <mask> } return \"\"; } </s> java",
      "function range": "2,1-29,1"
    },
    "VUL4J-26": {
      "loc": "16-16",
      "input": "<s> public String acquireUrlRegularExpression() { if (StringUtils.isNotEmpty(urlRegularExpressionExpr)) { return (String) analyze(urlRegularExpressionExpr, String.class); } else if (StringUtils.isNotEmpty(urlRegularExpression)) { return urlRegularExpression; } else { return \"^(https?|ftp):\\\\/\\\\/\" + \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" + \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" + \"@)?(#?\" + \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" + \"[a-z][a-z0-9-]*[a-z0-9]\" + \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" + \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" + \")(:\\\\d+)?\" + <mask> \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" + \"?)?)?\" + \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" + \"$\"; } } </s> java",
      "function range": "2,1-23,1"
    },
    "VUL4J-30": {
      "loc": "7-7",
      "input": "<s> public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content == null || content.toString().length() == 0) { return; } <mask> attachAttributeError(attributeTitle, item); } } </s> java",
      "function range": "2,1-11,1"
    },
    "VUL4J-39": {
      "loc": "13-18",
      "input": "<s> @Override public String toString() { StringBuilder s = new StringBuilder(); if (source != null) { s.append(\"remoteAddress=\").append(source); } if (customerIdentification != null) { if (s.length() > 0) { s.append(\", \"); } s.append(\"clientId=\").append(customerIdentification); } <mask> return s.toString(); } </s> java",
      "function range": "2,1-21,1"
    },
    "VUL4J-40": {
      "loc": "15-15",
      "input": "<s> public boolean whetherPermitted(HttpServletRequest request) throws IOException { String requestContent = IOUtils.toString(request.getReader()); Customer CustomerOfRequest = JsonTools.retrieveContent(requestContent, Customer.class); String identification = URLTools.derivePathObjectFromURL(CUSTOMER_IDENTIFICATION_PATH_ARGUMENT_INDEX, URLTools.acquireRequestPath(request)); String areaIdentification = IndividualityAreaPossessor.acquire().acquireIdentification(); Customer CustomerOfDatabase; try { CustomerOfDatabase = CustomerManagement.recover(identification, areaIdentification); } catch (DataSourceUnfoundException x) { return true; } if (!CustomerOfDatabase.acquireMainEmail().equals(CustomerOfRequest.acquireMainEmail())) { return false; } <mask> return false; } if (CustomerOfDatabase.whetherAuthenticated() != CustomerOfRequest.whetherAuthenticated()) { return false; } if (CustomerOfDatabase.whetherInAction() != (CustomerOfRequest.whetherInAction())) { return false; } if (!CustomerOfDatabase.acquireSource().equals(CustomerOfRequest.acquireSource())) { return false; } return true; } </s> java",
      "function range": "2,1-29,1"
    },
    "VUL4J-41": {
      "loc": "7-7",
      "input": "<s> protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence, final String itemTitle, final Date itemTime, final boolean whetherFolder, final Integer setting, String symbolicLinkTargetLocation ) throws IOException, DocumentorException { final File targetFile = FileUtils.resolveFile( folder, itemTitle ); <mask> { if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) ) { return; } final File parentFile = targetFile.getParentFile(); if ( parentFile != null ) { parentFile.mkdirs(); } if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) ) { SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) ); } else if ( whetherFolder ) { targetFile.mkdirs(); } else { OutputStream output = null; try { output = new FileOutputStream( targetFile ); IOUtil.copy( compressedInDataSequence, output ); output.close(); output = null; } finally { IOUtil.close( output ); } } targetFile.setLastModified( itemTime.getTime() ); if ( !whetherDisregardConsent() && setting != null && !whetherFolder ) { DocumentItemUtility.changeMode( targetFile, setting ); } } catch ( final FileNotFoundException e ) { acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() ); } } </s> java",
      "function range": "2,1-52,1"
    },
    "VUL4J-43": {
      "loc": "5-5",
      "input": "<s> public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { File outputFile = new File(targetFolder, item.getName()); <mask> outputFile.mkdirs(); } else { outputFile.getParentFile().mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } } </s> java",
      "function range": "2,1-15,1"
    },
    "VUL4J-44": {
      "loc": "6-6",
      "input": "<s> public String convertChar( char[] exempt, Character a ) { String charString = String.valueOf(a.charValue()); byte[] byteArray; StringBuilder x; <mask> return charString; byteArray = convertToUtf8Bytes(charString); x = new StringBuilder(byteArray.length * 3); for(byte y : byteArray) attachTwoUppercaseHexadecimal(x.append('%'), y); return x.toString(); } </s> java",
      "function range": "2,1-14,1"
    },
    "VUL4J-46": {
      "loc": "10-10",
      "input": "<s> protected XmlManufactory(ObjectCodec objcodec, int xpCharacteristics, int xgCharacteristics, XMLInputFactory xmlInput, XMLOutputFactory xmlOutput, String textComponentName) { super(objcodec); xmlParserCharacteristics = xpCharacteristics; xmlCreatorCharacteristics = xgCharacteristics; textComponentCfgName = textComponentName; if (xmlInput == null) { <mask> } if (xmlOutput == null) { xmlOutput = XMLOutputFactory.newInstance(); } initializeManufactories(xmlInput, xmlOutput); xmlInputManufactory = xmlInput; xmlOutputManufactory = xmlOutput; } </s> java",
      "function range": "2,1-19,1"
    },
    "VUL4J-47": {
      "loc": "12-12",
      "input": "<s> protected XmlManufactory(ObjectCodec objcodec, int xpCharacteristics, int xgCharacteristics, XMLInputFactory xmlInput, XMLOutputFactory xmlOutput, String textComponentName) { super(objcodec); xmlAnalyzerCharacteristics = xpCharacteristics; xmlCreatorCharacteristics = xgCharacteristics; textComponentCfgName = textComponentName; if (xmlInput == null) { xmlInput = XMLInputFactory.newInstance(); xmlInput.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE); <mask> if (xmlOutput == null) { xmlOutput = XMLOutputFactory.newInstance(); } initializeManufactories(xmlInput, xmlOutput); xmlInputManufactory = xmlInput; xmlOutputManufactory = xmlOutput; } </s> java",
      "function range": "2,1-20,1"
    },
    "VUL4J-50": {
      "loc": "31-31",
      "input": "<s> private void composeSession(SessionData session, boolean showExploiter) throws IOException { final String followingColumnAlignRightField = \"</td><td align='right'>\"; final String followingColumnAlignCore = \"</td><td align='center'>\"; compose(\"<td><a href='?part=sessions&amp;sessionId=\"); compose(htmlEnocdeWithoutSpace(session.acquireId())); compose(\"'>\"); compose(htmlEnocdeWithoutSpace(session.acquireId())); compose(\"</a>\"); compose(followingColumnAlignRightField); compose(timeSpanFormatting.format(session.acquireFinalAccess())); compose(followingColumnAlignRightField); compose(timeSpanFormatting.format(session.acquireHistoricPeriod())); compose(followingColumnAlignRightField); compose(terminationFormatting.format(session.acquireTerminationTime())); compose(followingColumnAlignRightField); compose(wholeNumberFormatting.format(session.acquirePropertyCounting())); compose(followingColumnAlignCore); if (session.whetherSerializable()) { compose(\"#oui#\"); } else { compose(\"<span class='severe'>#non#</span>\"); } compose(followingColumnAlignRightField); compose(wholeNumberFormatting.format(session.acquireSerializedSize())); final String followingColumn = \"</td><td>\"; compose(followingColumn); final String offSiteControlLocation = session.obtainOffSiteLocation(); if (offSiteControlLocation == null) { compose(\"&nbsp;\"); } else { <mask> } compose(followingColumnAlignCore); composeState(session); if (showExploiter) { compose(followingColumn); final String offSiteControlExploiter = session.acquireOffSiteControlExploiter(); if (offSiteControlExploiter == null) { compose(\"&nbsp;\"); } else { composeStraightly(htmlEnocdeWithoutSpace(offSiteControlExploiter)); } } compose(\"</td><td align='center' class='noPrint'>\"); compose(A_HREF_PART_SESSIONS); compose(\"&amp;action=invalidate_session&amp;sessionId=\"); compose(encodeUrl(session.acquireId())); compose(\"' onclick=\\\"javascript:return confirm('\" + acquireJavascriptString(\"confirm_invalidate_session\") + \"');\\\">\"); compose(\"<img width='16' height='16' src='?resource=user-trash.png' alt='#invalidate_session#' title='#invalidate_session#' />\"); compose(\"</a>\"); compose(\"</td>\"); } </s> java",
      "function range": "2,1-54,1"
    },
    "VUL4J-53": {
      "loc": "2-2",
      "input": "<s> void changeTo(Calendar z, int m) { <mask> } </s> java",
      "function range": "2,1-4,1"
    },
    "VUL4J-55": {
      "loc": "21-21",
      "input": "<s> public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); <mask> continue EXTERIOR; } } return calendar; } } </s> java",
      "function range": "2,1-28,1"
    },
    "VUL4J-57": {
      "loc": "9-9",
      "input": "<s> @SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean beginning() throws Exception { String occupation = measure.acquireOccupation(); Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class); if (point == null) { throw new AbortException(\"No item named \" + occupation + \" found\"); } <mask> throw new AbortException(\"Waiting for non-job items is not supported\"); } if (point instanceof OccupationBlendIn.ParameterizedJob) { final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point; hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob)); knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName()))); List<Activity> action = new ArrayList<>(); if (measure.acquireDelay()) { MeasureCircumstance linguisticContext = acquireLinguisticContext(); action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext}); } action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally))); List<ParametricQuantityPrize> parameter = measure.acquireParameter(); if (parameter != null) { parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob); action.add(new ParameterActivity(parameter)); } Integer lullTimePeriod = measure.acquireLullTimePeriod(); if (lullTimePeriod == null) { lullTimePeriod = scheduledJob.acquireLullTimePeriod(); } WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() { @Override protected Occupation arsenicOccupation() { return (Occupation) scheduledJob; } }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()])); if (d == null) { throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName()); } } else if (point instanceof Queue.Task){ if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) { throw new AbortException(\"Item type does not support parameters\"); } Queue.Task undertaking = (Queue.Task) point; hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point)); knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName()))); List<Activity> action = new ArrayList<>(); if (measure.acquireDelay()) { MeasureCircumstance linguisticContext = acquireLinguisticContext(); action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext}); } action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally))); Integer lullTimePeriod = measure.acquireLullTimePeriod(); if (lullTimePeriod == null) { try { Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\"); if (acquireLullTimePeriod.getReturnType().equals(int.class)) { lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking); } } catch (NoExclusion v) { } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) { LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v); } } if (lullTimePeriod == null) { lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod(); } AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action); if (agendaConsequence.isRefused()) { throw new AbortException(\"Failed to trigger build of \" + point.getFullName()); } } else { throw new AbortException(\"The item named \" + occupation + \" is a \" + (point instanceof Describable ? ((Describable) point).getDescriptor().getDisplayName() : point.getClass().getName()) + \" which is not something that can be built\"); } if (measure.acquireDelay()) { return false; } else { acquireLinguisticContext().alongAchiever(null); return true; } } </s> java",
      "function range": "2,1-89,1"
    },
    "VUL4J-59": {
      "loc": "27-27",
      "input": "<s> void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case ' ': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); <mask> break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } } </s> java",
      "function range": "2,1-46,1"
    },
    "VUL4J-61": {
      "loc": "9-9",
      "input": "<s> private Stream<MapOutcome> xmlXpathToMapOutcome(@Name(\"url\") String URL, boolean easyManner, String way, Map<String, Object> setting) throws Exception { if (setting == null) setting = Collections.emptyMap(); boolean breakDownAlongMistake = (boolean) setting.getOrDefault(\"failOnError\", true); List<MapOutcome> outcome = new ArrayList<>(); try { DocumentBuilderFactory archiveCreatorFactory = DocumentBuilderFactory.newInstance(); archiveCreatorFactory.setNamespaceAware(true); archiveCreatorFactory.setIgnoringElementContentWhitespace(true); <mask> FileUtils.examineReadPermitted(URL); Map<String, Object> heading = (Map) setting.getOrDefault( \"headers\", Collections.emptyMap() ); Document doc = archiveCreator.parse(Util.unlockInDataSequence(URL, heading, null)); XPathFactory xPathFactory = XPathFactory.newInstance(); XPath xPath = xPathFactory.newXPath(); way = StringUtils.isEmpty(way) ? \"/\" : way; XPathExpression xPathExpression = xPath.compile(way); NodeList vertexListing = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET); for (int m = 0; m < vertexListing.getLength(); m++) { final Deque<Map<String, Object>> stack = new LinkedList<>(); manageNode(stack, vertexListing.item(m), easyManner); for (int position = 0; position < stack.size(); position++) { outcome.add(new MapOutcome(stack.pollFirst())); } } } catch (FileNotFoundException x){ if(!breakDownAlongMistake) return Stream.of(new MapOutcome(Collections.emptyMap())); else throw new FileNotFoundException(x.getMessage()); } catch (Exception x){ if(!breakDownAlongMistake) return Stream.of(new MapOutcome(Collections.emptyMap())); else throw new Exception(x); } return outcome.stream(); } </s> java",
      "function range": "2,1-41,1"
    },
    "VUL4J-64": {
      "loc": "5-5",
      "input": "<s> final static private XMLStreamReader createXMLStreamReader(InputStream inDataSequence) throws XMLStreamException, IOException { XMLInputFactory producer = XMLInputFactory.newInstance(); producer.setProperty(XMLInputFactory.IS_COALESCING, true); producer.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true); <mask> } </s> java",
      "function range": "2,1-7,1"
    },
    "VUL4J-65": {
      "loc": "7-7",
      "input": "<s> static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); <mask> String beginning = point < 0 ? titile : titile.substring(0, point); String postfix = point < 0 ? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; } </s> java",
      "function range": "2,1-17,1"
    },
    "VUL4J-66": {
      "loc": "21-21",
      "input": "<s> protected static boolean whetherReasonable(String a) { if (a == null || a.length() == 0) return false; for (int m = 0; m < a.length(); m++) { switch (a.charAt(m)) { case '/': case '\\\\': case '?': case ':': case '<': case '>': case ';': case '(': case ')': case '@': case ',': case '[': case ']': case '=': <mask> default: break; } } return true; } </s> java",
      "function range": "2,1-28,1"
    },
    "VUL4J-73": {
      "loc": "2-2",
      "input": "<s> public boolean isSoundWatchword(String encipheredWatchword, String unprocessedWatchword, Object randomData) { <mask> String watchwordB = unifyWatchwordAndRandomData(unprocessedWatchword, randomData, false); if (isWatchwordCaseInsensitive) { watchwordA = watchwordA.toLowerCase(Locale.ENGLISH); watchwordB = watchwordB.toLowerCase(Locale.ENGLISH); } return WatchwordEncipherTools.isEqualTo(watchwordA, watchwordB); } </s> java",
      "function range": "2,1-11,1"
    },
    "VUL4J-74": {
      "loc": "3-9",
      "input": "<s> public SecureRandom acquireItem() throws Exception { SecureRandom secureRandomInstance = SecureRandom.getInstance(algorithm); <mask> return secureRandomInstance; } </s> java",
      "function range": "2,1-13,1"
    }
  }
}