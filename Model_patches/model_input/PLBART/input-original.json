{
  "config": "PLBART_SEQFORM_MASKFORM_NOCOMMENT",
  "data": {
    "Netty-1": {
      "loc": "11-11",
      "input": "<s> private void splitHeader(AppendableCharSequence sb) { final int length = sb.length(); int nameStart; int nameEnd; int colonEnd; int valueStart; int valueEnd; nameStart = findNonWhitespace(sb, 0); for (nameEnd = nameStart; nameEnd < length; nameEnd ++) { char ch = sb.charAtUnsafe(nameEnd); <mask> break; } } for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) { if (sb.charAtUnsafe(colonEnd) == ':') { colonEnd ++; break; } } name = sb.subStringUnsafe(nameStart, nameEnd); valueStart = findNonWhitespace(sb, colonEnd); if (valueStart == length) { value = EMPTY_VALUE; } else { valueEnd = findEndOfString(sb); value = sb.subStringUnsafe(valueStart, valueEnd); } } </s> java",
      "function range": "2,1-30,1"
    },
    "Netty-2": {
      "loc": "16-16",
      "input": "<s> private void splitHeader(AppendableCharSequence sb) { final int length = sb.length(); int nameStart; int nameEnd; int colonEnd; int valueStart; int valueEnd; nameStart = findNonWhitespace(sb, 0); for (nameEnd = nameStart; nameEnd < length; nameEnd ++) { char ch = sb.charAtUnsafe(nameEnd); if (ch == ':' || (!isDecodingRequest() && Character.isWhitespace(ch))) { break; } } <mask> if (sb.charAtUnsafe(colonEnd) == ':') { colonEnd ++; break; } } name = sb.subStringUnsafe(nameStart, nameEnd); valueStart = findNonWhitespace(sb, colonEnd); if (valueStart == length) { value = EMPTY_VALUE; } else { valueEnd = findEndOfString(sb); value = sb.subStringUnsafe(valueStart, valueEnd); } } </s> java",
      "function range": "2,1-31,1"
    },
    "Jenkins-1": {
      "loc": "4-5",
      "input": "<s> @Exported(inline=true) public Map<String,Object> getMonitorData() { Map<String,Object> r = new HashMap<String, Object>(); <mask> return r; } </s> java",
      "function range": "2,1-8,1"
    },
    "Jenkins-2": {
      "loc": "3-6",
      "input": "<s> @Exported(name=\"jobs\") public List<TopLevelItem> getItems() { <mask> List<TopLevelItem> viewableItems = new ArrayList<TopLevelItem>(); for (TopLevelItem item : items.values()) { if (item.hasPermission(Item.READ)) viewableItems.add(item); } return viewableItems; } </s> java",
      "function range": "2,1-15,1"
    },
    "Jenkins-3": {
      "loc": "22-22",
      "input": "<s> @Override public SearchIndexBuilder makeSearchIndex() { return super.makeSearchIndex() .add(\"configure\", \"config\",\"configure\") .add(\"manage\") .add(\"log\") .add(new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }) .add(getPrimaryView().makeSearchIndex()) .add(new CollectionSearchIndex() { protected Computer get(String key) { return getComputer(key); } protected Collection<Computer> all() { return computers.values(); } }) .add(new CollectionSearchIndex() { protected User get(String key) { return User.get(key,false); } protected Collection<User> all() { return User.getAll(); } }) .add(new CollectionSearchIndex() { protected View get(String key) { return getView(key); }  <mask> }); } </s> java",
      "function range": "23,17-23,66"
    },
    "Jinjava-1": {
      "loc": "4-4",
      "input": "<s> private static final Set<String> RESTRICTED_METHODS = ImmutableSet.<String> builder() .add(\"clone\") .add(\"hashCode\")<mask> .add(\"notifyAll\") .add(\"wait\") .build(); </s> java",
      "function range": ""
    },
    "Halo-1": {
      "loc": "4-4",
      "input": "<s> public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); <mask> return; } throw new ForbiddenException(\"You do not have permission to access \" + pathToCheck).setErrorData(pathToCheck); } </s> java",
      "function range": "2,1-9,1"
    },
    "Retrofit-1": {
      "loc": "3-3",
      "input": "<s> JaxbResponseConverter(JAXBContext context, Class<T> type) { this.context = context; <mask> } </s> java",
      "function range": "2,1-5,1"
    },
    "Quartz-1": {
      "loc": "7-7",
      "input": "<s> protected void initDocumentParser() throws ParserConfigurationException { DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance(); docBuilderFactory.setNamespaceAware(true); docBuilderFactory.setValidating(true); docBuilderFactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\", \"http://www.w3.org/2001/XMLSchema\"); docBuilderFactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaSource\", resolveSchemaSource()); <mask> docBuilder.setErrorHandler(this); NamespaceContext nsContext = new NamespaceContext() { public String getNamespaceURI(String prefix) { if (prefix == null) throw new IllegalArgumentException(\"Null prefix\"); if (XMLConstants.XML_NS_PREFIX.equals(prefix)) return XMLConstants.XML_NS_URI; if (XMLConstants.XMLNS_ATTRIBUTE.equals(prefix)) return XMLConstants.XMLNS_ATTRIBUTE_NS_URI; if (\"q\".equals(prefix)) return QUARTZ_NS; return XMLConstants.NULL_NS_URI; } public Iterator<?> getPrefixes(String namespaceURI) { throw new UnsupportedOperationException(); } public String getPrefix(String namespaceURI) { throw new UnsupportedOperationException(); } }; xpath = XPathFactory.newInstance().newXPath(); xpath.setNamespaceContext(nsContext); } </s> java",
      "function range": "2,1-36,1"
    },
    "Flow-1": {
      "loc": "7-8",
      "input": "<s> public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() || !devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); <mask> requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header) ? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header != null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; } </s> java",
      "function range": "2,1-51,1"
    },
    "Flow-2": {
      "loc": "14-18",
      "input": "<s> @Override public int setErrorParameter(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter) { String path = event.getLocation().getPath(); String additionalInfo = \"\"; if (parameter.hasCustomMessage()) { additionalInfo = \"Reason: \" + parameter.getCustomMessage(); } path = Jsoup.clean(path, Whitelist.none()); additionalInfo = Jsoup.clean(additionalInfo, Whitelist.none()); boolean productionMode = event.getUI().getSession().getConfiguration() .isProductionMode(); String template = getErrorHtml(productionMode); <mask> getElement().appendChild(new Html(template).getElement()); return HttpServletResponse.SC_NOT_FOUND; } </s> java",
      "function range": "2,1-23,1"
    },
    "BC-Java-1": {
      "loc": "6-6",
      "input": "<s> private BigInteger[] derDecode( byte[] encoding) throws IOException { ASN1Sequence s = (ASN1Sequence)ASN1Primitive.fromByteArray(encoding); <mask> ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() }; } </s> java",
      "function range": "2,1-11,1"
    },
    "Json-sanitizer-1": {
      "loc": "28-34",
      "input": "<s> private void sanitizeString(int start, int end) { boolean closed = false; for (int i = start; i < end; ++i) { char ch = jsonish.charAt(i); switch (ch) { case '\\n': replace(i, i + 1, \"\\\\n\"); break; case '\\r': replace(i, i + 1, \"\\\\r\"); break; case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break; case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break; case '\"': case '\\'': if (i == start) { if (ch == '\\'') { replace(i, i + 1, '\"'); } } else { if (i + 1 == end) { char startDelim = jsonish.charAt(start); if (startDelim != '\\'') { startDelim = '\"'; } closed = startDelim == ch; } if (closed) { if (ch == '\\'') { replace(i, i + 1, '\"'); } } else if (ch == '\"') { insert(i, '\\\\'); } } break; <mask> case ']': if (i + 2 < end && ']' == jsonish.charAt(i + 1) && '>' == jsonish.charAt(i + 2)) { replace(i, i + 1, \"\\\\u005d\"); } break; case '\\\\': if (i + 1 == end) { elide(i, i + 1); break; } char sch = jsonish.charAt(i + 1); switch (sch) { case 'b': case 'f': case 'n': case 'r': case 't': case '\\\\': case '/': case '\"': ++i; break; case 'v': replace(i, i + 2, \"\\\\u0008\"); ++i; break; case 'x': if (i + 4 < end && isHexAt(i+2) && isHexAt(i+3)) { replace(i, i + 2, \"\\\\u00\"); i += 3; break; } elide(i, i + 1); break; case 'u': if (i + 6 < end && isHexAt(i + 2) && isHexAt(i + 3) && isHexAt(i + 4) && isHexAt(i + 5)) { i += 5; break; } elide(i, i + 1); break; case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': int octalEnd = i + 1; if (octalEnd + 1 < end && isOctAt(octalEnd + 1)) { ++octalEnd; if (ch <= '3' && octalEnd + 1 < end && isOctAt(octalEnd + 1)) { ++octalEnd; } int value = 0; for (int j = i; j < octalEnd; ++j) { value = (value << 3) | (jsonish.charAt(j) - '0'); } replace(i + 1, octalEnd, \"u00\"); appendHex(value, 2); } i = octalEnd - 1; break; default: elide(i, i + 1); break; } break; default: if (ch < 0x20) { if (ch == 9 || ch == 0xa || ch == 0xd) { continue; } } else if (ch < 0xd800) { continue; } else if (ch < 0xe000) { if (Character.isHighSurrogate(ch) && i+1 < end && Character.isLowSurrogate(jsonish.charAt(i+1))) { ++i; continue; } } else if (ch <= 0xfffd) { continue; } replace(i, i + 1, \"\\\\u\"); for (int j = 4; --j >= 0;) { sanitizedJson.append(HEX_DIGITS[(ch >>> (j << 2)) & 0xf]); } break; } } if (!closed) { insert(end, '\"'); } } </s> java",
      "function range": "2,1-117,1"
    },
    "Ratpack-1": {
      "loc": "32-32",
      "input": "<s> private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception { if (!nettyRequest.decoderResult().isSuccess()) { LOGGER.debug(\"Failed to decode HTTP request.\", nettyRequest.decoderResult().cause()); sendError(ctx, HttpResponseStatus.BAD_REQUEST); return; } Headers requestHeaders = new NettyHeadersBackedHeaders(nettyRequest.headers()); Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L); String transferEncoding = requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING); boolean hasBody = (contentLength > 0) || (transferEncoding != null); RequestBody requestBody = hasBody ? new RequestBody(contentLength, nettyRequest, ctx) : null; Channel channel = ctx.channel(); if (requestBody != null) { channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody); } InetSocketAddress remoteAddress = (InetSocketAddress) channel.remoteAddress(); InetSocketAddress socketAddress = (InetSocketAddress) channel.localAddress(); ConnectionIdleTimeout connectionIdleTimeout = ConnectionIdleTimeout.of(channel); DefaultRequest request = new DefaultRequest( clock.instant(), requestHeaders, nettyRequest.method(), nettyRequest.protocolVersion(), nettyRequest.uri(), remoteAddress, socketAddress, serverRegistry.get(ServerConfig.class), requestBody, connectionIdleTimeout, channel.attr(CLIENT_CERT_KEY).get() ); <mask> MutableHeaders responseHeaders = new NettyHeadersBackedMutableHeaders(nettyHeaders); AtomicBoolean transmitted = new AtomicBoolean(false); DefaultResponseTransmitter responseTransmitter = new DefaultResponseTransmitter(transmitted, channel, clock, nettyRequest, request, nettyHeaders, requestBody); ctx.channel().attr(DefaultResponseTransmitter.ATTRIBUTE_KEY).set(responseTransmitter); Action<Action<Object>> subscribeHandler = thing -> { transmitted.set(true); ctx.channel().attr(CHANNEL_SUBSCRIBER_ATTRIBUTE_KEY).set(thing); }; DefaultContext.RequestConstants requestConstants = new DefaultContext.RequestConstants( applicationConstants, request, channel, responseTransmitter, subscribeHandler ); Response response = new DefaultResponse(responseHeaders, ctx.alloc(), responseTransmitter); requestConstants.response = response; DefaultContext.start(channel.eventLoop(), requestConstants, serverRegistry, handlers, execution -> { if (!transmitted.get()) { Handler lastHandler = requestConstants.handler; StringBuilder description = new StringBuilder(); description .append(\"No response sent for \") .append(request.getMethod().getName()) .append(\" request to \") .append(request.getUri()); if (lastHandler != null) { description.append(\" (last handler: \"); if (lastHandler instanceof DescribingHandler) { ((DescribingHandler) lastHandler).describeTo(description); } else { DescribingHandlers.describeTo(lastHandler, description); } description.append(\")\"); } String message = description.toString(); LOGGER.warn(message); response.getHeaders().clear(); ByteBuf body; if (development) { CharBuffer charBuffer = CharBuffer.wrap(message); body = ByteBufUtil.encodeString(ctx.alloc(), charBuffer, CharsetUtil.UTF_8); response.contentType(HttpHeaderConstants.PLAIN_TEXT_UTF8); } else { body = Unpooled.EMPTY_BUFFER; } response.getHeaders().set(HttpHeaderConstants.CONTENT_LENGTH, body.readableBytes()); responseTransmitter.transmit(HttpResponseStatus.INTERNAL_SERVER_ERROR, body); } }); } </s> java",
      "function range": "2,1-84,1"
    },
    "Pulsar-1": {
      "loc": "11-11",
      "input": "<s> protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId, boolean authoritative) { try { validateTopicOwnership(topicName, authoritative); validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES); if (topicName.isGlobal()) { validateGlobalNamespaceOwnership(namespaceName); } PersistentTopic topic = (PersistentTopic) getTopicReference(topicName); ManagedLedgerImpl ledger = (ManagedLedgerImpl) topic.getManagedLedger(); <mask> @Override public void readEntryFailed(ManagedLedgerException exception, Object ctx) { asyncResponse.resume(new RestException(exception)); } @Override public void readEntryComplete(Entry entry, Object ctx) { try { asyncResponse.resume(generateResponseWithEntry(entry)); } catch (IOException exception) { asyncResponse.resume(new RestException(exception)); } finally { if (entry != null) { entry.release(); } } } }, null); } catch (NullPointerException npe) { asyncResponse.resume(new RestException(Status.NOT_FOUND, \"Message not found\")); } catch (Exception exception) { log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\", clientAppId(), ledgerId, entryId, topicName, exception); asyncResponse.resume(new RestException(exception)); } } </s> java",
      "function range": "2,1-37,1"
    },
    "VUL4J-1": {
      "loc": "49-49",
      "input": "<s> @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) { final JSONLexer lexer = parser.lexer; if (lexer.token() == JSONToken.NULL) { lexer.nextToken(JSONToken.COMMA); return null; } if (lexer.token() == JSONToken.LITERAL_STRING) { byte[] bytes = lexer.bytesValue(); lexer.nextToken(JSONToken.COMMA); return (T) bytes; } Class componentClass; Type componentType; if (type instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) type; componentType = clazz.getGenericComponentType(); if (componentType instanceof TypeVariable) { TypeVariable typeVar = (TypeVariable) componentType; Type objType = parser.getContext().type; if (objType instanceof ParameterizedType) { ParameterizedType objParamType = (ParameterizedType) objType; Type objRawType = objParamType.getRawType(); Type actualType = null; if (objRawType instanceof Class) { TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters(); for (int i = 0; i < objTypeParams.length; ++i) { if (objTypeParams[i].getName().equals(typeVar.getName())) { actualType = objParamType.getActualTypeArguments()[i]; } } } if (actualType instanceof Class) { componentClass = (Class) actualType; } else { componentClass = Object.class; } } else { componentClass = TypeUtils.getClass(typeVar.getBounds()[0]); } } else { componentClass = TypeUtils.getClass(componentType); } } else { Class clazz = (Class) type; componentType = componentClass = clazz.getComponentType(); } JSONArray array = new JSONArray(); <mask> return (T) toObjectArray(parser, componentClass, array); } </s> java",
      "function range": "2,1-53,1"
    },
    "VUL4J-3": {
      "loc": "24-24",
      "input": "<s> @Converter public SAXSource toSAXSourceFromStream(StreamSource source, Exchange exchange) throws SAXException { InputSource inputSource; if (source.getReader() != null) { inputSource = new InputSource(source.getReader()); } else { inputSource = new InputSource(source.getInputStream()); } inputSource.setSystemId(source.getSystemId()); inputSource.setPublicId(source.getPublicId()); XMLReader xmlReader = null; SAXParserFactory sfactory = null; try { if (exchange != null) { sfactory = exchange.getProperty(Exchange.SAXPARSER_FACTORY, SAXParserFactory.class); } if (sfactory == null) { sfactory = SAXParserFactory.newInstance(); try { sfactory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true); } catch (Exception e) { LOG.warn(\"SAXParser doesn't support the feature {} with value {}, due to {}.\", new Object[]{javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, \"true\", e}); } <mask> sfactory.setNamespaceAware(true); SAXParser parser = sfactory.newSAXParser(); xmlReader = parser.getXMLReader(); } catch (Exception ex) { LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex); } return new SAXSource(xmlReader, inputSource); } </s> java",
      "function range": "2,1-33,1"
    },
    "VUL4J-4": {
      "loc": "16-28",
      "input": "<s> protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type != null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } <mask> if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause != null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; } </s> java",
      "function range": "2,1-40,1"
    },
    "VUL4J-5": {
      "loc": "3-3",
      "input": "<s> private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { <mask> ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry != null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() && !f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() && !parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } } </s> java",
      "function range": "2,1-27,1"
    },
    "VUL4J-6": {
      "loc": "10-10",
      "input": "<s> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) { this.format = ZipShort.getValue(data, offset); this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2)); this.bitlen = ZipShort.getValue(data, offset + 4); this.flags = ZipShort.getValue(data, offset + 6); this.rcount = ZipLong.getValue(data, offset + 8); if (rcount > 0) { this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12)); this.hashSize = ZipShort.getValue(data, offset + 14); <mask> for (int j = 0; j < this.hashSize; j++) { } } } } </s> java",
      "function range": "2,1-16,1"
    },
    "VUL4J-7": {
      "loc": "16-16",
      "input": "<s> private int readStored(final byte[] buffer, final int offset, final int length) throws IOException { if (current.hasDataDescriptor) { if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } final long csize = current.entry.getSize(); if (current.bytesRead >= csize) { return -1; } if (buf.position() >= buf.limit()) { buf.position(0); final int l = in.read(buf.array()); if (l == -1) { <mask> } buf.limit(l); count(l); current.bytesReadFromStream += l; } int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) { toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); current.bytesRead += toRead; return toRead; } </s> java",
      "function range": "2,1-30,1"
    },
    "VUL4J-8": {
      "loc": "27-27",
      "input": "<s> @Override public ByteBuffer encode(final String name) { final CharsetEncoder enc = newEncoder(); final CharBuffer cb = CharBuffer.wrap(name); CharBuffer tmp = null; ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining())); while (cb.remaining() > 0) { final CoderResult res = enc.encode(cb, out, false); if (res.isUnmappable() || res.isMalformed()) { int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length()); if (spaceForSurrogate > out.remaining()) { int charCount = 0; for (int i = cb.position() ; i < cb.limit(); i++) { charCount += !enc.canEncode(cb.get(i)) ? 6 : 1; } int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount); out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining()); } if (tmp == null) { tmp = CharBuffer.allocate(6); } for (int i = 0; i < res.length(); ++i) { out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out); } } else if (res.isOverflow()) { int increment = estimateIncrementalEncodingSize(enc, cb.remaining()); <mask> } } enc.encode(cb, out, true); out.limit(out.position()); out.rewind(); return out; } </s> java",
      "function range": "2,1-35,1"
    },
    "VUL4J-10": {
      "loc": "4-4",
      "input": "<s> private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { in.defaultReadObject(); <mask> if (cachedContent != null) { output.write(cachedContent); } else { FileInputStream input = new FileInputStream(dfosFile); IOUtils.copy(input, output); dfosFile.delete(); dfosFile = null; } output.close(); cachedContent = null; } </s> java",
      "function range": "2,1-16,1"
    },
    "VUL4J-12": {
      "loc": "3-3",
      "input": "<s> private int extend(int v, final int t) { int vt = (1 << (t - 1)); <mask> vt = (-1 << t) + 1; v += vt; } return v; } </s> java",
      "function range": "2,1-9,1"
    },
    "VUL4J-18": {
      "loc": "3-3",
      "input": "<s> public String getForwardPage( HttpServletRequest request ) { <mask> } </s> java",
      "function range": "2,1-5,1"
    },
    "VUL4J-19": {
      "loc": "64-64",
      "input": "<s> @Override public void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray, DecryptionMaterial decryptionMaterial) throws IOException { if(!(decryptionMaterial instanceof StandardDecryptionMaterial)) { throw new IOException(\"Decryption material is not compatible with the document\"); } setDecryptMetadata(encryption.isEncryptMetaData()); StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial; String password = material.getPassword(); if(password == null) { password = \"\"; } int dicPermissions = encryption.getPermissions(); int dicRevision = encryption.getRevision(); int dicLength = encryption.getVersion() == 1 ? 5 : encryption.getLength() / 8; byte[] documentIDBytes = getDocumentIDBytes(documentIDArray); boolean encryptMetadata = encryption.isEncryptMetaData(); byte[] userKey = encryption.getUserKey(); byte[] ownerKey = encryption.getOwnerKey(); byte[] ue = null, oe = null; Charset passwordCharset = Charsets.ISO_8859_1; if (dicRevision == 6 || dicRevision == 5) { passwordCharset = Charsets.UTF_8; ue = encryption.getUserEncryptionKey(); oe = encryption.getOwnerEncryptionKey(); } AccessPermission currentAccessPermission; if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey, dicPermissions, documentIDBytes, dicRevision, dicLength, encryptMetadata) ) { currentAccessPermission = AccessPermission.getOwnerAccessPermission(); setCurrentAccessPermission(currentAccessPermission); byte[] computedPassword; if (dicRevision == 6 || dicRevision == 5) { computedPassword = password.getBytes(passwordCharset); } else { computedPassword = getUserPassword(password.getBytes(passwordCharset), ownerKey, dicRevision, dicLength ); } encryptionKey = computeEncryptedKey( computedPassword, ownerKey, userKey, oe, ue, dicPermissions, documentIDBytes, dicRevision, dicLength, encryptMetadata, true ); } else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey, dicPermissions, documentIDBytes, dicRevision, dicLength, encryptMetadata) ) { currentAccessPermission = new AccessPermission(dicPermissions); <mask> encryptionKey = computeEncryptedKey( password.getBytes(passwordCharset), ownerKey, userKey, oe, ue, dicPermissions, documentIDBytes, dicRevision, dicLength, encryptMetadata, false ); } else { throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\"); } if (dicRevision == 6 || dicRevision == 5) { validatePerms(encryption, dicPermissions, encryptMetadata); } if (encryption.getVersion() == 4 || encryption.getVersion() == 5) { PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary(); if (stdCryptFilterDictionary != null) { COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod(); setAES(COSName.AESV2.equals(cryptFilterMethod) || COSName.AESV3.equals(cryptFilterMethod)); } } } </s> java",
      "function range": "2,1-95,1"
    },
    "VUL4J-20": {
      "loc": "6-6",
      "input": "<s> public float[] toFloatArray() { float[] retval = new float[size()]; for (int i = 0; i < size(); i++) { <mask> } return retval; } </s> java",
      "function range": "2,1-10,1"
    },
    "VUL4J-22": {
      "loc": "6-10",
      "input": "<s> public static String getContextPath(HttpServletRequest request) { String contextPath = (String) request.getAttribute(INCLUDE_CONTEXT_PATH_ATTRIBUTE); if (contextPath == null) { contextPath = request.getContextPath(); } <mask> } </s> java",
      "function range": "2,1-12,1"
    },
    "VUL4J-23": {
      "loc": "3-3",
      "input": "<s> @Override public String encodeForJSString(String source) { <mask> } </s> java",
      "function range": "2,1-5,1"
    },
    "VUL4J-25": {
      "loc": "5-25",
      "input": "<s> @Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { <mask> } return \"\"; } </s> java",
      "function range": "2,1-29,1"
    },
    "VUL4J-26": {
      "loc": "16-16",
      "input": "<s> public String getUrlRegex() { if (StringUtils.isNotEmpty(urlRegexExpression)) { return (String) parse(urlRegexExpression, String.class); } else if (StringUtils.isNotEmpty(urlRegex)) { return urlRegex; } else { return \"^(https?|ftp):\\\\/\\\\/\" + \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" + \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" + \"@)?(#?\" + \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" + \"[a-z][a-z0-9-]*[a-z0-9]\" + \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" + \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" + \")(:\\\\d+)?\" + <mask> \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" + \"?)?)?\" + \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" + \"$\"; } } </s> java",
      "function range": "2,1-23,1"
    },
    "VUL4J-30": {
      "loc": "7-7",
      "input": "<s> public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value == null || value.toString().length() == 0) { return; } <mask> addFieldError(fieldName, object); } } </s> java",
      "function range": "2,1-11,1"
    },
    "VUL4J-39": {
      "loc": "13-18",
      "input": "<s> @Override public String toString() { StringBuilder sb = new StringBuilder(); if (origin != null) { sb.append(\"remoteAddress=\").append(origin); } if (clientId != null) { if (sb.length() > 0) { sb.append(\", \"); } sb.append(\"clientId=\").append(clientId); } <mask> return sb.toString(); } </s> java",
      "function range": "2,1-21,1"
    },
    "VUL4J-40": {
      "loc": "15-15",
      "input": "<s> public boolean isAllowed(HttpServletRequest request) throws IOException { String requestBody = IOUtils.toString(request.getReader()); ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class); String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request)); String zoneId = IdentityZoneHolder.get().getId(); ScimUser scimUserFromDb; try { scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId); } catch (ScimResourceNotFoundException e) { return true; } if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) { return false; } <mask> return false; } if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) { return false; } if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) { return false; } if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) { return false; } return true; } </s> java",
      "function range": "2,1-29,1"
    },
    "VUL4J-41": {
      "loc": "7-7",
      "input": "<s> protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream, final String entryName, final Date entryDate, final boolean isDirectory, final Integer mode, String symlinkDestination ) throws IOException, ArchiverException { final File f = FileUtils.resolveFile( dir, entryName ); <mask> { if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) ) { return; } final File dirF = f.getParentFile(); if ( dirF != null ) { dirF.mkdirs(); } if ( !StringUtils.isEmpty( symlinkDestination ) ) { SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) ); } else if ( isDirectory ) { f.mkdirs(); } else { OutputStream out = null; try { out = new FileOutputStream( f ); IOUtil.copy( compressedInputStream, out ); out.close(); out = null; } finally { IOUtil.close( out ); } } f.setLastModified( entryDate.getTime() ); if ( !isIgnorePermissions() && mode != null && !isDirectory ) { ArchiveEntryUtils.chmod( f, mode ); } } catch ( final FileNotFoundException ex ) { getLogger().warn( \"Unable to expand to file \" + f.getPath() ); } } </s> java",
      "function range": "2,1-52,1"
    },
    "VUL4J-43": {
      "loc": "5-5",
      "input": "<s> public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { File outFile = new File(destDir, entry.getName()); <mask> outFile.mkdirs(); } else { outFile.getParentFile().mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } } </s> java",
      "function range": "2,1-15,1"
    },
    "VUL4J-44": {
      "loc": "6-6",
      "input": "<s> public String encodeCharacter( char[] immune, Character c ) { String cStr = String.valueOf(c.charValue()); byte[] bytes; StringBuilder sb; <mask> return cStr; bytes = toUtf8Bytes(cStr); sb = new StringBuilder(bytes.length * 3); for(byte b : bytes) appendTwoUpperHex(sb.append('%'), b); return sb.toString(); } </s> java",
      "function range": "2,1-14,1"
    },
    "VUL4J-46": {
      "loc": "10-10",
      "input": "<s> protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem) { super(oc); _xmlParserFeatures = xpFeatures; _xmlGeneratorFeatures = xgFeatures; _cfgNameForTextElement = nameForTextElem; if (xmlIn == null) { <mask> } if (xmlOut == null) { xmlOut = XMLOutputFactory.newInstance(); } _initFactories(xmlIn, xmlOut); _xmlInputFactory = xmlIn; _xmlOutputFactory = xmlOut; } </s> java",
      "function range": "2,1-19,1"
    },
    "VUL4J-47": {
      "loc": "12-12",
      "input": "<s> protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem) { super(oc); _xmlParserFeatures = xpFeatures; _xmlGeneratorFeatures = xgFeatures; _cfgNameForTextElement = nameForTextElem; if (xmlIn == null) { xmlIn = XMLInputFactory.newInstance(); xmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE); <mask> if (xmlOut == null) { xmlOut = XMLOutputFactory.newInstance(); } _initFactories(xmlIn, xmlOut); _xmlInputFactory = xmlIn; _xmlOutputFactory = xmlOut; } </s> java",
      "function range": "2,1-20,1"
    },
    "VUL4J-50": {
      "loc": "31-31",
      "input": "<s> private void writeSession(SessionInformations session, boolean displayUser) throws IOException { final String nextColumnAlignRight = \"</td><td align='right'>\"; final String nextColumnAlignCenter = \"</td><td align='center'>\"; write(\"<td><a href='?part=sessions&amp;sessionId=\"); write(htmlEncodeButNotSpace(session.getId())); write(\"'>\"); write(htmlEncodeButNotSpace(session.getId())); write(\"</a>\"); write(nextColumnAlignRight); write(durationFormat.format(session.getLastAccess())); write(nextColumnAlignRight); write(durationFormat.format(session.getAge())); write(nextColumnAlignRight); write(expiryFormat.format(session.getExpirationDate())); write(nextColumnAlignRight); write(integerFormat.format(session.getAttributeCount())); write(nextColumnAlignCenter); if (session.isSerializable()) { write(\"#oui#\"); } else { write(\"<span class='severe'>#non#</span>\"); } write(nextColumnAlignRight); write(integerFormat.format(session.getSerializedSize())); final String nextColumn = \"</td><td>\"; write(nextColumn); final String remoteAddr = session.getRemoteAddr(); if (remoteAddr == null) { write(\"&nbsp;\"); } else { <mask> } write(nextColumnAlignCenter); writeCountry(session); if (displayUser) { write(nextColumn); final String remoteUser = session.getRemoteUser(); if (remoteUser == null) { write(\"&nbsp;\"); } else { writeDirectly(htmlEncodeButNotSpace(remoteUser)); } } write(\"</td><td align='center' class='noPrint'>\"); write(A_HREF_PART_SESSIONS); write(\"&amp;action=invalidate_session&amp;sessionId=\"); write(urlEncode(session.getId())); write(\"' onclick=\\\"javascript:return confirm('\" + getStringForJavascript(\"confirm_invalidate_session\") + \"');\\\">\"); write(\"<img width='16' height='16' src='?resource=user-trash.png' alt='#invalidate_session#' title='#invalidate_session#' />\"); write(\"</a>\"); write(\"</td>\"); } </s> java",
      "function range": "2,1-54,1"
    },
    "VUL4J-53": {
      "loc": "2-2",
      "input": "<s> void setTo(Calendar c, int i) { <mask> } </s> java",
      "function range": "2,1-4,1"
    },
    "VUL4J-55": {
      "loc": "21-21",
      "input": "<s> public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); <mask> continue OUTER; } } return cal; } } </s> java",
      "function range": "2,1-28,1"
    },
    "VUL4J-57": {
      "loc": "9-9",
      "input": "<s> @SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } <mask> throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName()))); List<Action> actions = new ArrayList<>(); if (step.getWait()) { StepContext context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); List<ParameterValue> parameters = step.getParameters(); if (parameters != null) { parameters = completeDefaultParameters(parameters, (Job) project); actions.add(new ParametersAction(parameters)); } Integer quietPeriod = step.getQuietPeriod(); if (quietPeriod == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"Failed to trigger build of \" + project.getFullName()); } } else if (item instanceof Queue.Task){ if (step.getParameters() != null && !step.getParameters().isEmpty()) { throw new AbortException(\"Item type does not support parameters\"); } Queue.Task task = (Queue.Task) item; listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName()))); List<Action> actions = new ArrayList<>(); if (step.getWait()) { StepContext context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); Integer quietPeriod = step.getQuietPeriod(); if (quietPeriod == null) { try { Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\"); if (getQuietPeriod.getReturnType().equals(int.class)) { quietPeriod = (Integer) getQuietPeriod.invoke(task); } } catch (NoSuchMethodException e) { } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) { LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e); } } if (quietPeriod == null) { quietPeriod = Jenkins.getActiveInstance().getQuietPeriod(); } ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions); if (scheduleResult.isRefused()) { throw new AbortException(\"Failed to trigger build of \" + item.getFullName()); } } else { throw new AbortException(\"The item named \" + job + \" is a \" + (item instanceof Describable ? ((Describable) item).getDescriptor().getDisplayName() : item.getClass().getName()) + \" which is not something that can be built\"); } if (step.getWait()) { return false; } else { getContext().onSuccess(null); return true; } } </s> java",
      "function range": "2,1-89,1"
    },
    "VUL4J-59": {
      "loc": "27-27",
      "input": "<s> void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case ' ': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); <mask> break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } } </s> java",
      "function range": "2,1-46,1"
    },
    "VUL4J-61": {
      "loc": "9-9",
      "input": "<s> private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception { if (config == null) config = Collections.emptyMap(); boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true); List<MapResult> result = new ArrayList<>(); try { DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance(); documentBuilderFactory.setNamespaceAware(true); documentBuilderFactory.setIgnoringElementContentWhitespace(true); <mask> FileUtils.checkReadAllowed(url); Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() ); Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null)); XPathFactory xPathFactory = XPathFactory.newInstance(); XPath xPath = xPathFactory.newXPath(); path = StringUtils.isEmpty(path) ? \"/\" : path; XPathExpression xPathExpression = xPath.compile(path); NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET); for (int i = 0; i < nodeList.getLength(); i++) { final Deque<Map<String, Object>> stack = new LinkedList<>(); handleNode(stack, nodeList.item(i), simpleMode); for (int index = 0; index < stack.size(); index++) { result.add(new MapResult(stack.pollFirst())); } } } catch (FileNotFoundException e){ if(!failOnError) return Stream.of(new MapResult(Collections.emptyMap())); else throw new FileNotFoundException(e.getMessage()); } catch (Exception e){ if(!failOnError) return Stream.of(new MapResult(Collections.emptyMap())); else throw new Exception(e); } return result.stream(); } </s> java",
      "function range": "2,1-41,1"
    },
    "VUL4J-64": {
      "loc": "5-5",
      "input": "<s> final static private XMLStreamReader createXMLStreamReader(InputStream inputStream) throws XMLStreamException, IOException { XMLInputFactory factory = XMLInputFactory.newInstance(); factory.setProperty(XMLInputFactory.IS_COALESCING, true); factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true); <mask> } </s> java",
      "function range": "2,1-7,1"
    },
    "VUL4J-65": {
      "loc": "7-7",
      "input": "<s> static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); <mask> String prefix = dot < 0 ? name : name.substring(0, dot); String suffix = dot < 0 ? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; } </s> java",
      "function range": "2,1-17,1"
    },
    "VUL4J-66": {
      "loc": "21-21",
      "input": "<s> protected static boolean isValid(String str) { if (str == null || str.length() == 0) return false; for (int i = 0; i < str.length(); i++) { switch (str.charAt(i)) { case '/': case '\\\\': case '?': case ':': case '<': case '>': case ';': case '(': case ')': case '@': case ',': case '[': case ']': case '=': <mask> default: break; } } return true; } </s> java",
      "function range": "2,1-28,1"
    },
    "VUL4J-73": {
      "loc": "2-2",
      "input": "<s> public boolean isPasswordValid(String encPass, String rawPass, Object salt) { <mask> String pass2 = mergePasswordAndSalt(rawPass, salt, false); if (ignorePasswordCase) { pass1 = pass1.toLowerCase(Locale.ENGLISH); pass2 = pass2.toLowerCase(Locale.ENGLISH); } return PasswordEncoderUtils.equals(pass1, pass2); } </s> java",
      "function range": "2,1-11,1"
    },
    "VUL4J-74": {
      "loc": "3-9",
      "input": "<s> public SecureRandom getObject() throws Exception { SecureRandom rnd = SecureRandom.getInstance(algorithm); <mask> return rnd; } </s> java",
      "function range": "2,1-13,1"
    }
  }
}