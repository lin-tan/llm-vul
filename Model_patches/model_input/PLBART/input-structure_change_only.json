{
  "config": "PLBART_SEQFORM_MASKFORM_NOCOMMENT",
  "data": {
    "Netty-1": {
      "loc": "10-10",
      "input": "<s> private void splitHeader(AppendableCharSequence sb) { final int length = sb.length(); int nameStart; int nameEnd; nameStart = findNonWhitespace(sb, 0); nameEnd = nameStart; while( nameEnd < length) { char ch = sb.charAtUnsafe(nameEnd); <mask> nameEnd ++; }else{ break; } } int colonEnd; colonEnd = nameEnd; while ( colonEnd < length) { if (sb.charAtUnsafe(colonEnd) != ':') { colonEnd ++; }else{ colonEnd ++; break; } } int valueStart; int valueEnd; name = sb.subStringUnsafe(nameStart, nameEnd); valueStart = findNonWhitespace(sb, colonEnd); if (valueStart != length) { valueEnd = findEndOfString(sb); value = sb.subStringUnsafe(valueStart, valueEnd); } else{ value = EMPTY_VALUE; } } </s> java",
      "function range": "2,5-42,5"
    },
    "Netty-2": {
      "loc": "18-18",
      "input": "<s> private void splitHeader(AppendableCharSequence sb) { final int length = sb.length(); int nameStart; int nameEnd; nameStart = findNonWhitespace(sb, 0); nameEnd = nameStart; while( nameEnd < length) { char ch = sb.charAtUnsafe(nameEnd); if (ch != ':' && (isDecodingRequest() || !Character.isWhitespace(ch))) { nameEnd ++; }else{ break; } } <mask> colonEnd = nameEnd; while ( colonEnd < length) { if (sb.charAtUnsafe(colonEnd) != ':') { colonEnd ++; }else{ colonEnd ++; break; } } int valueStart; int valueEnd; name = sb.subStringUnsafe(nameStart, nameEnd); valueStart = findNonWhitespace(sb, colonEnd); if (valueStart != length) { valueEnd = findEndOfString(sb); value = sb.subStringUnsafe(valueStart, valueEnd); } else{ value = EMPTY_VALUE; } } </s> java",
      "function range": "2,5-42,5"
    },
    "Jenkins-1": {
      "loc": "6-12",
      "input": "<s> @Exported(inline=true) public Map<String,Object> getMonitorData() { List<NodeMonitor> nodeMonitorList = NodeMonitor.getAll(); Map<String,Object> r = new HashMap<String, Object>(); int i = 0; <mask> return r; } </s> java",
      "function range": "2,1-15,1"
    },
    "Jenkins-2": {
      "loc": "4-16",
      "input": "<s> @Exported(name=\"jobs\") public List<TopLevelItem> getItems() { Collection<TopLevelItem> itemValues = items.values(); <mask> } </s> java",
      "function range": "2,1-18,1"
    },
    "Jenkins-3": {
      "loc": "38-40",
      "input": "<s> <mask> </s> java",
      "function range": "39,17-41,17"
    },
    "Jinjava-1": {
      "loc": "4-4",
      "input": "<s>  </s> java",
      "function range": ""
    },
    "Halo-1": {
      "loc": "6-6",
      "input": "<s> public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(pathToCheck, \"Path to check must not be null\"); Assert.notNull(parentPath, \"Parent path must not be null\"); Path normalizedParentPath = parentPath.normalize(); <mask> ForbiddenException e = new ForbiddenException(\"You do not have permission to access \" + pathToCheck); e.setErrorData(pathToCheck); throw e; } } </s> java",
      "function range": "2,1-13,1"
    },
    "Retrofit-1": {
      "loc": "3-3",
      "input": "<s> JaxbResponseConverter(JAXBContext context, Class<T> type) { this.type = type; <mask> } </s> java",
      "function range": "2,3-5,3"
    },
    "Quartz-1": {
      "loc": "15-15",
      "input": "<s> protected void initDocumentParser() throws ParserConfigurationException { Object source = resolveSchemaSource(); DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance(); docBuilderFactory.setValidating(true); docBuilderFactory.setNamespaceAware(true); docBuilderFactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\", \"http://www.w3.org/2001/XMLSchema\"); docBuilderFactory.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaSource\", source); <mask> docBuilder.setErrorHandler(this); NamespaceContext nsContext = new NamespaceContext() { public String getPrefix(String namespaceURI) { throw new UnsupportedOperationException(); } public String getNamespaceURI(String prefix) { if (prefix != null){ switch(prefix){ case XMLConstants.XML_NS_PREFIX: return XMLConstants.XML_NS_URI; case \"q\": return QUARTZ_NS; case XMLConstants.XMLNS_ATTRIBUTE: return XMLConstants.XMLNS_ATTRIBUTE_NS_URI; default: break; } return XMLConstants.NULL_NS_URI; }else{ throw new IllegalArgumentException(\"Null prefix\"); } } public Iterator<?> getPrefixes(String namespaceURI) { throw new UnsupportedOperationException(); } }; XPathFactory xpathFactory = XPathFactory.newInstance(); xpath = xpathFactory.newXPath(); xpath.setNamespaceContext(nsContext); } </s> java",
      "function range": "2,5-58,5"
    },
    "Flow-1": {
      "loc": "8-8",
      "input": "<s> public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) { String requestFilename = request.getPathInfo(); <mask> requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename; String requestMethodname = request.getMethod(); HttpURLConnection connection = prepareConnection(requestFilename, requestMethodname); for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) { String header = headerNames.nextElement(); String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header); connection.setRequestProperty(header, value); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode != HTTP_NOT_FOUND) { getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header != null) { response.addHeader(header, values.get(0)); } }); if (responseCode != HTTP_OK) { if(responseCode >= 400){ response.sendError(responseCode); }else{ response.setStatus(responseCode); } } else { writeStream(response.getOutputStream(), connection.getInputStream()); } response.getOutputStream().close(); return true; }else{ getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } }else{ getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } }else{ return false; } } </s> java",
      "function range": "2,5-75,5"
    },
    "Flow-2": {
      "loc": "17-20",
      "input": "<s> @Override public int setErrorParameter(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter) { String additionalInfo = parameter.hasCustomMessage()? \"Reason: \" + parameter.getCustomMessage():\"\"; Location location = event.getLocation(); String path = location.getPath(); path = Jsoup.clean(path, Whitelist.none()); additionalInfo = Jsoup.clean(additionalInfo, Whitelist.none()); UI ui = event.getUI(); VaadinSession session = ui.getSession(); DeploymentConfiguration config = session.getConfiguration(); boolean productionMode = config.isProductionMode(); String template = getErrorHtml(productionMode); <mask> com.vaadin.flow.dom.Element element = getElement(); Html html = new Html(template); element.appendChild(html.getElement()); return HttpServletResponse.SC_NOT_FOUND; } </s> java",
      "function range": "2,5-27,5"
    },
    "BC-Java-1": {
      "loc": "6-6",
      "input": "<s> private BigInteger[] derDecode( byte[] encoding) throws IOException { ASN1Sequence s = (ASN1Sequence)ASN1Primitive.fromByteArray(encoding); <mask> BigInteger bigInteger0 = ((ASN1Integer) object0).getValue(); ASN1Encodable object1 = s.getObjectAt(1); BigInteger bigInteger1 = ((ASN1Integer) object1).getValue(); return new BigInteger[]{ bigInteger0, bigInteger1 }; } </s> java",
      "function range": "2,5-15,5"
    },
    "Json-sanitizer-1": {
      "loc": "29-35",
      "input": "<s> private void sanitizeString(int start, int end) { boolean closed = false; int i = start; while ( i < end) { char ch = jsonish.charAt(i); if(ch== '\\u2028'){ replace(i, i + 1, \"\\\\u2028\"); } else if( ch=='\"'|| ch== '\\''){ if (i != start) { if (i + 1 == end) { char startDelim = jsonish.charAt(start); if (startDelim != '\\'') { startDelim = '\"'; } closed = startDelim == ch; } if(!closed){ if(ch == '\"'){ insert(i, '\\\\'); } }else{ if (ch == '\\'') { replace(i, i + 1, '\"'); } } } else { if (ch == '\\'') { replace(i, i + 1, '\"'); } } } <mask> else if(ch=='\\r'){ replace(i, i + 1, \"\\\\r\");} else if(ch=='\\u2029'){ replace(i, i + 1, \"\\\\u2029\"); } else if(ch== '\\\\'){ if (i + 1 != end) { char sch = jsonish.charAt(i + 1); if( sch =='b'||sch == 'f'|| sch == 'n'||sch =='r'||sch == 't'||sch == '\\\\'|| sch == '/'|| sch == '\"'){ ++i; } else if( sch == 'v'){ replace(i, i + 2, \"\\\\u0008\"); ++i; } else if( sch == 'x'){ if (i + 4 >= end || !isHexAt(i+2) || !isHexAt(i+3)) { elide(i, i + 1); }else{ replace(i, i + 2, \"\\\\u00\"); i += 3; } } else if( sch == 'u'){ if (i + 6 >= end || !isHexAt(i + 2) || !isHexAt(i + 3) || !isHexAt(i + 4) || !isHexAt(i + 5)) { elide(i, i + 1); }else{ i += 5; } } else if( sch == '0'|| sch == '1'|| sch == '2'|| sch == '3'|| sch == '4'||sch == '5'|| sch == '6'|| sch == '7'){ int octalEnd = i + 1; if (octalEnd + 1 < end && isOctAt(octalEnd + 1)) { ++octalEnd; if (ch <= '3' && octalEnd + 1 < end && isOctAt(octalEnd + 1)) { ++octalEnd; } int value = 0; int j = i; while ( j < octalEnd) { value = (value << 3) | (jsonish.charAt(j) - '0'); j++; } replace(i + 1, octalEnd, \"u00\"); appendHex(value, 2); } i = octalEnd - 1; }else{ elide(i, i + 1); } }else{ elide(i, i + 1); i++; continue; } } else if(ch== ']'){ if (i + 2 < end && ']' == jsonish.charAt(i + 1) && '>' == jsonish.charAt(i + 2)) { replace(i, i + 1, \"\\\\u005d\"); } }else if(ch== '\\n'){ replace(i, i + 1, \"\\\\n\"); } else{ if (ch >= 0x20) { if (ch >= 0xd800) { if (ch >= 0xe000) { if (ch <= 0xfffd) { i++; continue; } } else{ if (Character.isHighSurrogate(ch) && i+1 < end && Character.isLowSurrogate(jsonish.charAt(i+1))) { ++i; i++; continue; } } } else{ i++; continue; } }else{ if (ch == 9 || ch == 0xa || ch == 0xd) { i++;continue; } } replace(i, i + 1, \"\\\\u\"); int j = 4; while ( --j >= 0) { sanitizedJson.append(HEX_DIGITS[(ch >>> (j << 2)) & 0xf]); } } i++; } if (closed) { return; }else{ insert(end, '\"'); } } </s> java",
      "function range": "2,3-144,3"
    },
    "Ratpack-1": {
      "loc": "37-37",
      "input": "<s> private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception { DecoderResult decoderResult = nettyRequest.decoderResult(); if (decoderResult.isSuccess()) { HttpHeaders httpHeaders = nettyRequest.headers(); Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders); Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L); boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING) != null); RequestBody requestBody; if(!hasBody){ requestBody = null; }else{ requestBody = new RequestBody(contentLength, nettyRequest, ctx); } Channel channel = ctx.channel(); if (requestBody != null) { channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody); } X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get(); Instant instant = clock.instant(); DefaultRequest request = new DefaultRequest( instant, requestHeaders, nettyRequest.method(), nettyRequest.protocolVersion(), nettyRequest.uri(), (InetSocketAddress) channel.remoteAddress(), (InetSocketAddress) channel.localAddress(), serverRegistry.get(ServerConfig.class), requestBody, ConnectionIdleTimeout.of(channel), clientCertificate ); <mask> MutableHeaders responseHeaders = new NettyHeadersBackedMutableHeaders(nettyHeaders); AtomicBoolean transmitted = new AtomicBoolean(false); DefaultResponseTransmitter responseTransmitter = new DefaultResponseTransmitter(transmitted, channel, clock, nettyRequest, request, nettyHeaders, requestBody); Channel ctxChannel = ctx.channel(); ctxChannel.attr(DefaultResponseTransmitter.ATTRIBUTE_KEY).set(responseTransmitter); DefaultContext.RequestConstants requestConstants = new DefaultContext.RequestConstants( applicationConstants, request, channel, responseTransmitter, thing -> { transmitted.set(true); ctx.channel().attr(CHANNEL_SUBSCRIBER_ATTRIBUTE_KEY).set(thing); } ); ByteBufAllocator byteBufAllocator = ctx.alloc(); Response response = new DefaultResponse(responseHeaders, byteBufAllocator, responseTransmitter); requestConstants.response = response; EventLoop eventLoop = channel.eventLoop(); DefaultContext.start(eventLoop, requestConstants, serverRegistry, handlers, execution -> { if (!transmitted.get()) { Handler lastHandler = requestConstants.handler; StringBuilder description = new StringBuilder(); description.append(\"No response sent for \"); String name = request.getMethod().getName(); description.append(name); description.append(\" request to \"); String uri = request.getUri(); description.append(uri); if (lastHandler != null) { description.append(\" (last handler: \"); if (!(lastHandler instanceof DescribingHandler)) { DescribingHandlers.describeTo(lastHandler, description); } else { ((DescribingHandler) lastHandler).describeTo(description); } description.append(\")\"); } String message = description.toString(); LOGGER.warn(message); response.getHeaders().clear(); ByteBuf body; if (!development) { body = Unpooled.EMPTY_BUFFER; } else { ByteBufAllocator byteBufAllocator2 = ctx.alloc(); CharBuffer charBuffer = CharBuffer.wrap(message); body = ByteBufUtil.encodeString(byteBufAllocator2, charBuffer, CharsetUtil.UTF_8); response.contentType(HttpHeaderConstants.PLAIN_TEXT_UTF8); } int num = body.readableBytes(); response.getHeaders().set(HttpHeaderConstants.CONTENT_LENGTH, num); responseTransmitter.transmit(HttpResponseStatus.INTERNAL_SERVER_ERROR, body); } }); }else{ LOGGER.debug(\"Failed to decode HTTP request.\", decoderResult.cause()); sendError(ctx, HttpResponseStatus.BAD_REQUEST); return; } } </s> java",
      "function range": "2,2-110,3"
    },
    "Pulsar-1": {
      "loc": "40-40",
      "input": "<s> protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId, boolean authoritative) { try { validateTopicOwnership(topicName, authoritative); validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES); if (topicName.isGlobal()) { validateGlobalNamespaceOwnership(namespaceName); } AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() { @Override public void readEntryComplete(Entry entry, Object ctx) { try { Response response = generateResponseWithEntry(entry); asyncResponse.resume(response); } catch (IOException exception) { RestException restException = new RestException(exception); asyncResponse.resume(restException); } finally { if (entry == null) { return; }else{ entry.release(); } } } @Override public void readEntryFailed(ManagedLedgerException exception, Object ctx) { RestException restException = new RestException(exception); asyncResponse.resume(restException); } }; PositionImpl positionImpl = new PositionImpl(ledgerId, entryId); <mask> .asyncReadEntry(positionImpl,readEntryCallback , null); } catch (NullPointerException npe) { RestException restException = new RestException(Status.NOT_FOUND, \"Message not found\"); asyncResponse.resume(restException); } catch (Exception exception) { String id = clientAppId(); log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\", id , ledgerId, entryId, topicName, exception); RestException restException = new RestException(exception); asyncResponse.resume(restException); } } </s> java",
      "function range": "3,5-53,5"
    },
    "VUL4J-1": {
      "loc": "59-59",
      "input": "<s> @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) { final JSONLexer lexer = parser.lexer; switch (lexer.token()) { case JSONToken.LITERAL_STRING: byte[] bytes = lexer.bytesValue(); lexer.nextToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: lexer.nextToken(JSONToken.COMMA); return null; default: break; } JSONArray array = new JSONArray(); Class componentClass; Type componentType; if (!(type instanceof GenericArrayType)) { componentType = ((Class) type).getComponentType(); componentClass = ((Class) type).getComponentType(); } else { componentType = ((GenericArrayType) type).getGenericComponentType(); if (! (componentType instanceof TypeVariable)) { componentClass = TypeUtils.getClass(componentType); } else { TypeVariable typeVar = (TypeVariable) componentType; Type objType = parser.getContext().type; if (!(objType instanceof ParameterizedType)) { Type type_ = typeVar.getBounds()[0]; componentClass = TypeUtils.getClass(type_); } else { ParameterizedType objParamType = (ParameterizedType) objType; Type objRawType = objParamType.getRawType(); Type actualType = null; if (objRawType instanceof Class) { TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters(); int i = 0; while( i < objTypeParams.length) { String i_name = objTypeParams[i].getName(); String typeVar_name = typeVar.getName(); if (!i_name.equals(typeVar_name)) { i++; continue; } actualType = objParamType.getActualTypeArguments()[i]; i++; } } componentClass = (actualType instanceof Class)? (Class) actualType:Object.class; } } } <mask> return (T) toObjectArray(parser, componentClass, array); } </s> java",
      "function range": "2,5-63,5"
    },
    "VUL4J-3": {
      "loc": "21-21",
      "input": "<s> @Converter public SAXSource toSAXSourceFromStream(StreamSource source, Exchange exchange) throws SAXException { XMLReader xmlReader = null; SAXParserFactory sfactory = null; try { if (!(exchange == null)) { sfactory = exchange.getProperty(Exchange.SAXPARSER_FACTORY, SAXParserFactory.class); } if (sfactory != null) { sfactory.setNamespaceAware(true); xmlReader = sfactory.newSAXParser().getXMLReader(); }else{ sfactory = SAXParserFactory.newInstance(); try { sfactory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true); } catch (Exception e) { LOG.warn(\"SAXParser doesn't support the feature {} with value {}, due to {}.\", new Object[]{javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, \"true\", e}); } <mask> xmlReader = sfactory.newSAXParser().getXMLReader(); } } catch (Exception ex) { LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex); } Reader reader = source.getReader(); InputSource inputSource = reader == null? new InputSource(source.getInputStream()):new InputSource(reader); String systemId = source.getSystemId(); inputSource.setSystemId(systemId); String publicId = source.getPublicId(); inputSource.setPublicId(publicId); return new SAXSource(xmlReader, inputSource); } </s> java",
      "function range": "2,1-37,1"
    },
    "VUL4J-4": {
      "loc": "18-38",
      "input": "<s> protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body != null) { Class<?> type = getDocumentType(); Exception cause = null; Object answer = null; if (type != null) { try { CamelContext context = exchange.getContext(); TypeConverter typeConverter = context.getTypeConverter(); answer = typeConverter.convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } <mask> if (type != null || answer != null) { if (answer == null) { if (cause == null) { throw new NoTypeConversionAvailableException(body, type); } else { throw cause; } } }else{ answer = body; } return answer; } return null; } </s> java",
      "function range": "2,1-56,1"
    },
    "VUL4J-5": {
      "loc": "9-9",
      "input": "<s> private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); <mask> if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.isDirectory() || parent.mkdirs()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.isDirectory() || f.mkdirs()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } } </s> java",
      "function range": "2,5-40,5"
    },
    "VUL4J-6": {
      "loc": "17-17",
      "input": "<s> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) { this.rcount = ZipLong.getValue(data, offset + 8); this.flags = ZipShort.getValue(data, offset + 6); this.format = ZipShort.getValue(data, offset); this.bitlen = ZipShort.getValue(data, offset + 4); int zv2 = ZipShort.getValue(data, offset + 2); this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2); if (rcount <= 0) { return; } this.hashSize = ZipShort.getValue(data, offset + 14); int zv12 = ZipShort.getValue(data, offset + 12); this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12); <mask> while ( i < this.rcount) { i++; int j = 0; while ( j < this.hashSize) { j++; } } } </s> java",
      "function range": "2,3-26,5"
    },
    "VUL4J-7": {
      "loc": "17-17",
      "input": "<s> private int readStored(final byte[] buffer, final int offset, final int length) throws IOException { if (!current.hasDataDescriptor) { final long csize = current.entry.getSize(); if (current.bytesRead < csize) { if (buf.position() >= buf.limit()) { buf.position(0); byte[] bufArray = buf.array(); final int l = in.read(bufArray); if (l != -1) { buf.limit(l); count(l); current.bytesReadFromStream += l; }else{ <mask> } } int bufRemaining = buf.remaining(); int toRead = Math.min(bufRemaining, length); if ((csize - current.bytesRead) < toRead) { toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); current.bytesRead += toRead; return toRead; }else{ return -1; } }else{ if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } } </s> java",
      "function range": "2,5-45,5"
    },
    "VUL4J-8": {
      "loc": "19-19",
      "input": "<s> @Override public ByteBuffer encode(final String name) { final CharBuffer cb = CharBuffer.wrap(name); int initial_cbr = cb.remaining(); final CharsetEncoder enc = newEncoder(); int size = estimateInitialBufferSize(enc, initial_cbr); ByteBuffer out = ByteBuffer.allocate(size); CharBuffer tmp = null; while (cb.remaining() > 0) { final CoderResult res = enc.encode(cb, out, false); if (!res.isUnmappable() && !res.isMalformed()) { if (res.isOverflow()) { int cbr = cb.remaining(); out = ZipEncodingHelper.growBufferBy(out, estimateIncrementalEncodingSize(enc, cbr)); <mask> }else{ int l = 6 * res.length(); int spaceForSurrogate = estimateIncrementalEncodingSize(enc,l ); if (spaceForSurrogate > out.remaining()) { int charCount = 0; int i = cb.position() ; while ( i < cb.limit() ) { if(enc.canEncode(cb.get(i))){ charCount +=1; }else{ charCount +=6; } i++; } int outRemaining = out.remaining(); out = ZipEncodingHelper.growBufferBy(out, estimateIncrementalEncodingSize(enc, charCount) - outRemaining); } tmp = tmp == null? CharBuffer.allocate(6):tmp; int i = 0; while ( i < res.length()) { CharBuffer encodeSurrogateCharBuffer = encodeSurrogate(tmp, cb.get()); out = encodeFully(enc, encodeSurrogateCharBuffer, out); ++i; } } } enc.encode(cb, out, true); out.limit(out.position()); out.rewind(); return out; } </s> java",
      "function range": "2,1-56,1"
    },
    "VUL4J-10": {
      "loc": "4-4",
      "input": "<s> private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { in.defaultReadObject(); <mask> if (cachedContent == null) { IOUtils.copy(new FileInputStream(dfosFile), output); dfosFile.delete(); dfosFile = null; } else { output.write(cachedContent); } output.close(); cachedContent = null; } </s> java",
      "function range": "2,1-16,1"
    },
    "VUL4J-12": {
      "loc": "2-4",
      "input": "<s> private int extend(int v, final int t) { <mask> return v; } </s> java",
      "function range": "2,1-7,1"
    },
    "VUL4J-18": {
      "loc": "3-4",
      "input": "<s> public String getForwardPage( HttpServletRequest request ) { <mask> } </s> java",
      "function range": "2,1-6,1"
    },
    "VUL4J-19": {
      "loc": "57-57",
      "input": "<s> @Override public void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray, DecryptionMaterial decryptionMaterial) throws IOException { if((decryptionMaterial instanceof StandardDecryptionMaterial)) { byte[] userKey = encryption.getUserKey(); byte[] ownerKey = encryption.getOwnerKey(); StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial; String password = material.getPassword(); boolean encryptMetadata = encryption.isEncryptMetaData(); setDecryptMetadata(encryptMetadata); if(password == null){ password = \"\"; } int dicLength = 0; if(encryption.getVersion() != 1 ){ dicLength = encryption.getLength() / 8; }else{ dicLength = 5; } byte[] documentIDBytes = getDocumentIDBytes(documentIDArray); int dicPermissions = encryption.getPermissions(); int dicRevision = encryption.getRevision(); byte[] ue = null; byte[] oe = null; Charset passwordCharset = Charsets.ISO_8859_1; if (dicRevision == 6 || dicRevision == 5) { passwordCharset = Charsets.UTF_8; ue = encryption.getUserEncryptionKey(); oe = encryption.getOwnerEncryptionKey(); } byte[] passwordByteArray = password.getBytes(passwordCharset); if( !isOwnerPassword(passwordByteArray, userKey, ownerKey, dicPermissions, documentIDBytes, dicRevision, dicLength, encryptMetadata) ) { if( !isUserPassword(passwordByteArray, userKey, ownerKey, dicPermissions, documentIDBytes, dicRevision, dicLength, encryptMetadata) ) { throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\"); } else { <mask> encryptionKey = computeEncryptedKey( passwordByteArray, ownerKey, userKey, oe, ue, dicPermissions,documentIDBytes, dicRevision,dicLength, encryptMetadata, false ); } }else{ setCurrentAccessPermission(AccessPermission.getOwnerAccessPermission()); byte[] computedPassword; if ( dicRevision != 6 && dicRevision != 5) { computedPassword = getUserPassword(passwordByteArray, ownerKey, dicRevision, dicLength ); } else { computedPassword = passwordByteArray; } encryptionKey = computeEncryptedKey(computedPassword, ownerKey, userKey, oe, ue, dicPermissions, documentIDBytes, dicRevision,dicLength, encryptMetadata, true ); } if (dicRevision == 6 || dicRevision == 5) { validatePerms(encryption, dicPermissions, encryptMetadata); } if (encryption.getVersion() != 4 && encryption.getVersion() != 5) { return; }else{ PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary(); if (stdCryptFilterDictionary == null) { return; } COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod(); boolean aesv2 = COSName.AESV2.equals(cryptFilterMethod); boolean aesv3 = COSName.AESV3.equals(cryptFilterMethod); setAES( aesv2 || aesv3 ); } }else{ throw new IOException(\"Decryption material is not compatible with the document\"); } } </s> java",
      "function range": "2,1-112,1"
    },
    "VUL4J-20": {
      "loc": "9-10",
      "input": "<s> public float[] toFloatArray() { int size = size(); float[] retval = new float[size]; int i = 0; while( i < size ) { <mask> i++; } return retval; } </s> java",
      "function range": "3,5-15,5"
    },
    "VUL4J-22": {
      "loc": "5-8",
      "input": "<s> public static String getContextPath(HttpServletRequest request) { String contextPath = (String) request.getAttribute(INCLUDE_CONTEXT_PATH_ATTRIBUTE); contextPath = contextPath == null? request.getContextPath(): contextPath; <mask> } </s> java",
      "function range": "2,5-10,5"
    },
    "VUL4J-23": {
      "loc": "4-4",
      "input": "<s> @Override public String encodeForJSString(String source) { if( source != null ){ <mask> } return null; } </s> java",
      "function range": "2,1-8,1"
    },
    "VUL4J-25": {
      "loc": "8-25",
      "input": "<s> @Override @Nonnull public String getValidHref(final String url) { if (!StringUtils.isNotEmpty(url)) { return \"\"; } <mask> return \"\"; } </s> java",
      "function range": "2,1-29,1"
    },
    "VUL4J-26": {
      "loc": "13-13",
      "input": "<s> public String getUrlRegex() { if (!StringUtils.isNotEmpty(urlRegexExpression)) { if (!StringUtils.isNotEmpty(urlRegex)) { return \"^(https?|ftp):\\\\/\\\\/\" + \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" + \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" + \"@)?(#?\" + \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" + \"[a-z][a-z0-9-]*[a-z0-9]\" + \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" + \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" + \")(:\\\\d+)?\" + <mask> \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" + \"?)?)?\" + \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" + \"$\"; } else { return urlRegex; } }else{ return (String) parse(urlRegexExpression, String.class); } } </s> java",
      "function range": "2,1-26,1"
    },
    "VUL4J-30": {
      "loc": "8-8",
      "input": "<s> public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value != null && value.toString().length() != 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); <mask> Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } } </s> java",
      "function range": "2,1-16,1"
    },
    "VUL4J-39": {
      "loc": "13-17",
      "input": "<s> @Override public String toString() { StringBuilder sb = new StringBuilder(); sb= origin != null? sb.append(\"remoteAddress=\").append(origin):sb; if (clientId != null) { sb =sb.length() > 0?sb.append(\", \"):sb; sb.append(\"clientId=\"); sb.append(clientId); } <mask> return sb.toString(); } </s> java",
      "function range": "2,5-20,5"
    },
    "VUL4J-40": {
      "loc": "22-22",
      "input": "<s> public boolean isAllowed(HttpServletRequest request) throws IOException { BufferedReader reader = request.getReader(); ScimUser scimUserFromRequest = JsonUtils.readValue(IOUtils.toString(reader), ScimUser.class); String pathInfo = UaaUrlUtils.getRequestPath(request); IdentityZone zone = IdentityZoneHolder.get(); ScimUser scimUserFromDb; try { scimUserFromDb = scimUserProvisioning.retrieve( UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, pathInfo), zone.getId()); } catch (ScimResourceNotFoundException e) { return true; } String dbEmail = scimUserFromDb.getPrimaryEmail(); String requestEmail = scimUserFromRequest.getPrimaryEmail(); if (dbEmail.equals(requestEmail)) { String dbUserName = scimUserFromDb.getUserName(); String requestUserName = scimUserFromRequest.getUserName(); <mask> if (scimUserFromDb.isVerified() == scimUserFromRequest.isVerified()) { if (scimUserFromDb.isActive() == (scimUserFromRequest.isActive())) { String dbOrigin = scimUserFromDb.getOrigin(); String requestOrigin = scimUserFromRequest.getOrigin(); if (dbOrigin.equals(requestOrigin)) { return true; }else{ return false; } }else{ return false; } }else{ return false; } }else{ return false; } }else{ return false; } } </s> java",
      "function range": "2,5-58,5"
    },
    "VUL4J-41": {
      "loc": "9-9",
      "input": "<s> protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream, final String entryName, final Date entryDate, final boolean isDirectory, final Integer mode, String symlinkDestination ) throws IOException, ArchiverException { final File f = FileUtils.resolveFile( dir, entryName ); <mask> if ( isOverwrite() || !f.exists() || f.lastModified() < entryDate.getTime() ) { final File dirF = f.getParentFile(); if ( dirF != null ) { dirF.mkdirs(); } if ( StringUtils.isEmpty( symlinkDestination ) ) { if (! isDirectory ) { OutputStream out = null; try { out = new FileOutputStream( f ); IOUtil.copy( compressedInputStream, out ); out.close(); out = null; } finally { IOUtil.close( out ); } } else { f.mkdirs(); } } else{ File symlinkDestFile = new File( symlinkDestination ); SymlinkUtils.createSymbolicLink( f, symlinkDestFile ); } long time = entryDate.getTime(); f.setLastModified( time ); if ( !isIgnorePermissions() && mode != null && !isDirectory ) { ArchiveEntryUtils.chmod( f, mode ); } }else{ return; } } catch ( final FileNotFoundException ex ) { String path = f.getPath(); getLogger().warn( \"Unable to expand to file \" + path ); } } </s> java",
      "function range": "2,5-73,5"
    },
    "VUL4J-43": {
      "loc": "7-7",
      "input": "<s> public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); <mask> File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } } </s> java",
      "function range": "2,2-19,2"
    },
    "VUL4J-44": {
      "loc": "5-5",
      "input": "<s> public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); <mask> byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; } </s> java",
      "function range": "2,2-20,2"
    },
    "VUL4J-46": {
      "loc": "13-13",
      "input": "<s> protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem) { super(oc); if (xmlOut == null) { xmlOut = XMLOutputFactory.newInstance(); } _xmlGeneratorFeatures = xgFeatures; if (xmlIn == null) { <mask> } _cfgNameForTextElement = nameForTextElem; _xmlParserFeatures = xpFeatures; _initFactories(xmlIn, xmlOut); _xmlOutputFactory = xmlOut; _xmlInputFactory = xmlIn; } </s> java",
      "function range": "2,5-24,5"
    },
    "VUL4J-47": {
      "loc": "15-15",
      "input": "<s> protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem) { super(oc); if (xmlOut == null) { xmlOut = XMLOutputFactory.newInstance(); } _xmlGeneratorFeatures = xgFeatures; if (xmlIn == null) { xmlIn = XMLInputFactory.newInstance(); xmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE); <mask> _cfgNameForTextElement = nameForTextElem; _xmlParserFeatures = xpFeatures; _initFactories(xmlIn, xmlOut); _xmlOutputFactory = xmlOut; _xmlInputFactory = xmlIn; } </s> java",
      "function range": "2,1-24,1"
    },
    "VUL4J-50": {
      "loc": "33-34",
      "input": "<s> private void writeSession(SessionInformations session, boolean displayUser) throws IOException { final String sessionId = session.getId(); final String remoteAddr = session.getRemoteAddr(); write(\"<td><a href='?part=sessions&amp;sessionId=\"); String sessionIdHtmlEncode=htmlEncodeButNotSpace(sessionId); write(sessionIdHtmlEncode); write(\"'>\"); write(sessionIdHtmlEncode); write(\"</a>\"); final String nextColumnAlignRight = \"</td><td align='right'>\"; write(nextColumnAlignRight); String lastAccess = durationFormat.format(session.getLastAccess()); String age = durationFormat.format(session.getAge()); String exprDate = expiryFormat.format(session.getExpirationDate()); String attrCount = integerFormat.format(session.getAttributeCount()); String serializedSize = integerFormat.format(session.getSerializedSize()); write(lastAccess); write(nextColumnAlignRight); write(age); write(nextColumnAlignRight); write(exprDate); write(nextColumnAlignRight); write(attrCount); final String nextColumnAlignCenter = \"</td><td align='center'>\"; final String nextColumn = \"</td><td>\"; write(nextColumnAlignCenter); String s1 = !session.isSerializable()? \"<span class='severe'>#non#</span>\": \"#oui#\"; write(s1); write(nextColumnAlignRight); write(serializedSize); write(nextColumn); <mask> write(nextColumnAlignCenter); writeCountry(session); final String remoteUser = session.getRemoteUser(); if (displayUser) { write(nextColumn); if (remoteUser != null) { String remoteUserhtmlEncode = htmlEncodeButNotSpace(remoteUser); writeDirectly(remoteUserhtmlEncode); } else { write(\"&nbsp;\"); } } String sessionIdeEncoded =urlEncode(sessionId); write(\"</td><td align='center' class='noPrint'>\"); write(\"<a href='?part=sessions\"); write(\"&amp;action=invalidate_session&amp;sessionId=\"); write(sessionIdeEncoded); String str_from_js = getStringForJavascript(\"confirm_invalidate_session\"); write(\"' onclick=\\\"javascript:return confirm('\" + str_from_js + \"');\\\">\"); write(\"<img width='16' height='16' src='?resource=user-trash.png' alt='#invalidate_session#' title='#invalidate_session#' />\"); write(\"</a>\"); write(\"</td>\"); } </s> java",
      "function range": "2,2-61,2"
    },
    "VUL4J-53": {
      "loc": "2-3",
      "input": "<s> void setTo(Calendar c, int i) { <mask> } </s> java",
      "function range": "2,1-5,1"
    },
    "VUL4J-55": {
      "loc": "22-22",
      "input": "<s> public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) <= 0) { int i =0; while (i< CalendarField.ADJUST_ORDER.length) { CalendarField f = CalendarField.ADJUST_ORDER[i++]; int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; CalendarField l=f.lowerField; while (l!=null){ l.clear(cal); l=l.lowerField; } if (next>=0) { f.setTo(cal,next); <mask> continue OUTER; } else { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } } return cal; }else{ throw new RareOrImpossibleDateException(); } } } </s> java",
      "function range": "2,1-39,1"
    },
    "VUL4J-57": {
      "loc": "7-7",
      "input": "<s> @SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item != null) { <mask> if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { StepContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun); CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); Integer quietPeriod = step.getQuietPeriod(); if (quietPeriod == null) { try { Class taskClass = task.getClass(); Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\"); Class returnType = getQuietPeriod.getReturnType(); if (returnType.equals(int.class)) { quietPeriod = (Integer) getQuietPeriod.invoke(task); } } catch (NoSuchMethodException e) { } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) { LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e); } } quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod; Jenkins activeInstance = Jenkins.getActiveInstance(); ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions); if (scheduleResult.isRefused()) { throw new AbortException(\"Failed to trigger build of \" + item.getFullName()); } }else{ throw new AbortException(\"Item type does not support parameters\"); } } }else{ final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName()))); List<Action> actions = new ArrayList<>(); if (step.getWait()) { StepContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context,isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun); CauseAction causeAction = new CauseAction(cause); actions.add(causeAction); List<ParameterValue> parameters = step.getParameters(); if (parameters != null) { parameters = completeDefaultParameters(parameters, (Job) project); actions.add(new ParametersAction(parameters)); } Integer quietPeriod = step.getQuietPeriod(); if (quietPeriod == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"Failed to trigger build of \" + project.getFullName()); } } if (!step.getWait()) { getContext().onSuccess(null); return true; } else { return false; } }else{ throw new AbortException(\"Waiting for non-job items is not supported\"); } }else{ throw new AbortException(\"No item named \" + job + \" found\"); } } </s> java",
      "function range": "2,1-114,1"
    },
    "VUL4J-59": {
      "loc": "6-6",
      "input": "<s> void read(Tokeniser t, CharacterReader r) { char c = r.consume(); if(c== eof){ t.eofError(this); <mask> return; } if (c == '\\f' || c == '\\n' || c== ' '|| c== '\\r' || c == '\\t'){ return; } if(c =='\\'' ){ t.transition(AttributeValue_singleQuoted); return; } if( c== '>'){ t.error(this); t.emitTagPending(); t.transition(Data); return; } if(c == nullChar){ t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); return; } if(c == '\"'){ t.transition(AttributeValue_doubleQuoted); return; } if(c =='&' ){ r.unconsume(); t.transition(AttributeValue_unquoted); return; } if ( c== '<' || c == '`' || c == '='){ t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); return; } r.unconsume(); t.transition(AttributeValue_unquoted); } </s> java",
      "function range": "2,8-54,9"
    },
    "VUL4J-61": {
      "loc": "20-20",
      "input": "<s> private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception { config = config == null? Collections.emptyMap():config; boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true); List<MapResult> result = new ArrayList<>(); try { FileUtils.checkReadAllowed(url); DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance(); XPathFactory xPathFactory = XPathFactory.newInstance(); documentBuilderFactory.setIgnoringElementContentWhitespace(true); documentBuilderFactory.setNamespaceAware(true); if(StringUtils.isEmpty(path) ){ path = \"/\" ; } XPathExpression xPathExpression = xPathFactory.newXPath().compile(path); InputStream inputStream = Util.openInputStream(url, (Map) config.getOrDefault( \"headers\", Collections.emptyMap() ) , null); <mask> NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET); int i = 0; while ( i < nodeList.getLength()) { final Deque<Map<String, Object>> stack = new LinkedList<>(); Node node_i = nodeList.item(i); handleNode(stack, node_i, simpleMode); int index = 0; while ( index < stack.size()) { Map<String, Object> stack_first = stack.pollFirst(); result.add(new MapResult(stack_first)); index++; } i++; } } catch (FileNotFoundException e){ if(failOnError){ String message = e.getMessage(); throw new FileNotFoundException(message); }else{ Map<String, Object> emptyMap =Collections.emptyMap(); MapResult mapResult = new MapResult(emptyMap); return Stream.of(mapResult); } } catch (Exception e){ if(failOnError){ throw new Exception(e); }else{ Map<String, Object> emptyMap =Collections.emptyMap(); MapResult mapResult = new MapResult(emptyMap); return Stream.of(mapResult); } } return result.stream(); } </s> java",
      "function range": "2,5-61,5"
    },
    "VUL4J-64": {
      "loc": "6-6",
      "input": "<s> final static private XMLStreamReader createXMLStreamReader(InputStream inputStream) throws XMLStreamException, IOException { XMLInputFactory factory = XMLInputFactory.newInstance(); factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true); factory.setProperty(XMLInputFactory.IS_COALESCING, true); <mask> return factory.createXMLStreamReader(in); } </s> java",
      "function range": "2,5-9,5"
    },
    "VUL4J-65": {
      "loc": "19-19",
      "input": "<s> static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); <mask> file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; } </s> java",
      "function range": "2,5-28,5"
    },
    "VUL4J-66": {
      "loc": "8-8",
      "input": "<s> protected static boolean isValid(String str) { if (str != null && str.length() != 0){ int i =0; while(i < str.length()) { char c = str.charAt(i); i++; <mask> return false; } } return true; } return false; } </s> java",
      "function range": "2,1-16,1"
    },
    "VUL4J-73": {
      "loc": "2-3",
      "input": "<s> public boolean isPasswordValid(String encPass, String rawPass, Object salt) { <mask> pass1 = ignorePasswordCase? pass1.toLowerCase(Locale.ENGLISH): pass1; pass2 = ignorePasswordCase? pass2.toLowerCase(Locale.ENGLISH): pass2; return PasswordEncoderUtils.equals(pass1, pass2); } </s> java",
      "function range": "2,2-8,2"
    },
    "VUL4J-74": {
      "loc": "4-10",
      "input": "<s> public SecureRandom getObject() throws Exception { SecureRandom rnd = SecureRandom.getInstance(algorithm); <mask> return rnd; } </s> java",
      "function range": "2,1-13,1"
    }
  }
}