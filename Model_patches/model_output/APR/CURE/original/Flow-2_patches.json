{
    "VUL4J-10012-61-66": {
        "src": "template = template . replace ( $STRING$ , path ) ; template = template . replace ( $STRING$ , additional CaMeL Info ) ; if ( template . contains ( $STRING$ ) ) { template = template . replace ( $STRING$ , get CaMeL Routes ( event ) ) ; }",
        "patches": [
            {
                "patch": "template = template.replace( 'RouteNotFoundError_prod.html', additionalInfo ) ; if( template.contains( 'RouteNotFoundError_prod.html') ) { template = template.replace( 'RouteNotFoundError_prod.html', getRoutes( event ) ) ; } if( template.contains( 'RouteNotFoundError_prod.html') ) { template = template.replace( 'RouteNotFoundError_prod.html', getRoutes( event ) ) ;"
            },
            {
                "patch": "template = template.replace( 'href', additionalInfo ) ; if( template.contains( 'href') ) { template = template.replace( 'href', getRoutes( event ) ) ; } if( template.contains( 'href') ) { template = template.replace( 'href', getRoutes( event ) ) ;"
            },
            {
                "patch": "template = template.replace( ' (requires parametricQuantity)', additionalInfo ) ; if( template.contains( ' (requires parametricQuantity)') ) { template = template.replace( ' (requires parametricQuantity)', getRoutes( event ) ) ; } if( template.contains( ' (requires parametricQuantity)') ) { template = template.replace( ' (requires parametricQuantity)', getRoutes( event ) ) ;"
            },
            {
                "patch": "template = template.replace( ' (supports optional parametricQuantity)', additionalInfo ) ; if( template.contains( ' (supports optional parametricQuantity)') ) { template = template.replace( ' (supports optional parametricQuantity)', getRoutes( event ) ) ; } if( template.contains( ' (supports optional parametricQuantity)') ) { template = template.replace( ' (supports optional parametricQuantity)', getRoutes( event ) ) ;"
            },
            {
                "patch": "template = template.replace( ':', additionalInfo ) ; if( template.contains( ':') ) { template = template.replace( ':', getRoutes( event ) ) ; } if( template.contains( ':') ) { template = template.replace( ':', getRoutes( event ) ) ;"
            },
            {
                "patch": "template = template.replace( 'RouteNotFoundError_prod.html', additionalInfo ) ; if( template.contains( 'RouteNotFoundError_prod.html') ) { template = template.replace( 'RouteNotFoundError_prod.html', getRoutes( event ) ) ; } if( template.contains( 'RouteNotFoundError_prod.html') ) { template = template.replace( 'RouteNotFoundError_prod.html', getRoutes( event ) ) ; }"
            },
            {
                "patch": "template = template.replace( 'href', additionalInfo ) ; if( template.contains( 'href') ) { template = template.replace( 'href', getRoutes( event ) ) ; } if( template.contains( 'href') ) { template = template.replace( 'href', getRoutes( event ) ) ; }"
            },
            {
                "patch": "template = template.replace( ' (requires parametricQuantity)', additionalInfo ) ; if( template.contains( ' (requires parametricQuantity)') ) { template = template.replace( ' (requires parametricQuantity)', getRoutes( event ) ) ; } if( template.contains( ' (requires parametricQuantity)') ) { template = template.replace( ' (requires parametricQuantity)', getRoutes( event ) ) ; }"
            },
            {
                "patch": "template = template.replace( ' (supports optional parametricQuantity)', additionalInfo ) ; if( template.contains( ' (supports optional parametricQuantity)') ) { template = template.replace( ' (supports optional parametricQuantity)', getRoutes( event ) ) ; } if( template.contains( ' (supports optional parametricQuantity)') ) { template = template.replace( ' (supports optional parametricQuantity)', getRoutes( event ) ) ; }"
            },
            {
                "patch": "template = template.replace( ':', additionalInfo ) ; if( template.contains( ':') ) { template = template.replace( ':', getRoutes( event ) ) ; } if( template.contains( ':') ) { template = template.replace( ':', getRoutes( event ) ) ; }"
            }
        ]
    }
}