{
    "function range": "2,5-39,5",
    "output": [
        "\n                    if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                       \n                               \n                   \n   \n\n   \n        cal =;\n       \n        }\n       ",
        "\n                    if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                          \n                               \n                   \n   \n\n   \n       \n       \n        } else {         \n",
        "\n                    if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                           \n                               \n                   \n   \n\n   \n       \n       \n        } else {         \n",
        "\n                    if (next==f.first(this)) }\n                    if (next==f.first(this))                                       \n   \n   \n   \n   \n   \n   \n        if (cal.compareTo(twoYearsFuture) <= 0)\n       \n                                           //            \n                   \n   \n\n   \n       \n       \n        } else {         \n",
        "\n                    if (next==f.first(this)) }\n                    if (next==f.first(this))                                       \n   \n   \n   \n   \n   \n       \n            if (cal.compareTo(twoYearsFuture) <= 0)\n           \n                                           //            \n                   \n   \n\n   \n       \n       \n        } else {         \n",
        "\n                    if (next==f.first(this)) }\n                                      \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                           //            \n                   \n   \n\n   \n       \n       \n        } else {         \n",
        "\n                    if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                       \n                               \n                   \n   \n\n   \n       \n       \n        } else {          cal.",
        "\n                    if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                       \n                               \n                   \n   \n\n   \n        cal.\n       \n        } else            break",
        "\n                    if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                          \n                               \n                   \n   \n\n   \n       \n       \n        } else {          cal",
        "\n                    if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                           \n                               \n                   \n   \n\n   \n       \n       \n        } else {          cal"
    ],
    "validation_result": [
        {
            "patch": "if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                       \n                               \n                   \n   \n\n   \n        cal =;\n       \n        }",
            "correctness": "uncompilable"
        },
        {
            "patch": "if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                          \n                               \n                   \n   \n\n   \n       \n       \n        } else {",
            "correctness": "uncompilable"
        },
        {
            "patch": "if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                           \n                               \n                   \n   \n\n   \n       \n       \n        } else {",
            "correctness": "uncompilable"
        },
        {
            "patch": "if (next==f.first(this)) }\n                    if (next==f.first(this))                                       \n   \n   \n   \n   \n   \n   \n        if (cal.compareTo(twoYearsFuture) <= 0)\n       \n                                           //            \n                   \n   \n\n   \n       \n       \n        } else {",
            "correctness": "uncompilable"
        },
        {
            "patch": "if (next==f.first(this)) }\n                    if (next==f.first(this))                                       \n   \n   \n   \n   \n   \n       \n            if (cal.compareTo(twoYearsFuture) <= 0)\n           \n                                           //            \n                   \n   \n\n   \n       \n       \n        } else {",
            "correctness": "uncompilable"
        },
        {
            "patch": "if (next==f.first(this)) }\n                                      \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                           //            \n                   \n   \n\n   \n       \n       \n        } else {",
            "correctness": "uncompilable"
        },
        {
            "patch": "if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                       \n                               \n                   \n   \n\n   \n       \n       \n        } else {          cal.",
            "correctness": "uncompilable"
        },
        {
            "patch": "if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                       \n                               \n                   \n   \n\n   \n        cal.\n       \n        } else            break",
            "correctness": "uncompilable"
        },
        {
            "patch": "if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                          \n                               \n                   \n   \n\n   \n       \n       \n        } else {          cal",
            "correctness": "uncompilable"
        },
        {
            "patch": "if (next==f.first(this)) }\n                   \n                   \n                    if (next==f.first(this))\n    }\n   \n   \n   \n   \n   \n       \n            if (cal==twoYearsFuture)\n           \n                                           \n                               \n                   \n   \n\n   \n       \n       \n        } else {          cal",
            "correctness": "uncompilable"
        }
    ]
}