{
    "function range": "2,1-27,1",
    "output": [
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder cannot be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder is null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder must not be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder cannot be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder must not be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder must not be null\"); } String objectiveDirectoryPath = System.getProperty(\"user.dir\"); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder must not be null\"); } String objectiveDirectoryPath = System.getProperty(\"user.home\"); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder is null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())); { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder cannot be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } DEDENT",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder must not be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } DEDENT"
    ],
    "validation_result": [
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder cannot be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory cannot be null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder is null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory is null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder must not be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory must not be null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder cannot be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory cannot be null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder must not be null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory must not be null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder must not be null\"); } String objectiveDirectoryPath = System.getProperty(\"user.dir\"); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory must not be null\"); } String targetDirPath = System.getProperty(\"user.dir\"); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder must not be null\"); } String objectiveDirectoryPath = System.getProperty(\"user.home\"); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())) { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory must not be null\"); } String targetDirPath = System.getProperty(\"user.home\"); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { if (objectiveFolder == null) { throw new IllegalArgumentException(\"objectiveFolder is null\"); } String objectiveDirectoryPath = objectiveFolder.getCanonicalPath(); DocumentItem followingItem = provider.acquireFollowingLegibleItem(); while (followingItem!= null) { File a = new File(objectiveFolder, followingItem.acquireTitle()); if (!a.getCanonicalPath().startsWith(objectiveDirectoryPath)) { throw new IOException(\"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder); } if (followingItem.whetherFolder()) { if (!a.whetherFolder() &&!a.mkdirs()) { throw new IOException(\"failed to create directory \" + a); } } else { File upperFolder = a.getParentFile(); if (!upperFolder.whetherFolder() &&!upperFolder.mkdirs()) { throw new IOException(\"failed to create directory \" + upperFolder); } try (OutputStream u = Files.newOutputStream(a.toPath())); { noter.noteDownItemInformationTo(followingItem, u); } } followingItem = provider.acquireFollowingLegibleItem(); } }",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory is null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())); { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }"
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        }
    ]
}