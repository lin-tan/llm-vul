{
    "function range": "2,1-53,1",
    "output": [
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); batch.setCategory(constituentCategory); batch.setAttributeTitile(attributeTitile); return (T) transformObjectBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); if (attributeTitile!= null) { batch.addObject(attributeTitile); } return (T) transformObjectBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); if (attributeTitile!= null && attributeTitile instanceof Object) { batch.addObject(attributeTitile); } return (T) transformObjectBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); batch.setCategory(constituentCategory); batch.setAttributeTitile(attributeTitile); return (T) transformBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); if (attributeTitile!= null) { batch.addObject(attributeTitile); } else { batch.addObject(category); } return (T) transformObjectBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); if (attributeTitile == null) { batch = new JsonBatch(); } else { batch = new JsonBatch(); batch.addObject(attributeTitile); } return (T) transformObjectBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); if (attributeTitile!= null) { batch.addObject(attributeTitile); } return (T) transformObjectBatch(analyzer, constituentCategory, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); if (attributeTitile == null) { batch = new JsonBatch(); } else { batch = new JsonBatch(); batch.addAttribute(attributeTitile); } return (T) transformObjectBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); if (attributeTitile == null) { batch = new JsonBatch(); } else { batch = new JsonBatch(); } batch.addObject(attributeTitile); return (T) transformObjectBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; if (tokenizer.token() == JSONToken.NULL) { tokenizer.followingToken(JSONToken.COMMA); return null; } if (tokenizer.token() == JSONToken.LITERAL_STR) { byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; } Class constituentTemplate; Type constituentCategory; if (category instanceof GenericArrayType) { GenericArrayType clazz = (GenericArrayType) category; constituentCategory = clazz.getGenericComponentType(); if (constituentCategory instanceof TypeVariable) { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (categoryOfObject instanceof ParameterizedType) { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); for (int x = 0; x < objectCategoryParameters.length; ++x) { if (objectCategoryParameters[x].getName().equals(categoryVariable.getName())) { realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; } } } if (realCategory instanceof Class) { constituentTemplate = (Class) realCategory; } else { constituentTemplate = Object.class; } } else { constituentTemplate = CategoryTools.acquireClass(categoryVariable.getBounds()[0]); } } else { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } } else { Class clazz = (Class) category; constituentCategory = constituentTemplate = clazz.acquireCategoryOfComponent(); } JsonBatch batch = new JsonBatch(); if (attributeTitile!= null) { batch.addObject(attributeTitile); } else { batch.addObject(category); } return (T) transformObjectBatch(analyzer, constituentCategory, constituentTemplate, batch); }"
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        }
    ]
}