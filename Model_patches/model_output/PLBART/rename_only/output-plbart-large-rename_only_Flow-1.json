{
    "function range": "2,1-51,1",
    "output": [
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack: {} {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).matches()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack: {} {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).matches()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack: {} {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; } }",
        "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).matches()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; } }"
    ],
    "validation_result": [
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).find()) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        },
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack: {} {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).find()) { getLogger().debug(\"Resource not served by webpack: {} {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        },
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).matches()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).matches()) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        },
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).find()) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        },
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack: {} {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).find()) { getLogger().debug(\"Resource not served by webpack: {} {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        },
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).find()) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        },
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).matches()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).matches()) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        },
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack: {} {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).find()) { getLogger().debug(\"Resource not served by webpack: {} {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        },
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).find()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).find()) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        },
        {
            "patch": "public boolean workForDevMannerDemand(HttpServletRequest query, HttpServletResponse reply) throws IOException { if (whetherDevelopComputerUnsuccessfulBegin.get() ||!developComputerBeginFuturity.isDone()) { return false; } String queryFileName = query.getPathInfo(); if (APP_SUBJECT_FORM.matcher(queryFileName).matches()) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); reply.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_SUBJECT_FORM.matcher(queryFileName).find()) { queryFileName = \"/VAADIN/static\" + queryFileName; } HttpURLConnection connexion = arrangeLink(queryFileName, query.getMethod()); Enumeration<String> headingTiles = query.getHeaderNames(); while (headingTiles.hasMoreElements()) { String heading = headingTiles.nextElement(); connexion.setRequestProperty(heading, \"Connect\".equals(heading)? \"close\" : query.getHeader(heading)); } getLogger().debug(\"Requesting resource to webpack {}\", connexion.getURL()); int replyCode = connexion.getResponseCode(); if (replyCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", queryFileName); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", replyCode, queryFileName); connexion.getHeaderFields().forEach((heading, contents) -> { if (heading!= null) { reply.addHeader(heading, contents.get(0)); } }); if (replyCode == HTTP_OK) { composeDataSequence(reply.getOutputStream(), connexion.getInputStream()); } else if (replyCode < 400) { reply.setStatus(replyCode); } else { reply.sendError(replyCode); } reply.getOutputStream().close(); return true; }",
            "correctness": "compile_success",
            "translated": "public boolean serveDevModeRequest(HttpServletRequest request, HttpServletResponse response) throws IOException { if (isDevServerFailedToStart.get() ||!devServerStartFuture.isDone()) { return false; } String requestFilename = request.getPathInfo(); if (APP_THEME_PATTERN.matcher(requestFilename).matches()) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return true; } if(APP_THEME_PATTERN.matcher(requestFilename).find()) { requestFilename = \"/VAADIN/static\" + requestFilename; } HttpURLConnection connection = prepareConnection(requestFilename, request.getMethod()); Enumeration<String> headerNames = request.getHeaderNames(); while (headerNames.hasMoreElements()) { String header = headerNames.nextElement(); connection.setRequestProperty(header, \"Connect\".equals(header)? \"close\" : request.getHeader(header)); } getLogger().debug(\"Requesting resource to webpack {}\", connection.getURL()); int responseCode = connection.getResponseCode(); if (responseCode == HTTP_NOT_FOUND) { getLogger().debug(\"Resource not served by webpack {}\", requestFilename); return false; } getLogger().debug(\"Served resource by webpack: {} {}\", responseCode, requestFilename); connection.getHeaderFields().forEach((header, values) -> { if (header!= null) { response.addHeader(header, values.get(0)); } }); if (responseCode == HTTP_OK) { writeStream(response.getOutputStream(), connection.getInputStream()); } else if (responseCode < 400) { response.setStatus(responseCode); } else { response.sendError(responseCode); } response.getOutputStream().close(); return true; }"
        }
    ]
}