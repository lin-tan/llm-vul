{
    "function range": "2,1-28,1",
    "output": [
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); continue EXTERIOR; } } return calendar; } }",
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); continue EXTERIOR; } } return calendar; } }",
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); if (following>0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
        "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); b.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }"
    ],
    "validation_result": [
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); continue EXTERIOR; } } return calendar; } }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); for (CalendarField l=f.upperAttribute; l!=null; l=l.upperAttribute) l.clear(cal); continue OUTER; } } return cal; } }"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); for (CalendarField l=f.upperAttribute; l!=null; l=l.upperAttribute) l.setTo(cal,f.first(this)); continue OUTER; } } return cal; } }"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); f.increment(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } } return cal; } }"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); for (CalendarField l=f.upperAttribute; l!=null; l=l.upperAttribute) l.clear(cal); f.setTo(cal,f.first(this)); continue OUTER; } } return cal; } }"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); f.setTo(cal,f.first(this)); continue OUTER; } for (CalendarField l=f.upperAttribute; l!=null; l=l.upperAttribute) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } } return cal; } }"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); continue OUTER; } for (CalendarField l=f.upperAttribute; l!=null; l=l.upperAttribute) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } } return cal; } }"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); continue EXTERIOR; } } return calendar; }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); f.setTo(cal,f.first(this)); continue OUTER; } for (CalendarField l=f.upperAttribute; l!=null; l=l.upperAttribute) l.clear(cal); continue OUTER; } } return cal; }"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); if (following>0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); f.setTo(cal,f.first(this)); continue OUTER; } for (CalendarField l=f.upperAttribute; l!=null; l=l.upperAttribute) l.clear(cal); if (next>0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } } return cal; } }"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); f.setTo(cal,f.first(this)); continue OUTER; } for (CalendarField l=f.upperAttribute; l!=null; l=l.upperAttribute) l.setTo(cal,f.first(this)); continue OUTER; } } return cal; }"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) { Calendar futurityTwoYears = (Calendar) calendar.clone(); futurityTwoYears.add(Calendar.YEAR, 2); EXTERIOR: while (true) { if (calendar.compareTo(futurityTwoYears) > 0) { throw new UnusualOrUnrealisticTimeException(); } for (CalendarAttribute a : CalendarAttribute.ADJUST_ORDER) { int now = a.valueOf(calendar); int following = a.roundUp(this,now); if (now==following) continue; for (CalendarAttribute b=a.lowerAttribute; b!=null; b=b.lowerAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } else { a.changeTO(calendar,following); a.changeTO(calendar,a.initial(this)); continue EXTERIOR; } for (CalendarAttribute b=a.upperAttribute; b!=null; b=b.upperAttribute) b.empty(calendar); if (following<0) { a.Increment(calendar, 1); b.changeTO(calendar,a.initial(this)); continue EXTERIOR; } } return calendar; } }",
            "correctness": "uncompilable",
            "translated": "public Calendar ceil(Calendar cal) { Calendar twoYearsFuture = (Calendar) cal.clone(); twoYearsFuture.add(Calendar.YEAR, 2); OUTER: while (true) { if (cal.compareTo(twoYearsFuture) > 0) { throw new RareOrImpossibleDateException(); } for (CalendarField f : CalendarField.ADJUST_ORDER) { int cur = f.valueOf(cal); int next = f.ceil(this,cur); if (cur==next) continue; for (CalendarField l=f.lowerField; l!=null; l=l.lowerField) l.clear(cal); if (next<0) { f.rollUp(cal, 1); f.setTo(cal,f.first(this)); continue OUTER; } else { f.setTo(cal,next); f.setTo(cal,f.first(this)); continue OUTER; } for (CalendarField l=f.upperAttribute; l!=null; l=l.upperAttribute) l.clear(cal); if (next<0) { f.rollUp(cal, 1); l.setTo(cal,f.first(this)); continue OUTER; } } return cal; } }"
        }
    ]
}