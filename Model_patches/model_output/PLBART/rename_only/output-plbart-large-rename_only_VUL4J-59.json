{
    "function range": "2,1-46,1",
    "output": [
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); break; case '<': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); break; case ';': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion (UnquotedPropertyValue); } }",
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion (UnquotedPropertyValue); } }",
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } } }",
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } } }",
        "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } } }"
    ],
    "validation_result": [
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); break; case '<' : t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        },
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); break; case '<': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); break; case '<' : t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        },
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); t.transition(AttributeValue_unquoted); break; case '<' : t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        },
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); t.transition(AttributeValue_unquoted); break; case '<' : t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        },
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); break; case ';': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); break; case ';': t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        },
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion (UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); t.transition(AttributeValue_unquoted); break; case '<' : t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        },
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion (UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); t.transition(AttributeValue_unquoted); break; case '<' : t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        },
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); break; case '<' : t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        },
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); t.transition(AttributeValue_unquoted); break; case '<' : t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        },
        {
            "patch": "void retrieve(Lexer s, CharScanner m) { char a = m.devour(); switch (a) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': s.conversion(DoubleQuotedPropertyValue); break; case '&': m.notDevour(); s.conversion(UnquotedPropertyValue); break; case '\\'': s.conversion(SingleQuotedPropertyValue); break; case charBeNull: s.mistake(this); s.labelUndecided.attachPropertyContent(substitutionChar); s.conversion(UnquotedPropertyValue); break; case endOfFile: s.endOfFileError(this); s.conversion(UnquotedPropertyValue); break; case '<' : s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '>': s.mistake(this); s.releaseLabelUndecided(); s.conversion(Information); break; case '<': case '=': case '`': s.mistake(this); s.labelUndecided.attachPropertyContent(a); s.conversion(UnquotedPropertyValue); break; default: m.notDevour(); s.conversion(UnquotedPropertyValue); } }",
            "correctness": "uncompilable",
            "translated": "void read(Tokeniser t, CharacterReader r) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\r': case '\\f': case'': break; case '\"': t.transition(AttributeValue_doubleQuoted); break; case '&': r.unconsume(); t.transition(AttributeValue_unquoted); break; case '\\'': t.transition(AttributeValue_singleQuoted); break; case nullChar: t.error(this); t.tagPending.appendAttributeValue(replacementChar); t.transition(AttributeValue_unquoted); break; case eof: t.eofError(this); t.transition(AttributeValue_unquoted); break; case '<' : t.error(this); t.emitTagPending(); t.transition(Data); break; case '>': t.error(this); t.emitTagPending(); t.transition(Data); break; case '<': case '=': case '`': t.error(this); t.tagPending.appendAttributeValue(c); t.transition(AttributeValue_unquoted); break; default: r.unconsume(); t.transition(AttributeValue_unquoted); } }"
        }
    ]
}