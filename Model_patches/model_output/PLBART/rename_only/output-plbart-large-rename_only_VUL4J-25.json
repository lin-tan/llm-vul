{
    "function range": "2,1-29,1",
    "output": [
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return super.acquireReasonableHref(resourseAddress); } return \"\"; }",
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return this.getReasonableHref(resourseAddress); } return \"\"; }",
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return String. format (REASONABLE_HREF_FORMAT, resourseAddress ) ; } return \"\"; }",
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return String. format (REASONABLE_HREF_TEMPLATE, resourseAddress ) ; } return \"\"; }",
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return String.format (REASONABLE_HREF_FORMAT, resourseAddress ) ; } return \"\"; }",
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return super.acquireReasonableHref(resourseAddress ) ; } return \"\"; }",
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return String.format (REASONABLE_HREF_TEMPLATE, resourseAddress ) ; } return \"\"; }",
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return super.acquireReasonableHref(resourseAddress); } else { return null; } return \"\"; }",
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return \"http://www.google.com/search?q=\" + resourseAddress ; } return \"\"; }",
        "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return super.acquireReasonableHref(resourseAddress); } else { return null ; } return \"\"; }"
    ],
    "validation_result": [
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return super.acquireReasonableHref(resourseAddress); } return \"\"; }",
            "correctness": "uncompilable",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return super.getValidHref(url); } return \"\"; }"
        },
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return this.getReasonableHref(resourseAddress); } return \"\"; }",
            "correctness": "uncompilable",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return this.getReasonableHref(url); } return \"\"; }"
        },
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return String. format (REASONABLE_HREF_FORMAT, resourseAddress ) ; } return \"\"; }",
            "correctness": "uncompilable",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return String. format (REASONABLE_HREF_FORMAT, url ) ; } return \"\"; }"
        },
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return String. format (REASONABLE_HREF_TEMPLATE, resourseAddress ) ; } return \"\"; }",
            "correctness": "uncompilable",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return String. format (REASONABLE_HREF_TEMPLATE, url ) ; } return \"\"; }"
        },
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return String.format (REASONABLE_HREF_FORMAT, resourseAddress ) ; } return \"\"; }",
            "correctness": "uncompilable",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return String. format (REASONABLE_HREF_FORMAT, url ) ; } return \"\"; }"
        },
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return super.acquireReasonableHref(resourseAddress ) ; } return \"\"; }",
            "correctness": "uncompilable",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return super.getValidHref(url); } return \"\"; }"
        },
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return String.format (REASONABLE_HREF_TEMPLATE, resourseAddress ) ; } return \"\"; }",
            "correctness": "uncompilable",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return String. format (REASONABLE_HREF_TEMPLATE, url ) ; } return \"\"; }"
        },
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return super.acquireReasonableHref(resourseAddress); } else { return null; } return \"\"; }",
            "correctness": "uncompilable",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return super.getValidHref(url); } else { return null; } return \"\"; }"
        },
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return \"http://www.google.com/search?q=\" + resourseAddress ; } return \"\"; }",
            "correctness": "compile_success",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return \"http://www.google.com/search?q=\" + url ; } return \"\"; }"
        },
        {
            "patch": "@Override @Nonnull public String acquireReasonableHref(final String resourseAddress) { if (StringUtils.isNotEmpty(resourseAddress)) { return super.acquireReasonableHref(resourseAddress); } else { return null ; } return \"\"; }",
            "correctness": "uncompilable",
            "translated": "@Override @Nonnull public String getValidHref(final String url) { if (StringUtils.isNotEmpty(url)) { return super.getValidHref(url); } else { return null; } return \"\"; }"
        }
    ]
}