{
    "function range": "2,1-9,1",
    "output": [
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.equals(basePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (basePath.equals(examinePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.endsWith(basePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.isDirectory()) { examinePathManipulation(examinePath, basePath); return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.isDirectory()) { examinePathManipulation(basePath, examinePath); return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.endsWith(basePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.equals(basePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); } }",
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.isDirectory()) { examinePathManipulation(examinePath, basePath); return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation (examinePath); }",
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.isDirectory()) { examinePathManipulation(basePath, examinePath); return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation (examinePath); }",
        "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (basePath.equals(examinePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); } }"
    ],
    "validation_result": [
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.equals(basePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
            "correctness": "compile_success",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (pathToCheck.equals(parentPath)) { return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        },
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (basePath.equals(examinePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
            "correctness": "compile_success",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (parentPath.equals(pathToCheck)) { return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        },
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.endsWith(basePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
            "correctness": "compile_success",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (pathToCheck.endsWith(parentPath)) { return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        },
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.isDirectory()) { examinePathManipulation(examinePath, basePath); return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
            "correctness": "uncompilable",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (pathToCheck.isDirectory()) { checkDirectoryTraversal(pathToCheck, parentPath); return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        },
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.isDirectory()) { examinePathManipulation(basePath, examinePath); return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
            "correctness": "uncompilable",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (pathToCheck.isDirectory()) { checkDirectoryTraversal(parentPath, pathToCheck); return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        },
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.endsWith(basePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
            "correctness": "compile_success",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (pathToCheck.endsWith(parentPath)) { return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        },
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.equals(basePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
            "correctness": "compile_success",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (pathToCheck.equals(parentPath)) { return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        },
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.isDirectory()) { examinePathManipulation(examinePath, basePath); return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation (examinePath); }",
            "correctness": "uncompilable",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (pathToCheck.isDirectory()) { checkDirectoryTraversal(pathToCheck, parentPath); return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        },
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (examinePath.isDirectory()) { examinePathManipulation(basePath, examinePath); return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation (examinePath); }",
            "correctness": "uncompilable",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (pathToCheck.isDirectory()) { checkDirectoryTraversal(parentPath, pathToCheck); return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        },
        {
            "patch": "public static void examinePathManipulation(@NonNull Path basePath, @NonNull Path examinePath) { Assert.notNull(basePath, \"Parent path must not be null\"); Assert.notNull(examinePath, \"Path to check must not be null\"); if (basePath.equals(examinePath)) { return; } throw new ProhibitedException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + examinePath).specifyErrorInformation(examinePath); }",
            "correctness": "compile_success",
            "translated": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) { Assert.notNull(parentPath, \"Parent path must not be null\"); Assert.notNull(pathToCheck, \"Path to check must not be null\"); if (parentPath.equals(pathToCheck)) { return; } throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck); }"
        }
    ]
}