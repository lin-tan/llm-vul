{
    "function range": "2,1-40,1",
    "output": [
        "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireContentTransformer().transformTo(content, interchange, content); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
        "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireArchiveTransformer().transformTo(content, interchange); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
        "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireContentTransformer().transformTo(content, interchange); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
        "protected Object doAcquireArchive (Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireContentTransformer().transformTo(content, interchange, content); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
        "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireObjectTransformer().transformTo(content, interchange, content); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
        "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reason = new NoCategoryTransformationApplicableException(content, category); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
        "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireCircumstanceTransformer().transformTo(content, interchange); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
        "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireArchiveTransformer().transformTo(content, interchange, null); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
        "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireObjectTransformer().transformTo(content, interchange); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
        "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireContentTransformer().transformTo(content, interchange, content); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply ; }"
    ],
    "validation_result": [
        {
            "patch": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireContentTransformer().transformTo(content, interchange, content); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
            "correctness": "uncompilable",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { answer = exchange.getContext().acquireContentTransformer().convertTo(body, exchange, body); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        },
        {
            "patch": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireArchiveTransformer().transformTo(content, interchange); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
            "correctness": "uncompilable",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { answer = exchange.getContext().acquireArchiveTransformer().convertTo(body, exchange); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        },
        {
            "patch": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireContentTransformer().transformTo(content, interchange); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
            "correctness": "uncompilable",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { answer = exchange.getContext().acquireContentTransformer().convertTo(body, exchange); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        },
        {
            "patch": "protected Object doAcquireArchive (Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireContentTransformer().transformTo(content, interchange, content); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
            "correctness": "uncompilable",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { answer = exchange.getContext().acquireContentTransformer().convertTo(body, exchange, body); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        },
        {
            "patch": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireObjectTransformer().transformTo(content, interchange, content); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
            "correctness": "uncompilable",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { answer = exchange.getContext().acquireObjectTransformer().convertTo(body, exchange, body); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        },
        {
            "patch": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reason = new NoCategoryTransformationApplicableException(content, category); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
            "correctness": "compile_success",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { cause = new NoTypeConversionAvailableException(body, type); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        },
        {
            "patch": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireCircumstanceTransformer().transformTo(content, interchange); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
            "correctness": "uncompilable",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { answer = exchange.getContext().acquireCircumstanceTransformer().convertTo(body, exchange); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        },
        {
            "patch": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireArchiveTransformer().transformTo(content, interchange, null); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
            "correctness": "uncompilable",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { answer = exchange.getContext().acquireArchiveTransformer().convertTo(body, exchange, null); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        },
        {
            "patch": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireObjectTransformer().transformTo(content, interchange); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply; }",
            "correctness": "uncompilable",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { answer = exchange.getContext().acquireObjectTransformer().convertTo(body, exchange); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        },
        {
            "patch": "protected Object doAcquireArchive(Interchange interchange, Object content) throws Exception { if (content == null) { return null; } Object reply = null; Class<?> category = acquireArchiveCategory(); Exception reason = null; if (category!= null) { try { reply = interchange.acquireCircumstance().acquireCategoryTransformer().transformTo(category, interchange, content); } catch (Exception x) { reason = x; } } else { reply = interchange.acquireCircumstance().acquireContentTransformer().transformTo(content, interchange, content); } if (category == null && reply == null) { reply = content; } else if (reply == null) { if (reason!= null) { throw reason; } else { throw new NoCategoryTransformationApplicableException(content, category); } } return reply ; }",
            "correctness": "uncompilable",
            "translated": "protected Object doGetDocument(Exchange exchange, Object body) throws Exception { if (body == null) { return null; } Object answer = null; Class<?> type = getDocumentType(); Exception cause = null; if (type!= null) { try { answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body); } catch (Exception e) { cause = e; } } else { answer = exchange.getContext().acquireContentTransformer().convertTo(body, exchange, body); } if (type == null && answer == null) { answer = body; } else if (answer == null) { if (cause!= null) { throw cause; } else { throw new NoTypeConversionAvailableException(body, type); } } return answer; }"
        }
    ]
}