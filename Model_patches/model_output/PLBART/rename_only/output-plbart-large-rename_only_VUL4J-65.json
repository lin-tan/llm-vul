{
    "function range": "2,1-17,1",
    "output": [
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.lastIndexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf(\"-\"); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-') + 1; String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { f.delete(); } int point = titile.indexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { f.delete(); } int point = titile.lastIndexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position ++ + postfix); } f.getParentFile().mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { f.delete(); } int point = titile.lastIndexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f ; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-') + 1; String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f ; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; } }"
    ],
    "validation_result": [
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { return file; } int dot = name.indexOf('-'); String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.lastIndexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { return file; } int dot = name.lastIndexOf('-'); String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf(\"-\"); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { return file; } int dot = name.indexOf(\"-\"); String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-') + 1; String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { return file; } int dot = name.indexOf('-') + 1; String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { f.delete(); } int point = titile.indexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { file.delete(); } int dot = name.indexOf('-'); String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { f.delete(); } int point = titile.lastIndexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { file.delete(); } int dot = name.lastIndexOf('-'); String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position ++ + postfix); } f.getParentFile().mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { return file; } int dot = name.indexOf('-'); String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { f.delete(); } int point = titile.lastIndexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f ; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { file.delete(); } int dot = name.lastIndexOf('-'); String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-') + 1; String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f ; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { return file; } int dot = name.indexOf('-') + 1; String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); if (m > 0) { titile = titile.substring(0, m); } File f = new File(folder, titile); if (f.exists()) { return f; } int point = titile.indexOf('-'); String beginning = point < 0? titile : titile.substring(0, point); String postfix = point < 0? \"\" : titile.substring(point); int position = 2; while (f.exists()) { f = new File(folder, beginning + \"-\" + position++ + postfix); } f.getParentFile().mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); if (q > 0) { name = name.substring(0, q); } File file = new File(dir, name); if (file.exists()) { return file; } int dot = name.indexOf('-'); String prefix = dot < 0? name : name.substring(0, dot); String suffix = dot < 0? \"\" : name.substring(dot); int index = 2; while (file.exists()) { file = new File(dir, prefix + \"-\" + index++ + suffix); } file.getParentFile().mkdirs(); return file; }"
        }
    ]
}