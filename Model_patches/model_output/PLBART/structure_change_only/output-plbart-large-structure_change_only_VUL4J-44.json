{
    "function range": "2,2-20,2",
    "output": [
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if ( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if ( immune == null || immune.length == 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0 && immune[immune.length - 1] == '%') { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0 && immune[immune.length - 1].equals('0')) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0 && immune[immune.length - 1].equals(charValue)){ byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if ( immune!= null && immune.length > 0 && immune[immune.length - 1].equals(charValue)){ byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; } return cStr; }",
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if ( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; } return cStr; }",
        "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0 && immune[immune.length - 1] == '%') { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr ; }"
    ],
    "validation_result": [
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if ( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
            "correctness": "compile_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
            "correctness": "compile_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if ( immune == null || immune.length == 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
            "correctness": "test_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0 && immune[immune.length - 1] == '%') { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
            "correctness": "compile_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0 && immune[immune.length - 1].equals('0')) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0 && immune[immune.length - 1].equals(charValue)){ byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if ( immune!= null && immune.length > 0 && immune[immune.length - 1].equals(charValue)){ byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
            "correctness": "compile_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if ( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }",
            "correctness": "compile_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (immune!= null && immune.length > 0 && immune[immune.length - 1] == '%') { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr ; }",
            "correctness": "compile_success"
        }
    ]
}