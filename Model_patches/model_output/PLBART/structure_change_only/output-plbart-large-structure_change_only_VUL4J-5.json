{
    "function range": "2,5-40,5",
    "output": [
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".zip\")) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && f.exists()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".gz\")) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create file outside of \" + targetDirectory; throw new IOException(s); } } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create file outside of \" + targetDirectory; throw new IOException(s); } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".zip\")) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } } }"
    ],
    "validation_result": [
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".zip\")) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
            "correctness": "compile_success"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && f.exists()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
            "correctness": "compile_success"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".gz\")) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
            "correctness": "compile_success"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create file outside of \" + targetDirectory; throw new IOException(s); } } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".zip\")) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
            "correctness": "compile_success"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (fpath!= null && fpath.endsWith(\".zip\")) { continue; } if (nextEntry.isFile()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }",
            "correctness": "uncompilable"
        }
    ]
}