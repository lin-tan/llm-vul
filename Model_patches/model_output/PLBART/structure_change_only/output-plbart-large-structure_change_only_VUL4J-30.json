{
    "function range": "3,5-17,5",
    "output": [
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(String.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) value; Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(URL.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(Integer.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(Object.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); Matcher m = p.matcher(value.toString()); if (m.matches()) { return; } String s = value.toString(); Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(String.class) && p.matcher(s)) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(String.class) && p.matcher(s).find()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
        "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) value; Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } else { addFieldError(fieldName, object); } }"
    ],
    "validation_result": [
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(String.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) value; Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(URL.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(Integer.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(Object.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); Matcher m = p.matcher(value.toString()); if (m.matches()) { return; } String s = value.toString(); Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(String.class) && p.matcher(s)) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(String.class) && p.matcher(s).find()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }",
            "correctness": "test_success"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) value; Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } else { addFieldError(fieldName, object); } }",
            "correctness": "compile_success"
        }
    ]
}