{
    "function range": "2,5-112,5",
    "output": [
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } else { } } parameters = null; } else { } } }",
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } } } else { } } } } } } } } } }",
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } else { } } parameters = null; } } else { } } }",
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } } } else { } } } } } } } } } } }",
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } } } else { } } } } } } } } } } } }",
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } } } else { } } } } } } } } } } } } }",
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } } } else { } } } } } } } } } } } } } } }",
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } } } else { } } } } } } } } } } } } } } } } }",
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } else { } } parameters = null; } else { } } trigger = null; } trigger = null; }",
        "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } else { } } parameters = null; } else { } } trigger = null; } trigger = null; } trigger.getParameters(); } }"
    ],
    "validation_result": [
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } else { } } parameters = null; }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } else { } } parameters = null; }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } else { } } parameters = null; }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item!= null) { if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){ if(!(item instanceof Queue.Task)){ String s; if(item instanceof Describable){ s = ((Describable) item).getDescriptor().getDisplayName(); }else{ s = item.getClass().getName(); } throw new AbortException(\"The item named \" + job + \" is a \" + s + \" which is not something that can be built\"); }else{ if (step.getParameters() == null || step.getParameters().isEmpty()) { Queue.Task task = (Queue.Task) item; String itemEncoded = ModelHyperlinkNote.encodeTo(item); listener.getLogger().println(\"Scheduling item: \" +itemEncoded ); String taskName = task.getFullDisplayName(); String name = Messages.BuildTriggerStepExecution_building_(taskName); LabelAction labelAction = new LabelAction(name); node.addAction(labelAction); List<Action> actions = new ArrayList<>(); if (step.getWait()) { ItemContext context = getContext(); boolean isPropagate = step.isPropagate(); actions.add(new BuildTriggerAction(context, isPropagate )); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context}); } Cause.UpstreamCause cause = new Cause.UpstreamCause(item); } CauseAction causeAction = new CauseAction(cause); actions.add( causeAction); } } } else { Integer quietPeriod = step.getQuietPeriod(); if (null) { try { Class<?> parameters = task.getClass(); } } else { } } parameters = null; }",
            "correctness": "uncompilable"
        }
    ]
}