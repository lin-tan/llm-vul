{
    "function range": "2,1-27,1",
    "output": [
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { final String targetDirPath = targetDirectory.getCanonicalPath(); final ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory is null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())); { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath()) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startswith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory is null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry; } }",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { final String targetDirPath = targetDirectory.getCanonicalPath(); final ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } writer.close(); }"
    ],
    "validation_result": [
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
            "correctness": "compile_success"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { final String targetDirPath = targetDirectory.getCanonicalPath(); final ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory is null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
            "correctness": "compile_success"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
            "correctness": "compile_success"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())); { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath()) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startswith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } }",
            "correctness": "compile_success"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { if (targetDirectory == null) { throw new IllegalArgumentException(\"targetDirectory is null\"); } String targetDirPath = targetDirectory.getCanonicalPath(); ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry; } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { final String targetDirPath = targetDirectory.getCanonicalPath(); final ArchiveEntry nextEntry = supplier.getNextReadableEntry(); while (nextEntry!= null) { File f = new File(targetDirectory, nextEntry.getName()); if (!f.getCanonicalPath().startsWith(targetDirPath)) { throw new IOException(\"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory); } if (nextEntry.isDirectory()) { if (!f.isDirectory() &&!f.mkdirs()) { throw new IOException(\"failed to create directory \" + f); } } else { File parent = f.getParentFile(); if (!parent.isDirectory() &&!parent.mkdirs()) { throw new IOException(\"failed to create directory \" + parent); } try (OutputStream o = Files.newOutputStream(f.toPath())) { writer.writeEntryDataTo(nextEntry, o); } } nextEntry = supplier.getNextReadableEntry(); } writer.close(); }",
            "correctness": "uncompilable"
        }
    ]
}