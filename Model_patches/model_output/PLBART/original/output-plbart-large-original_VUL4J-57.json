{
    "function range": "2,1-89,1",
    "output": [
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } } }",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } } task = null; } else { } item = null; } }",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } } task = null; } else { } item = null; } else { } }",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } } else { if (item.getClass()!= null) { throw new IllegalArgumentException(); } } } }",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } } else { if (item.getClass()!= null) { throw new IllegalArgumentException(); } } else { } } }",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } } else { if (item.getClass()!= null) { throw new IllegalArgumentException(); } } item = null; }",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } } else { if (item.getClass()!= null) { throw new IllegalArgumentException(); } } item = null; } }",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } } else { if (item.getClass()!= null) { throw new IllegalArgumentException(); } } } else { } } }",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } } else { if (item.getClass()!= null) { throw new IllegalArgumentException(); } } item.getClass(); } }",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } } else { if (item.getClass()!= null) { throw new IllegalArgumentException(); } } item = null; } else { } }"
    ],
    "validation_result": [
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } } task = null; }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } } task = null; }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override public boolean start() throws Exception { String job = step.getJob(); Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class); if (item == null) { throw new AbortException(\"No item named \" + job + \" found\"); } if (item instanceof Job) { throw new AbortException(\"Waiting for non-job items is not supported\"); } if (item instanceof ParameterizedJobMixIn.ParameterizedJob) { final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item; listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project)); node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullName()));); } if (step.getWait()) { if (step.getWait()) { context = getContext(); actions.add(new BuildTriggerAction(context, step.isPropagate())); LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context}); } actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun))); } actions.add(new CauseAction(new Cause.UpstreamCause(project)); parameters = step.getParameters(); if (parameters!= null) { parameters = completeDefaultParameters(parameters, (Job) project.getQuietPeriod()); } parameters = step.getQuietPeriod(); if (parameters == null) { quietPeriod = project.getQuietPeriod(); } QueueTaskFuture<?> f = new ParameterizedJobMixIn() { @Override protected Job asJob() { return (Job) project; } }.scheduleBuild2(tasks.toArray(new Action[actions.size()])); if (f == null) { throw new AbortException(\"\"); } } else { if (item instanceof Queue.Task) { } task = null; } else { context = getContext(); } }",
            "correctness": "uncompilable"
        }
    ]
}