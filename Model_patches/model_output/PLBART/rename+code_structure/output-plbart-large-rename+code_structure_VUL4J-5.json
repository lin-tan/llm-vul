{
    "function range": "2,5-40,5",
    "output": [
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".pdf\")) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.length() > 0 && fpath.endsWith(\".pdf\")) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.length() > 0 && fpath.length() < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.exists()) { if (fpath.length() > 0 && fpath.length() < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && a.exists()) { if (fpath.length() > 0 && fpath.length() > a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && a.exists()) { if (fpath.length() > 0 && fpath.length() < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.length() > 0 && fpath.length ( ) > 0 && fpath.length ( ) < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.exists()) { if (fpath.length() > 0 && fpath.length() < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && a.exists()) { if (fpath.length() > 0 && fpath.length() > a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } } }",
        "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && a.exists()) { if (fpath.length() > 0 && fpath.length() < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } } }"
    ],
    "validation_result": [
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".pdf\")) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.endsWith(\".pdf\")) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.length() > 0 && fpath.endsWith(\".pdf\")) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.length() > 0 && fpath.endsWith(\".pdf\")) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.length() > 0 && fpath.length() < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.length() > 0 && fpath.length() < f.length()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }"
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.length() > 0 && fpath.length ( ) > 0 && fpath.length ( ) < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.length() > 0 && fpath.length ( ) > 0 && fpath.length ( ) < f.length()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && fpath.exists()) { if (fpath.length() > 0 && fpath.length() < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } } }",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && fpath.exists()) { if (fpath.length() > 0 && fpath.length() < f.length()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && a.exists()) { if (fpath.length() > 0 && fpath.length() > a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && f.exists()) { if (fpath.length() > 0 && fpath.length() > f.length()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } } }"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder) throws IOException { for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) { String name = followingItem.acquireTitle(); File a = new File(objectiveFolder, name); String fpath = a.getCanonicalPath(); if (fpath!= null && a.exists()) { if (fpath.length() > 0 && fpath.length() < a.length()) { if (!followingItem.whetherFolder()) { File upperFolder = a.getParentFile(); if (upperFolder.mkdirs() || upperFolder.whetherFolder()) { Path fp = a.toPath(); try (OutputStream u = Files.newOutputStream(fp)) { noter.noteDownItemInformationTo(followingItem, u); } }else{ String s = \"failed to create directory \" + upperFolder; throw new IOException(s); } } else { if (a.mkdirs() || a.whetherFolder()) { continue; }else{ String s = \"failed to create directory \" + a; throw new IOException(s); } } }else{ String s = \"expanding \" + followingItem.acquireTitle() + \" would create file outside of \" + objectiveFolder; throw new IOException(s); } } } }",
            "correctness": "compile_success",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory) throws IOException { for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) { String name = nextEntry.getName(); File f = new File(targetDirectory, name); String fpath = f.getCanonicalPath(); if (fpath!= null && f.exists()) { if (fpath.length() > 0 && fpath.length() < f.length()) { if (!nextEntry.isDirectory()) { File parent = f.getParentFile(); if (parent.mkdirs() || parent.isDirectory()) { Path fp = f.toPath(); try (OutputStream o = Files.newOutputStream(fp)) { writer.writeEntryDataTo(nextEntry, o); } }else{ String s = \"failed to create directory \" + parent; throw new IOException(s); } } else { if (f.mkdirs() || f.isDirectory()) { continue; }else{ String s = \"failed to create directory \" + f; throw new IOException(s); } } }else{ String s = \"expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory; throw new IOException(s); } } } }"
        }
    ]
}