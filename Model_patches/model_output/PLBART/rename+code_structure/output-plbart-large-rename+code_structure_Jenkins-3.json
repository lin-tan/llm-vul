{
    "function range": "38,17-40,17",
    "output": [
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponents.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return uiComponents.values(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponents.values(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireAll(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return mainUIComponents.values(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponents.acquireAll(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue, false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
        "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; } }"
    ],
    "validation_result": [
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return View.getAll(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        },
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponents.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return UIComponents.getAll(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        },
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return uiComponents.values(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return views.values(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        },
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponents.values(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return UIComponents.values(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        },
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireAll(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return View.acquireAll(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        },
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return View.getAll(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        },
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return mainUIComponents.values(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return mainUIComponents.values(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        },
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponents.acquireAll(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return UIComponents.acquireAll(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        },
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue, false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return View.getAll(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        },
        {
            "patch": "@Override public LookupIndexCreator constructLookupIndex() { LookupIndexCreator lookupIndexCreator = super.constructLookupIndex(); lookupIndexCreator.attach(acquireMainUIComponent().constructLookupIndex()); AggregationLookupIndex<PeakDegreeElement> aggregationLookupIndexElement=new AggregationLookupIndex<PeakDegreeElement>() { protected LookupElement acquire(String clue) { return acquireElementUsingWholeName(clue, PeakDegreeElement.class); } protected Collection<PeakDegreeElement> whole() { return acquireEveryElement(PeakDegreeElement.class); } }; AggregationLookupIndex aggregationLookupIndexComputingMachine = new AggregationLookupIndex() { protected Collection<ComputingMachine> whole() { return computingMachines.values(); } protected ComputingMachine acquire(String clue) { return acquireComputingMachine(clue); } }; lookupIndexCreator.attach(aggregationLookupIndexElement); lookupIndexCreator.attach(\"configure\", \"config\",\"configure\"); lookupIndexCreator.attach(aggregationLookupIndexComputingMachine); lookupIndexCreator.attach(\"log\"); lookupIndexCreator.attach(\"manage\"); AggregationLookupIndex aggregationLookupIndexUIComponent = new AggregationLookupIndex() { protected Collection<UIComponent> whole() { return UIComponent.acquireWhole(); } protected UIComponent acquire(String clue) { return acquireUIComponent(clue); } }; AggregationLookupIndex aggregationLookupIndexExploiter = new AggregationLookupIndex() { protected Collection<Exploiter> whole() { return Exploiter.acquireWhole(); } protected Exploiter acquire(String clue) { return Exploiter.acquire(clue,false); } }; lookupIndexCreator.attach(aggregationLookupIndexUIComponent); lookupIndexCreator.attach(aggregationLookupIndexExploiter); return lookupIndexCreator; }",
            "correctness": "uncompilable",
            "translated": "@Override public SearchIndexBuilder makeSearchIndex() { SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex(); searchIndexBuilder.add(getPrimaryView().makeSearchIndex()); CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() { protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); } protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); } }; CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() { protected Collection<Computer> all() { return computers.values(); } protected Computer get(String key) { return getComputer(key); } }; searchIndexBuilder.add(collectionSearchIndexItem); searchIndexBuilder.add(\"configure\", \"config\",\"configure\"); searchIndexBuilder.add(collectionSearchIndexComputer); searchIndexBuilder.add(\"log\"); searchIndexBuilder.add(\"manage\"); CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() { protected Collection<View> all() { return View.getAll(); } protected View get(String key) { return getView(key); } }; CollectionSearchIndex collectionSearchIndexUser = new CollectionSearchIndex() { protected Collection<User> all() { return User.getAll(); } protected User get(String key) { return User.get(key,false); } }; searchIndexBuilder.add(collectionSearchIndexView); searchIndexBuilder.add(collectionSearchIndexUser); return searchIndexBuilder; }"
        }
    ]
}