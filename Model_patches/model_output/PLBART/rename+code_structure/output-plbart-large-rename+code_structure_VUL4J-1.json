{
    "function range": "2,5-63,5",
    "output": [
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } return (T) transformBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (constituentTemplate == null) { return null; } else { return (T) transformBatch(analyzer, constituentTemplate, batch); } }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (constituentTemplate == null) { return null; } return (T) transformBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (! (constituentTemplate instanceof Class)) { return null; } else { return (T) transformBatch(analyzer, constituentTemplate, batch); } }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (! (constituentTemplate instanceof Class)) { return null; } return (T) transformBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (attributeTitile == null) { return (T) null; } return (T) transformBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (attributeTitile!= null && attributeTitile instanceof Object) { return (T) transformBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (constituentTemplate == null) { return null; } else { return (T) transformBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (! (constituentTemplate instanceof Class)) { return null; } else { return (T) transformBatch(analyzer, constituentTemplate, batch); }",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (constituentTemplate == null) { return null; } else { return (T) transformBatch(analyzer, constituentTemplate, batch); } } }"
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) { final JsonTokenizer tokenizer = analyzer.tokenizer; switch (tokenizer.token()) { case JSONToken.LITERAL_STR: byte[] bytes = tokenizer.contentsOfBytes(); tokenizer.followingToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: tokenizer.followingToken(JSONToken.COMMA); return null; default: break; } JsonBatch batch = new JsonBatch(); Class constituentTemplate; Type constituentCategory; if (!(category instanceof GenericArrayType)) { constituentCategory = ((Class) category).acquireCategoryOfComponent(); constituentTemplate = ((Class) category).acquireCategoryOfComponent(); } else { constituentCategory = ((GenericArrayType) category).getGenericComponentType(); if (! (constituentCategory instanceof TypeVariable)) { constituentTemplate = CategoryTools.acquireClass(constituentCategory); } else { TypeVariable categoryVariable = (TypeVariable) constituentCategory; Type categoryOfObject = analyzer.obtainContext().category; if (!(categoryOfObject instanceof ParameterizedType)) { Type type_ = categoryVariable.getBounds()[0]; constituentTemplate = CategoryTools.acquireClass(type_); } else { ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject; Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType(); Type realCategory = null; if (originalCategoryOfObject instanceof Class) { TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters(); int x = 0; while( x < objectCategoryParameters.length) { String i_name = objectCategoryParameters[x].getName(); String typeVar_name = categoryVariable.getName(); if (!i_name.equals(typeVar_name)) { x++; continue; } realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x]; x++; } } constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class; } } } if (constituentTemplate == null) { return null; } else { return (T) transformBatch(analyzer, constituentTemplate, batch); } } }",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) { final JSONLexer lexer = parser.lexer; switch (lexer.token()) { case JSONToken.LITERAL_STRING: byte[] bytes = lexer.bytesValue(); lexer.nextToken(JSONToken.COMMA); return (T) bytes; case JSONToken.NULL: lexer.nextToken(JSONToken.COMMA); return null; default: break; } JSONArray array = new JSONArray(); Class componentClass; Type componentType; if (!(type instanceof GenericArrayType)) { componentType = ((Class) type).getComponentType(); componentClass = ((Class) type).getComponentType(); } else { componentType = ((GenericArrayType) type).getGenericComponentType(); if (! (componentType instanceof TypeVariable)) { componentClass = TypeUtils.getClass(componentType); } else { TypeVariable typeVar = (TypeVariable) componentType; Type objType = parser.getContext().type; if (!(objType instanceof ParameterizedType)) { Type type_ = typeVar.getBounds()[0]; componentClass = TypeUtils.getClass(type_); } else { ParameterizedType objParamType = (ParameterizedType) objType; Type objRawType = objParamType.getRawType(); Type actualType = null; if (objRawType instanceof Class) { TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters(); int i = 0; while( i < objTypeParams.length) { String i_name = objTypeParams[i].getName(); String typeVar_name = typeVar.getName(); if (!i_name.equals(typeVar_name)) { i++; continue; } actualType = objParamType.getActualTypeArguments()[i]; i++; } } componentClass = (actualType instanceof Class)? (Class) actualType:Object.class; } } } if (componentClass == null) { return null; } else { return (T) transformBatch(parser, componentClass, array); } } }"
        }
    ]
}