{
    "function range": "2,2-19,2",
    "output": [
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
        "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
        "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdir(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
        "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdir(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
        "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
        "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence (input, outputFile); } } else { outputFile.mkdirs(); } }",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence (input, outputFile); } } else { outputFile.mkdirs(); } }"
    ],
    "validation_result": [
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "compile_success",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        },
        {
            "patch": "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "compile_success",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { outFile.mkdirs(); } else if (entry.isRegularFile()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        },
        {
            "patch": "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { outFile.mkdirs(); } else if (entry.isRegularFile()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdir(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { outFile.mkdir(); } else if (entry.isRegularFile()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        },
        {
            "patch": "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdir(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { outFile.mkdir(); } else if (entry.isRegularFile()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        },
        {
            "patch": "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { outFile.mkdirs(); } else if (entry.isRegularFile()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence(input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { outFile.mkdirs(); } else if (entry.isRegularFile()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        },
        {
            "patch": "public static void saveItem (ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence (input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { outFile.mkdirs(); } else if (entry.isRegularFile()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder) throws IOException { String entryName = item.getName(); File outputFile = new File(targetFolder,entryName); if (item.isDirectory()) { outputFile.mkdirs(); } else if (item.isRegularFile()) { File parentFile = outputFile.getParentFile(); parentFile.mkdirs(); try (InputStream input = compressedFile.getInputStream(item)) { InputOutputUtility.saveDataSequence (input, outputFile); } } else { outputFile.mkdirs(); } }",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException { String entryName = entry.getName(); File outFile = new File(destDir,entryName); if (entry.isDirectory()) { outFile.mkdirs(); } else if (entry.isRegularFile()) { File parentFile = outFile.getParentFile(); parentFile.mkdirs(); try (InputStream in = zipFile.getInputStream(entry)) { IOUtil.writeStream(in, outFile); } } else { outFile.mkdirs(); } }"
        }
    ]
}