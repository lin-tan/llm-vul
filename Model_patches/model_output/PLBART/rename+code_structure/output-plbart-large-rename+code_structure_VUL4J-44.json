{
    "function range": "2,2-20,2",
    "output": [
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (charValue == '%') { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (exempt!= null && exempt.length > 0) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if( exempt!= null && exempt.length > 0 ) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (exempt!= null && exempt.length > 0){ byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (charValue == '%') { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; } return charString; }",
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if( exempt!= null && exempt.length > 0 ) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString ; }",
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (exempt!= null && exempt.length > 0){ byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; } return charString; }",
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (exempt!= null && exempt.length > 0) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; } return charString; }",
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if( exempt!= null && exempt.length > 0 ) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; } return charString; }",
        "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if( exempt!= null && exempt.length > 0 ) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; } }"
    ],
    "validation_result": [
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (charValue == '%') { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (charValue == '%') { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        },
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (exempt!= null && exempt.length > 0) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        },
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if( exempt!= null && exempt.length > 0 ) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        },
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (exempt!= null && exempt.length > 0){ byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        },
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (charValue == '%') { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if (charValue == '%') { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        },
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if( exempt!= null && exempt.length > 0 ) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString ; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        },
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (exempt!= null && exempt.length > 0){ byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        },
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if (exempt!= null && exempt.length > 0) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        },
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if( exempt!= null && exempt.length > 0 ) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        },
        {
            "patch": "public String convertChar( char[] exempt, Character a ) { char charValue = a.charValue(); String charString = String.valueOf(charValue); if( exempt!= null && exempt.length > 0 ) { byte[] byteArray = convertToUtf8Bytes(charString); StringBuilder x = new StringBuilder(byteArray.length * 3); int i =0; while(i<byteArray.length){ x.append('%'); attachTwoUppercaseHexadecimal(x, byteArray[i]); i++; } return x.toString(); } return charString; }",
            "correctness": "compile_success",
            "translated": "public String encodeCharacter( char[] immune, Character c ) { char charValue = c.charValue(); String cStr = String.valueOf(charValue); if( immune!= null && immune.length > 0 ) { byte[] bytes = toUtf8Bytes(cStr); StringBuilder sb = new StringBuilder(bytes.length * 3); int i =0; while(i<bytes.length){ sb.append('%'); appendTwoUpperHex(sb, bytes[i]); i++; } return sb.toString(); } return cStr; }"
        }
    ]
}