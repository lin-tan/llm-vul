{
    "function range": "2,1-16,1",
    "output": [
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) content; Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = content.toString(); Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = new String(content.toString()); Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = String.valueOf(content); Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = content.toString(); if (content_class.equals(String.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = content.toString(); if (content_class.equals(URL.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = item.toString(); if (content_class.equals(String.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = content.toString(); if (content_class.equals(String.class) && p.matcher(s)) { return; } Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) content; Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } else { attachAttributeError(attributeTitle, item); } }",
        "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = new String(content.toString()); Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } else { attachAttributeError(attributeTitle, item); } }"
    ],
    "validation_result": [
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) content; Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
            "correctness": "compile_success",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) value; Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }"
        },
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = content.toString(); Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
            "correctness": "compile_success",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }"
        },
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = new String(content.toString()); Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
            "correctness": "compile_success",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = new String(value.toString()); Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }"
        },
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = String.valueOf(content); Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
            "correctness": "compile_success",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = String.valueOf(value); Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }"
        },
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = content.toString(); if (content_class.equals(String.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
            "correctness": "compile_success",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(String.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }"
        },
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = content.toString(); if (content_class.equals(URL.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
            "correctness": "uncompilable",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(URL.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }"
        },
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = item.toString(); if (content_class.equals(String.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
            "correctness": "compile_success",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = object.toString(); if (value_class.equals(String.class) && p.matcher(s).matches()) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }"
        },
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = content.toString(); if (content_class.equals(String.class) && p.matcher(s)) { return; } Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } }",
            "correctness": "uncompilable",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = value.toString(); if (value_class.equals(String.class) && p.matcher(s)) { return; } Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } }"
        },
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) content; Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } else { attachAttributeError(attributeTitle, item); } }",
            "correctness": "compile_success",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = (String) value; Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } else { addFieldError(fieldName, object); } }"
        },
        {
            "patch": "public void approve(Object item) throws ValidationException { String attributeTitle = acquireAttributeTitle(); Object content = this.acquireAttributeContent(attributeTitle, item); if (content!= null && content.toString().length()!= 0) { Class content_class = content.getClass(); String urlRegex = acquireUrlRegularExpression(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = new String(content.toString()); Matcher m = p.matcher(s); if (content_class.equals(String.class) && m.matches()) { return; } attachAttributeError(attributeTitle, item); } else { attachAttributeError(attributeTitle, item); } }",
            "correctness": "compile_success",
            "translated": "public void validate(Object object) throws ValidationException { String fieldName = getFieldName(); Object value = this.getFieldValue(fieldName, object); if (value!= null && value.toString().length()!= 0) { Class value_class = value.getClass(); String urlRegex = getUrlRegex(); Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE); String s = new String(value.toString()); Matcher m = p.matcher(s); if (value_class.equals(String.class) && m.matches()) { return; } addFieldError(fieldName, object); } else { addFieldError(fieldName, object); } }"
        }
    ]
}