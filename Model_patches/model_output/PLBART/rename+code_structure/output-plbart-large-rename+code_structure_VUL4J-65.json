{
    "function range": "2,5-28,5",
    "output": [
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if(position >= 0 && position < titile.length()){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if (position >= 0 && position < titile.length()){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if (position >= 0 && position < titile.length()) { f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if(position >= 0 && position < titile.length()) { f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if(position >= 0 && position < titile.length() - 1){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if (position >= 0 && position < titile.length() - 1){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); if(f.isDirectory()){ f.mkdirs(); } else { int position = f.lastIndexOf('.'); f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if(position >= 0 && position < titile.length() - 1){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f ; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if (position >= 0 && position < titile.length() - 1){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f ; }",
        "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); if(f.isDirectory()){ f.mkdirs(); } else { int position = f.lastIndexOf('.'); f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f ; }"
    ],
    "validation_result": [
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if(position >= 0 && position < titile.length()){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); int index = name.indexOf('-'); if(index >= 0 && index < name.length()){ file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if (position >= 0 && position < titile.length()){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); int index = name.indexOf('-'); if(index >= 0 && index < name.length()){ file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if (position >= 0 && position < titile.length()) { f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); int index = name.indexOf('-'); if(index >= 0 && index < name.length()){ file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if(position >= 0 && position < titile.length()) { f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); int index = name.indexOf('-'); if(index >= 0 && index < name.length()){ file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if(position >= 0 && position < titile.length() - 1){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); int index = name.indexOf('-'); if(index >= 0 && index < name.length() - 1){ file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if (position >= 0 && position < titile.length() - 1){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); int index = name.indexOf('-'); if(index >= 0 && index < name.length() - 1){ file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); if(f.isDirectory()){ f.mkdirs(); } else { int position = f.lastIndexOf('.'); f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f; }",
            "correctness": "uncompilable",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); if(file.isDirectory()){ file.mkdirs(); } else { int index = file.lastIndexOf('.'); file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if(position >= 0 && position < titile.length() - 1){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f ; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); int index = name.indexOf('-'); if(index >= 0 && index < name.length() - 1){ file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); int position = titile.indexOf('-'); if (position >= 0 && position < titile.length() - 1){ f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f ; }",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); int index = name.indexOf('-'); if(index >= 0 && index < name.length() - 1){ file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) { int m = titile.indexOf('?'); titile = m > 0? titile.substring(0, m):titile; int point = titile.indexOf('.'); String beginning; String postfix; if(point >= 0){ beginning = titile.substring(0, point); postfix = titile.substring(point); }else{ beginning = titile; postfix = \"\"; } File f = new File(folder, titile); if(f.isDirectory()){ f.mkdirs(); } else { int position = f.lastIndexOf('.'); f = new File(folder, beginning + \"-\" + position + postfix); } File parentFile = f.getParentFile(); parentFile.mkdirs(); return f ; }",
            "correctness": "uncompilable",
            "translated": "static public File allocateFile(File dir, String name) { int q = name.indexOf('?'); name = q > 0? name.substring(0, q):name; int dot = name.indexOf('.'); String prefix; String suffix; if(dot >= 0){ prefix = name.substring(0, dot); suffix = name.substring(dot); }else{ prefix = name; suffix = \"\"; } File file = new File(dir, name); if(file.isDirectory()){ file.mkdirs(); } else { int index = file.lastIndexOf('.'); file = new File(dir, prefix + \"-\" + index + suffix); } File parentFile = file.getParentFile(); parentFile.mkdirs(); return file; }"
        }
    ]
}