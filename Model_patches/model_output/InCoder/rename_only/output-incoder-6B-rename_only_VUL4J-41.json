{
    "output": [
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                ",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, final String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( target",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile ",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final int setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile ",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation, final String mimeType )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new File",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, final String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try {\n                output = new FileOutputStream( targetFile );\n",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new BufferedOutputStream( new File",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    <|mask:0|>\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n<|mask:0|>try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n\nprotected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile, "
    ],
    "validation_result": [
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile != null )\n        {\n            parentFile.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}",
            "correctness": "compile_success",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    /* BUG: \n     * try\n     * FIXED: \n     */\n    try\n    {\n        if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n        {\n            return;\n        }\n        final File dirF = f.getParentFile();\n        if ( dirF != null )\n        {\n            dirF.mkdirs();\n        }\n        if ( !StringUtils.isEmpty( symlinkDestination ) )\n        {\n            SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n        }\n        else if ( isDirectory )\n        {\n            f.mkdirs();\n        }\n        else\n        {\n            OutputStream out = null;\n            try\n            {\n                out = new FileOutputStream( f );\n                IOUtil.copy( compressedInputStream, out );\n                out.close();\n                out = null;\n            }\n            finally\n            {\n                IOUtil.close( out );\n            }\n        }\n        f.setLastModified( entryDate.getTime() );\n        if ( !isIgnorePermissions() && mode != null && !isDirectory )\n        {\n            ArchiveEntryUtils.chmod( f, mode );\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n    }\n}"
        }
    ]
}