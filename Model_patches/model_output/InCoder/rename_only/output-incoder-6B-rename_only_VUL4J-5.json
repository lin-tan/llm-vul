{
    "output": [
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File ",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>final String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n    DocumentItem firstItem = provider.acquireFirstLegibleItem();\n    while (firstItem != null) {\n        File f = new File(objectiveFolder, firstItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + firstItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (firstItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteUpItemInformationTo(firstItem, u);\n            }\n        }\n        firstItem = provider.acquireFirstLegibleItem();\n    }\n    DocumentItem lastItem = provider.acquireLastLegibleItem();\n    while (lastItem != null) {\n        File f = new File(objectiveFolder, lastItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + lastItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (lastItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(lastItem, u);\n            }\n        }\n        lastItem = provider.acquireLastLegibleItem();\n    }\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                ",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void shrink(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File subjectFolder)\n    throws IOException {\n    /* BUG: \n     * String subjectDirectoryPath = subjectFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem subjectItem = provider.acquireSubjectItem();\n    while (subjectItem != null) {\n        File ",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (fol",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem goalItem = provider.acquireGoalItem();\n    while (goalItem != null) {\n        File ",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, String objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File ",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG:\n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED:\n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File ",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    <|mask:0|>\n    DocumentItem followingItem = provider.acquireFollowingLegibleItem();\n    while (followingItem != null) {\n        File f = new File(objectiveFolder, followingItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + followingItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (followingItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(followingItem, u);\n            }\n        }\n        followingItem = provider.acquireFollowingLegibleItem();\n    }\n}\n<|mask:0|>DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}\n\nprivate void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        if (objective"
    ],
    "validation_result": [
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    /* BUG: \n     * String targetDirPath = targetDirectory.getCanonicalPath();\n     * FIXED: \n     */\n    ArchiveEntry objectiveItem = supplier.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(targetDirectory, objectiveItem.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (objectiveItem.isDirectory()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() && !parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(objectiveItem, o);\n            }\n        }\n        objectiveItem = supplier.acquireObjectiveItem();\n    }\n}"
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    /* BUG: \n     * String targetDirPath = targetDirectory.getCanonicalPath();\n     * FIXED: \n     */\n    ArchiveEntry objectiveItem = supplier.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(targetDirectory, objectiveItem.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (objectiveItem.isDirectory()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() && !parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(objectiveItem, o);\n            }\n        }\n        objectiveItem = supplier.acquireObjectiveItem();\n    }\n}"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    /* BUG: \n     * String targetDirPath = targetDirectory.getCanonicalPath();\n     * FIXED: \n     */\n    ArchiveEntry objectiveItem = supplier.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(targetDirectory, objectiveItem.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (objectiveItem.isDirectory()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() && !parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(objectiveItem, o);\n            }\n        }\n        objectiveItem = supplier.acquireObjectiveItem();\n    }\n}"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    /* BUG: \n     * String targetDirPath = targetDirectory.getCanonicalPath();\n     * FIXED: \n     */\n    ArchiveEntry objectiveItem = supplier.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(targetDirectory, objectiveItem.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (objectiveItem.isDirectory()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() && !parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(objectiveItem, o);\n            }\n        }\n        objectiveItem = supplier.acquireObjectiveItem();\n    }\n}"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    /* BUG: \n     * String targetDirPath = targetDirectory.getCanonicalPath();\n     * FIXED: \n     */\n    ArchiveEntry objectiveItem = supplier.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(targetDirectory, objectiveItem.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (objectiveItem.isDirectory()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() && !parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(objectiveItem, o);\n            }\n        }\n        objectiveItem = supplier.acquireObjectiveItem();\n    }\n}"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    /* BUG: \n     * String targetDirPath = targetDirectory.getCanonicalPath();\n     * FIXED: \n     */\n    ArchiveEntry objectiveItem = supplier.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(targetDirectory, objectiveItem.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (objectiveItem.isDirectory()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() && !parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(objectiveItem, o);\n            }\n        }\n        objectiveItem = supplier.acquireObjectiveItem();\n    }\n}"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    /* BUG: \n     * String targetDirPath = targetDirectory.getCanonicalPath();\n     * FIXED: \n     */\n    ArchiveEntry objectiveItem = supplier.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(targetDirectory, objectiveItem.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (objectiveItem.isDirectory()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() && !parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(objectiveItem, o);\n            }\n        }\n        objectiveItem = supplier.acquireObjectiveItem();\n    }\n}"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    /* BUG: \n     * String targetDirPath = targetDirectory.getCanonicalPath();\n     * FIXED: \n     */\n    ArchiveEntry objectiveItem = supplier.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(targetDirectory, objectiveItem.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (objectiveItem.isDirectory()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() && !parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(objectiveItem, o);\n            }\n        }\n        objectiveItem = supplier.acquireObjectiveItem();\n    }\n}"
        },
        {
            "patch": "private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    /* BUG: \n     * String objectiveDirectoryPath = objectiveFolder.getCanonicalPath();\n     * FIXED: \n     */\n    DocumentItem objectiveItem = provider.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(objectiveFolder, objectiveItem.acquireTitle());\n        if (!f.getCanonicalPath().startsWith(objectiveDirectoryPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.acquireTitle()\n                + \" would create file outside of \" + objectiveFolder);\n        }\n        if (objectiveItem.whetherFolder()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File upperFolder = f.getParentFile();\n            if (!upperFolder.isDirectory() && !upperFolder.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + upperFolder);\n            }\n            try (OutputStream u = Files.newOutputStream(f.toPath())) {\n                noter.noteDownItemInformationTo(objectiveItem, u);\n            }\n        }\n        objectiveItem = provider.acquireObjectiveItem();\n    }\n}",
            "correctness": "uncompilable",
            "translated": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    /* BUG: \n     * String targetDirPath = targetDirectory.getCanonicalPath();\n     * FIXED: \n     */\n    ArchiveEntry objectiveItem = supplier.acquireObjectiveItem();\n    while (objectiveItem != null) {\n        File f = new File(targetDirectory, objectiveItem.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + objectiveItem.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (objectiveItem.isDirectory()) {\n            if (!f.isDirectory() && !f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() && !parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(objectiveItem, o);\n            }\n        }\n        objectiveItem = supplier.acquireObjectiveItem();\n    }\n}"
        }
    ]
}