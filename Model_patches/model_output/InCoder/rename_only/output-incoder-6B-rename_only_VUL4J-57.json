{
    "output": [
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    hearer.getLogger().println(\"Scheduling item: \" + ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean middle() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    hearer.getLogger().println(\"Scheduling item: \" + ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    hearer.getLogger().println(\"Scheduling item: \" + ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean middle() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    hearer.getLogger().println(\"Scheduling item: \" + ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean middle() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    hearer.getLogger().println(\"Scheduling project: \" + ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean middle() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    hearer.getLogger().println(\"Scheduling project: \" + ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    if (measure.acquireDelay()) {\n        hearer.getLogg",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    if (measure.acquireDelay()) {\n        hearer.getLogg",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    <|mask:0|>\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter != null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter() != null && !measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n            }\n        }\n        if (lullTimePeriod == null) {\n            lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n        }\n        AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(undertaking, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + occupation + \" is a \"\n                + (point instanceof Describable\n                ? ((Describable) point).getDescriptor().getDisplayName()\n                : point.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n<|mask:0|>hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n    knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(point.getFullDisplayName())));\n    List<Activity> action = new ArrayList<>();\n    if (measure.acquireDelay()) {\n        MeasureCircumstance linguisticContext = acquireLinguisticContext();\n        action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{point, linguisticContext});\n    }\n    action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n    Integer lullTimePeriod = measure.acquireLullTimePeriod();\n    if (lullTimePeriod == null) {\n        try {\n            Method acquireLullTimePeriod = point.getClass().getMethod(\"getQuietPeriod\");\n            if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(point);\n            }\n        } catch (NoExclusion v) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n        }\n    }\n    if (lullTimePeriod == null) {\n        lullTimePeriod = Jenkins.getActiveInstance().acquireLullTimePeriod();\n    }\n    AgendaConsequence agendaConsequence = Jenkins.getActiveInstance().getQueue().schedule2(point, lullTimePeriod,action);\n    if (agendaConsequence.isRefused()) {\n        throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n    }\n    if (measure.acquireDelay()) {\n        return false;\n    } else {\n        acquireLinguisticContext().alongAchiever(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n    /* BUG: \n     * if (measure.acquireDelay() && !(point instanceof Occupation)) {\n     * FIXED: \n     */\n    if (measure.acquireParameter() != null && !measure.acquireParameter"
    ],
    "validation_result": [
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        }
    ]
}