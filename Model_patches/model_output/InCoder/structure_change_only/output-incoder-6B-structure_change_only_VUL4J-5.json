{
    "output": [
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n   \n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {",
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n\n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       ",
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n   \n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {",
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n   \n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }",
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n\n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n",
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n   \n   \n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdir",
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n   \n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer) throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       ",
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n\n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer) throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"",
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n   \n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {",
        "<|endoftext|>   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n           \n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           <|mask:0|>\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n<|mask:0|>if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n                   }else{\n                       String s = \"failed to create directory \" + f;\n                       throw new IOException(s);\n                   }\n               }\n           }else{\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n       }\n   }\n\n   private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n       throws IOException {\n       for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n           String name = nextEntry.getName();\n           File f = new File(targetDirectory, name);\n           String fpath = f.getCanonicalPath();\n\n           /* BUG: \n            * if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n            * FIXED: \n            */\n           if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n               String s = \"expanding \" + nextEntry.getName()\n               + \" would create file outside of \" + targetDirectory;\n               throw new IOException(s);\n           }\n           \n           if (!f.exists()) {\n               if (!nextEntry.isDirectory()) {\n                   File parent = f.getParentFile();\n                   if (parent.isDirectory() || parent.mkdirs()) {\n                       Path fp = f.toPath();\n                       try (OutputStream o = Files.newOutputStream(fp)) {\n                           writer.writeEntryDataTo(nextEntry, o);\n                       }\n\n                   }else{\n                       String s = \"failed to create directory \" + parent;\n                       throw new IOException(s);\n                   }\n               } else {\n                   if (f.isDirectory() || f.mkdirs()) {\n                       continue;\n"
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        }
    ]
}