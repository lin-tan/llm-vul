{
    "output": [
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public int getAlgId() {\n       return algId;\n   }\n\n   public void setAlgId(int algId) {\n       this.algId = algId;\n   }\n\n   public int getHashSize() {\n       return hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public int getHashAlg() {\n       return hashAlg;\n   }\n\n",
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return this.rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return this.flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return this.format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return this.bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public int getAlgId() {\n       return this.algId;\n   }\n\n   public void setAlgId(int algId) {\n       this.algId = algId;\n   }\n\n   public int getHashSize() {\n       return this.hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public int getHashAlg() {\n       return this.",
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public EncryptionAlgorithm getAlgId() {\n       return algId;\n   }\n\n   public void setAlgId(EncryptionAlgorithm algId) {\n       this.algId = algId;\n   }\n\n   public int getHashSize() {\n       return hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public HashAlgorithm getHashAlg() {\n       return hash",
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return this.rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return this.flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return this.format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return this.bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public EncryptionAlgorithm getAlgId() {\n       return this.algId;\n   }\n\n   public void setAlgId(EncryptionAlgorithm algId) {\n       this.algId = algId;\n   }\n\n   public int getHashSize() {\n       return this.hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public HashAlgorithm getHashAl",
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public int getAlgId() {\n       return algId;\n   }\n\n   public void setAlgId(int algId) {\n       this.algId = algId;\n   }\n\n   public int getHashSize() {\n       return hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public HashAlgorithm getHashAlg() {\n       return hashAlg;\n",
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return this.rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return this.flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return this.format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return this.bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public int getAlgId() {\n       return this.algId;\n   }\n\n   public void setAlgId(int algId) {\n       this.algId = algId;\n   }\n\n   public int getHashSize() {\n       return this.hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public HashAlgorithm getHashAlg() {\n       ",
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return this.rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return this.flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return this.format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return this.bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public int getHashSize() {\n       return this.hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public int getHashAlg() {\n       return this.hashAlg;\n   }\n\n   public void setHashAlg(int hashAlg) {\n       this.hashAlg = hashAlg;\n   }\n\n   public EncryptionAlgorithm get",
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public EncryptionAlgorithm getAlgorithmId() {\n       return algId;\n   }\n\n   public void setAlgorithmId(EncryptionAlgorithm algId) {\n       this.algId = algId;\n   }\n\n   public int getHashSize() {\n       return hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public HashAlgorithm getHashAlgorithm() {\n       return hashAlg;",
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return this.rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return this.flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return this.format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return this.bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public EncryptionAlgorithm getAlgorithmId() {\n       return this.algId;\n   }\n\n   public void setAlgorithmId(EncryptionAlgorithm algId) {\n       this.algId = algId;\n   }\n\n   public int getHashSize() {\n       return this.hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public HashAlgorithm getHashAlgorithm() {\n",
        "<|endoftext|> public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       <|mask:0|>\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n<|mask:0|>int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }\n\n   @Override\n   public int hashCode() {\n       final int prime = 31;\n       int result = 1;\n       result = prime * result + this.rcount;\n       result = prime * result + this.flags;\n       result = prime * result + this.format;\n       result = prime * result + this.bitlen;\n       result = prime * result + this.algId;\n       result = prime * result + this.hashSize;\n       result = prime * result + this.hashAlg;\n       return result;\n   }\n\n   @Override\n   public boolean equals(Object obj) {\n       if (this == obj)\n           return true;\n       if (obj == null)\n           return false;\n       if (getClass() != obj.getClass())\n           return false;\n       ZipHeader other = (ZipHeader) obj;\n       if (this.rcount != other.rcount)\n           return false;\n       if (this.flags != other.flags)\n           return false;\n       if (this.format != other.format)\n           return false;\n       if (this.bitlen != other.bitlen)\n           return false;\n       if (this.algId != other.algId)\n           return false;\n       if (this.hashSize != other.hashSize)\n           return false;\n       if (this.hashAlg != other.hashAlg)\n           return false;\n       return true;\n   }\n\n   public int getRcount() {\n       return this.rcount;\n   }\n\n   public void setRcount(int rcount) {\n       this.rcount = rcount;\n   }\n\n   public int getFlags() {\n       return this.flags;\n   }\n\n   public void setFlags(int flags) {\n       this.flags = flags;\n   }\n\n   public int getFormat() {\n       return this.format;\n   }\n\n   public void setFormat(int format) {\n       this.format = format;\n   }\n\n   public int getBitlen() {\n       return this.bitlen;\n   }\n\n   public void setBitlen(int bitlen) {\n       this.bitlen = bitlen;\n   }\n\n   public int getHashSize() {\n       return this.hashSize;\n   }\n\n   public void setHashSize(int hashSize) {\n       this.hashSize = hashSize;\n   }\n\n   public int getHashAlg() {\n       return this.hashAlg;\n   }\n\n   public void setHashAlg(int hashAlg) {\n       this.hashAlg = hashAlg;\n   }\n\n   public int getAlg"
    ],
    "validation_result": [
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n       this.rcount = ZipLong.getValue(data, offset + 8);\n       this.flags = ZipShort.getValue(data, offset + 6);\n       this.format = ZipShort.getValue(data, offset);\n       this.bitlen = ZipShort.getValue(data, offset + 4);\n       int zv2 = ZipShort.getValue(data, offset + 2);\n       this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n       if (rcount <= 0) {\n           return;\n       }\n       this.hashSize = ZipShort.getValue(data, offset + 14);\n       int zv12 =  ZipShort.getValue(data, offset + 12);\n       this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n       /* BUG: \n        * int i = 0;\n        * FIXED: \n        */\n       int i = 0;\n       while ( i < this.rcount) {\n           i++;\n           int j = 0;\n           while ( j < this.hashSize) {\n               j++;\n           }\n       }\n   }",
            "correctness": "compile_success"
        }
    ]
}