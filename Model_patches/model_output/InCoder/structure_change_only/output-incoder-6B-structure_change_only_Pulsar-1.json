{
    "output": [
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           ",
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.DeleteEntryCallback deleteEntryCallback = new AsyncCallbacks.DeleteEntryCallback() {\n               @Override\n               public void deleteEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void deleteEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncDeleteEntry(positionImpl,deleteEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           ",
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.DeleteEntryCallback deleteEntryCallback = new AsyncCallbacks.DeleteEntryCallback() {\n               @Override\n               public void deleteEntryComplete(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n               @Override\n               public void deleteEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncDeleteEntry(positionImpl,deleteEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to delete message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, ",
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncDeleteEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           ",
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.DeleteEntryCallback deleteEntryCallback = new AsyncCallbacks.DeleteEntryCallback() {\n               @Override\n               public void deleteEntryComplete(Object ctx) {\n                   asyncResponse.resume(null);\n               }\n               @Override\n               public void deleteEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncDeleteEntry(positionImpl,deleteEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to delete message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(rest",
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                            boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.DeleteEntryCallback deleteEntryCallback = new AsyncCallbacks.DeleteEntryCallback() {\n               @Override\n               public void deleteEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void deleteEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncDeleteEntry(positionImpl,deleteEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           ",
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.DeleteEntryCallback deleteEntryCallback = new AsyncCallbacks.DeleteEntryCallback() {\n               @Override\n               public void deleteEntryComplete(Object ctx) {\n                   try {\n                       asyncResponse.resume(null);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   }\n               }\n               @Override\n               public void deleteEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncDeleteEntry(positionImpl,deleteEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to delete message with ledgerId {} entryId {} from ",
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.DeleteEntryCallback deleteEntryCallback = new AsyncCallbacks.DeleteEntryCallback() {\n               @Override\n               public void deleteEntryComplete(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n               @Override\n               public void deleteEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncDeleteEntry(positionImpl,deleteEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, ",
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.DeleteEntryCallback deleteEntryCallback = new AsyncCallbacks.DeleteEntryCallback() {\n               @Override\n               public void deleteEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void deleteEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncDeleteEntry(positionImpl, deleteEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           ",
        "<|endoftext|>   protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           <|mask:0|>\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n<|mask:0|>((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }\n\n   @Override\n   protected void internalDeleteMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.DELETE_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.DeleteEntryCallback deleteEntryCallback = new AsyncCallbacks.DeleteEntryCallback() {\n               @Override\n               public void deleteEntryComplete(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n               @Override\n               public void deleteEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncDeleteEntry(positionImpl,deleteEntryCallback, null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to delete message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, "
    ],
    "validation_result": [
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        },
        {
            "patch": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           /* BUG: \n            * ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n            * FIXED: \n            */\n           ((ManagedLedgerImpl) ((PersistentTopic) getTopicReference(topicName)).getManagedLedger())\n               .asyncReadEntry(positionImpl,readEntryCallback , null);\n       } catch (NullPointerException npe) {\n           RestException restException =  new RestException(Status.NOT_FOUND, \"Message not found\");\n           asyncResponse.resume(restException);\n       } catch (Exception exception) {\n           String id = clientAppId();\n           log.error(\"[{}] Failed to get message with ledgerId {} entryId {} from {}\",\n                   id , ledgerId, entryId, topicName, exception);\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }",
            "correctness": "compile_success"
        }
    ]
}