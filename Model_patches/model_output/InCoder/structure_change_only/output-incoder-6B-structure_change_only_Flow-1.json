{
    "output": [
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[4096];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) > 0) {\n           out.write(buffer, 0, bytesRead);\n       }\n       in.close();\n       out.close();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws IOException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setRequestMethod(requestMethodname);\n",
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[BUFFER_SIZE];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) != -1) {\n           out.write(buffer, 0, bytesRead);\n       }\n       out.flush();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws IOException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setRequestMethod(requestMethodname);\n       connection",
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[4096];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) > 0) {\n           out.write(buffer, 0, bytesRead);\n       }\n       in.close();\n       out.close();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws IOException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setDoOutput(true);\n       connection",
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[4096];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) > 0) {\n           out.write(buffer, 0, bytesRead);\n       }\n       in.close();\n       out.close();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws MalformedURLException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setRequestMethod(request",
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[BUFFER_SIZE];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) != -1) {\n           out.write(buffer, 0, bytesRead);\n       }\n       out.flush();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws IOException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setDoOutput(true);\n       connection.setRequest",
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[BUFFER_SIZE];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) > 0) {\n           out.write(buffer, 0, bytesRead);\n       }\n       in.close();\n       out.close();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws MalformedURLException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setRequestMethod(",
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[BUFFER_SIZE];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) != -1) {\n           out.write(buffer, 0, bytesRead);\n       }\n       out.flush();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws IOException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setUseCaches(false);\n       connection.set",
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[4096];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) > 0) {\n           out.write(buffer, 0, bytesRead);\n       }\n       in.close();\n       out.close();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws IOException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setUseCaches(false);\n       ",
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[4096];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) > 0) {\n           out.write(buffer, 0, bytesRead);\n       }\n       in.close();\n       out.close();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws MalformedURLException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setDoOutput(true);",
        "<|endoftext|>   public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           <|mask:0|>\n     \n               requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n               String requestMethodname = request.getMethod();\n               HttpURLConnection connection = prepareConnection(requestFilename,\n                       requestMethodname);\n               \n               for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n                   String header = headerNames.nextElement();\n                   String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n                   connection.setRequestProperty(header, value);\n               }\n               getLogger().debug(\"Requesting resource to webpack {}\",\n                       connection.getURL());\n               int responseCode = connection.getResponseCode();\n               if (responseCode != HTTP_NOT_FOUND) {\n                   getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                           requestFilename);\n                   connection.getHeaderFields().forEach((header, values) -> {\n                       if (header != null) {\n                           response.addHeader(header, values.get(0));\n                       }\n                   });\n                   if (responseCode != HTTP_OK) {\n                       \n                       if(responseCode >= 400){\n                           response.sendError(responseCode);\n                       }else{\n                           response.setStatus(responseCode);\n                       }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n<|mask:0|>requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }\n   \n   private void writeStream(OutputStream out, InputStream in) throws IOException {\n       byte[] buffer = new byte[BUFFER_SIZE];\n       int bytesRead;\n       while ((bytesRead = in.read(buffer)) != -1) {\n           out.write(buffer, 0, bytesRead);\n       }\n       out.flush();\n   }\n   \n   private HttpURLConnection prepareConnection(String requestFilename,\n           String requestMethodname) throws IOException {\n       HttpURLConnection connection = (HttpURLConnection) new URL(requestFilename).openConnection();\n       connection.setDoOutput(true);\n       connection.setDo"
    ],
    "validation_result": [
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean serveDevModeRequest(HttpServletRequest request,\n           HttpServletResponse response) throws IOException {\n   \n       if ( !isDevServerFailedToStart.get() && devServerStartFuture.isDone()) {\n           String requestFilename = request.getPathInfo();\n           /* BUG: \n            * if (!HandlerHelper.isPathUnsafe(requestFilename)) {\n            * FIXED: \n            */\n           requestFilename = APP_THEME_PATTERN.matcher(requestFilename).find()? \"/VAADIN/static\" + requestFilename:requestFilename;\n           String requestMethodname = request.getMethod();\n           HttpURLConnection connection = prepareConnection(requestFilename,\n                   requestMethodname);\n           \n           for (Enumeration<String> headerNames = request.getHeaderNames(); headerNames.hasMoreElements(); ) {\n               String header = headerNames.nextElement();\n               String value = \"Connect\".equals(header) ? \"close\": request.getHeader(header);\n               connection.setRequestProperty(header, value);\n           }\n           getLogger().debug(\"Requesting resource to webpack {}\",\n                   connection.getURL());\n           int responseCode = connection.getResponseCode();\n           if (responseCode != HTTP_NOT_FOUND) {\n               getLogger().debug(\"Served resource by webpack: {} {}\", responseCode,\n                       requestFilename);\n               connection.getHeaderFields().forEach((header, values) -> {\n                   if (header != null) {\n                       response.addHeader(header, values.get(0));\n                   }\n               });\n               if (responseCode != HTTP_OK) {\n                   \n                   if(responseCode >= 400){\n                       response.sendError(responseCode);\n                   }else{\n                       response.setStatus(responseCode);\n                   }\n               \n                   } else {\n                       writeStream(response.getOutputStream(),\n                       connection.getInputStream());\n                   }\n                   response.getOutputStream().close();\n                   return true;\n                   \n             \n               }else{\n                   getLogger().debug(\"Resource not served by webpack {}\",\n                           requestFilename);\n                   return false;\n               }\n           }else{\n               getLogger().info(HandlerHelper.UNSAFE_PATH_ERROR_MESSAGE_PATTERN,requestFilename);\n               response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n               return true;\n           }\n           \n       }else{\n           return false;\n       }\n       \n   }",
            "correctness": "uncompilable"
        }
    ]
}