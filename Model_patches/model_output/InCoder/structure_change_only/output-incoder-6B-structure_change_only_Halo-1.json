{
    "output": [
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@",
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull String parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull String parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@",
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@",
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@",
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull String parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull String parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@",
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@",
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@",
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@",
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull String parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull String parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@",
        "<|endoftext|>   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       <|mask:0|>\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n<|mask:0|>if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n       Assert.notNull(pathToCheck, \"Path to check must not be null\");\n       Assert.notNull(parentPath, \"Parent path must not be null\");\n       \n       /* BUG: \n        * Path normalizedParentPath = parentPath.normalize();\n        * if (!pathToCheck.startsWith(normalizedParentPath)) {\n        * FIXED: \n        */\n       if (!pathToCheck.startsWith(parentPath)) {\n           ForbiddenException e =  new ForbiddenException(\"You do not have permission to access \" + pathToCheck);\n           e.setErrorData(pathToCheck);\n           throw e;\n       }\n   }\n   \n   public static void checkFileExists(@Non"
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        }
    ]
}