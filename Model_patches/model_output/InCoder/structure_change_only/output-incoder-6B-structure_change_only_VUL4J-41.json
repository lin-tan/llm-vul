{
    "output": [
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       ",
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;",
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;",
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream ",
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>if ( f.exists() )\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       if ( f.exists() )\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n",
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>if ( f.exists() )\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       if ( f.exists() )\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory ",
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n       \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       ",
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n",
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n       \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;",
        "<|endoftext|>   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>if ( f.exists() )\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if (! isDirectory )\n                   {\n                       OutputStream out = null;\n                       try\n                       {\n                           out = new FileOutputStream( f );\n                           IOUtil.copy( compressedInputStream, out );\n                           out.close();\n                           out = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( out );\n                       }\n                   }\n                   else\n                   {\n                       f.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symlinkDestination );\n                   SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n               }\n               \n       \n               long time = entryDate.getTime();\n               f.setLastModified( time );\n               if ( !isIgnorePermissions() && mode != null && !isDirectory )\n               {\n                   ArchiveEntryUtils.chmod( f, mode );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException ex )\n       {\n           String path = f.getPath();\n           getLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       if ( f.exists() )\n       {\n           if ( isOverwrite() || !f.exists() ||  f.lastModified() < entryDate.getTime() ) \n           {\n               final File dirF = f.getParentFile();\n               if ( dirF != null )\n               {\n                   dirF.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symlinkDestination ) )\n               {\n       \n                   if ( !is"
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        }
    ]
}