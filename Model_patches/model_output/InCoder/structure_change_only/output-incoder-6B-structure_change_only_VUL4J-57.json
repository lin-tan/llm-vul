{
    "output": [
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   String s;\n                   if(item instanceof Describable){\n                       s =  ((Describable) item).getDescriptor().getDisplayName();\n                   }else{\n                       s =  item.getClass().getName();\n                   }\n                   throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context, isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add( causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod",
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   String s;\n                   if(item instanceof Describable){\n                       s =  ((Describable) item).getDescriptor().getDisplayName();\n                   }else{\n                       s =  item.getClass().getName();\n                   }\n                   throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context, isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add( causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                           ",
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   String s;\n                   if(item instanceof Describable){\n                       s =  ((Describable) item).getDescriptor().getDisplayName();\n                   }else{\n                       s =  item.getClass().getName();\n                   }\n                   throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be started\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_starting_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context, isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add( causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,",
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   String s;\n                   if(item instanceof Describable){\n                       s =  ((Describable) item).getDescriptor().getDisplayName();\n                   }else{\n                       s =  item.getClass().getName();\n                   }\n                   throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context,isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add( causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod",
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   String s;\n                   if(item instanceof Describable){\n                       s =  ((Describable) item).getDescriptor().getDisplayName();\n                   }else{\n                       s =  item.getClass().getName();\n                   }\n                   throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be build\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context, isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add( causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod",
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   String s;\n                   if(item instanceof Describable){\n                       s =  ((Describable) item).getDescriptor().getDisplayName();\n                   }else{\n                       s =  item.getClass().getName();\n                   }\n                   throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context, isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add(causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,",
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   throw new AbortException(\"The item named \" + job + \" is a \" + item.getClass().getName() + \" which is not something that can be built\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context, isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add( causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                       if (scheduleResult.isRefused()) {\n                           throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                       }\n                   }else{\n                       throw new AbortException(\"Item ",
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   String s;\n                   if(item instanceof Describable){\n                       s =  ((Describable) item).getDescriptor().getDisplayName();\n                   }else{\n                       s =  item.getClass().getName();\n                   }\n                   throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be started\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context, isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add( causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod",
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   String s;\n                   if(item instanceof Describable){\n                       s =  ((Describable) item).getDescriptor().getDisplayName();\n                   }else{\n                       s =  item.getClass().getName();\n                   }\n                   throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context, isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add( causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       ScheduleResult scheduleResult = activeInstance.getQueue().schedule(task, quietPeriod",
        "<|endoftext|>   public boolean start() throws Exception {\n       String job = step.getJob();\n       Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n       if (item != null) {\n           /* BUG: \n            * if ( !step.getWait() || (item instanceof Job)) {\n            * FIXED: \n            */\n           <|mask:0|>\n               if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n                   if(!(item instanceof Queue.Task)){\n                       String s;\n                       if(item instanceof Describable){\n                           s =  ((Describable) item).getDescriptor().getDisplayName();\n                       }else{\n                           s =  item.getClass().getName();\n                       }\n                       throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n                   }else{\n                       if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                           Queue.Task task = (Queue.Task) item;\n                           String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                           listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                           String taskName = task.getFullDisplayName();\n                           String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                           LabelAction labelAction = new LabelAction(name);\n                           node.addAction(labelAction);\n                           List<Action> actions = new ArrayList<>();\n                           if (step.getWait()) {\n                               StepContext context = getContext();\n                               boolean isPropagate =  step.isPropagate();\n                               actions.add(new BuildTriggerAction(context, isPropagate ));\n                               LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                           }\n                           Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                           CauseAction causeAction = new CauseAction(cause);\n                           actions.add( causeAction);\n                           Integer quietPeriod = step.getQuietPeriod();\n                           if (quietPeriod == null) {\n                               try {\n                                   Class taskClass = task.getClass();\n                                   Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                   Class returnType  = getQuietPeriod.getReturnType();\n                                   if (returnType.equals(int.class)) {\n                                       quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                                   }\n                               } catch (NoSuchMethodException e) {\n                               } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                                   LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                               }\n                           }\n                           quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                           Jenkins activeInstance = Jenkins.getActiveInstance();\n                           ScheduleResult scheduleResult = activeInstance.getQueue().schedule2(task, quietPeriod,actions);\n                           if (scheduleResult.isRefused()) {\n                               throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n                           }\n                       }else{\n                           throw new AbortException(\"Item type does not support parameters\");\n                       }\n                   }\n               }else{\n                   final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n                   listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n                   node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n                   List<Action> actions = new ArrayList<>();\n                   if (step.getWait()) {\n                       StepContext context = getContext();\n                       boolean isPropagate =  step.isPropagate();\n                       actions.add(new BuildTriggerAction(context,isPropagate ));\n                       LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n                   }\n                   Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                   CauseAction causeAction = new CauseAction(cause);\n                   actions.add(causeAction);\n                   List<ParameterValue> parameters = step.getParameters();\n                   if (parameters != null) {\n                       parameters = completeDefaultParameters(parameters, (Job) project);\n                       actions.add(new ParametersAction(parameters));\n                   }\n                   Integer quietPeriod = step.getQuietPeriod();\n                   if (quietPeriod == null) {\n                       quietPeriod = project.getQuietPeriod();\n                   }\n                   QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                       @Override\n                       protected Job asJob() {\n                           return (Job) project;\n                       }\n                   }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n                   if (f == null) {\n                       throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n                   }\n               } \n               if (!step.getWait()) {\n                   getContext().onSuccess(null);\n                   return true;\n               } else {\n                   return false;\n               }\n              \n           }else{\n               throw new AbortException(\"Waiting for non-job items is not supported\");\n           }\n            \n       }else{\n           throw new AbortException(\"No item named \" + job + \" found\");\n       }\n   }\n<|mask:0|>if(!(item instanceof ParameterizedJobMixIn.ParameterizedJob)){\n               if(!(item instanceof Queue.Task)){\n                   String s;\n                   if(item instanceof Describable){\n                       s =  ((Describable) item).getDescriptor().getDisplayName();\n                   }else{\n                       s =  item.getClass().getName();\n                   }\n                   throw new AbortException(\"The item named \" + job + \" is a \" + s  + \" which is not something that can be built\");\n               }else{\n                   if (step.getParameters() == null || step.getParameters().isEmpty()) {\n                       Queue.Task task = (Queue.Task) item;\n                       String itemEncoded = ModelHyperlinkNote.encodeTo(item);\n                       listener.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                       String taskName = task.getFullDisplayName();\n                       String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                       LabelAction labelAction = new LabelAction(name);\n                       node.addAction(labelAction);\n                       List<Action> actions = new ArrayList<>();\n                       if (step.getWait()) {\n                           StepContext context = getContext();\n                           boolean isPropagate =  step.isPropagate();\n                           actions.add(new BuildTriggerAction(context, isPropagate ));\n                           LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n                       }\n                       Cause.UpstreamCause cause = new Cause.UpstreamCause(invokingRun);\n                       CauseAction causeAction = new CauseAction(cause);\n                       actions.add( causeAction);\n                       Integer quietPeriod = step.getQuietPeriod();\n                       if (quietPeriod == null) {\n                           try {\n                               Class taskClass = task.getClass();\n                               Method getQuietPeriod = taskClass.getMethod(\"getQuietPeriod\");\n                               Class returnType  = getQuietPeriod.getReturnType();\n                               if (returnType.equals(int.class)) {\n                                   quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                               }\n                           } catch (NoSuchMethodException e) {\n                           } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                               LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                           }\n                       }\n                       quietPeriod = quietPeriod == null? Jenkins.getActiveInstance().getQuietPeriod():quietPeriod;\n                       Jenkins activeInstance = Jenkins.getActiveInstance();\n                       QueueTaskFuture<?> f = activeInstance.getQueue().schedule2(task, quiet"
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        }
    ]
}