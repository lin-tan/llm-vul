{
    "function range": "23,5-59,5",
    "output": [
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\nimport ",
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.",
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\nimport org.springframework.security.oauth2.provider.token.TokenStore;\n",
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\nimport org.springframework.security.oauth2.provider.token.TokenStore;\nimport org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;\nimport org.springframework.security.oauth2.provider.token.store.Jwt",
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurity",
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\nimport org.springframework.security.oauth2.provider.token.TokenStore;\nimport org.springframework.security.oauth2.provider.token.store.JwtAccessToken",
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\nimport org.springframework.security.oauth2.provider.token.TokenStore;\nimport org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore",
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\nimport org.springframework.security.oauth2.provider.token.TokenEnhancer;\nimport org.springframework.security.oauth2.provider.token.TokenEnhan",
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\nimport org.springframework.security.oauth2.provider.token.TokenStore",
        "<|endoftext|>public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n/* BUG : \n*    if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return false;\n    }\n    if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n        return false;\n    }\n    if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n        return false;\n    }\n    if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=spring-security-oauth2,spring-security,spring-boot,spring-security-saml2,spring-saml |>\nI had a similar problem and I solved it this way:\n<code>\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerConfigure"
    ],
    "validation_result": [
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public boolean isAllowed(HttpServletRequest request) throws IOException {\n    String requestBody = IOUtils.toString(request.getReader());\n    ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n    String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n    String zoneId = IdentityZoneHolder.get().getId();\n    ScimUser scimUserFromDb;\n    try {\n        scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        return true;\n    }\n    if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n        return false;\n    }\n\n    scimUserFromDb.setPrimaryEmail(scimUserFromRequest.getPrimaryEmail());\n    scimUserFromDb.setUserName(scimUserFromRequest.getUserName());\n    scimUserFromDb.setFirstName(scimUserFromRequest.getFirstName());\n    scimUserFromDb.setLastName(scimUserFromRequest.getLastName());\n    scimUserFromDb.setDisplayName(scimUserFromRequest.getDisplayName());\n    scimUserFromDb.setEmail(scimUserFromRequest.getEmail());\n    scimUserFromDb.setVerified(scimUserFromRequest.isVerified());\n    scimUserFromDb.setActive(scimUserFromRequest.isActive());\n    scimUserFromDb.setOrigin(scimUserFromRequest.getOrigin());\n    try {\n        scimUserProvisioning.update(scimUserFromDb, zoneId);\n    } catch (ScimResourceNotFoundException e) {\n        scimUserProvisioning.create(scimUserFromDb, zoneId);\n    }\n    return true;\n}",
            "correctness": "uncompilable"
        }
    ]
}