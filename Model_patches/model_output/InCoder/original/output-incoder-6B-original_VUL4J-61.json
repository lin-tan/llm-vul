{
    "function range": "60,5-105,5",
    "output": [
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.set",
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.set",
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.",
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.",
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        DocumentBuilderFactory ",
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n\n        documentBuilder.set",
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        DocumentBuilder document",
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n\n        documentBuilder.set",
        "<|endoftext|>private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n    if (config == null) config = Collections.emptyMap();\n    boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n    List<MapResult> result = new ArrayList<>();\n    try {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n/* BUG : \n*        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n* FIXED: \n*/\n        <|mask:0|>\n        FileUtils.checkReadAllowed(url);\n        Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n        Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n        XPathFactory xPathFactory = XPathFactory.newInstance();\n        XPath xPath = xPathFactory.newXPath();\n        path = StringUtils.isEmpty(path) ? \"/\" : path;\n        XPathExpression xPathExpression = xPath.compile(path);\n        NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            final Deque<Map<String, Object>> stack = new LinkedList<>();\n            handleNode(stack, nodeList.item(i), simpleMode);\n            for (int index = 0; index < stack.size(); index++) {\n                result.add(new MapResult(stack.pollFirst()));\n            }\n        }\n    }\n    catch (FileNotFoundException e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new FileNotFoundException(e.getMessage());\n    }\n    catch (Exception e){\n        if(!failOnError)\n            return Stream.of(new MapResult(Collections.emptyMap()));\n        else\n            throw new Exception(e);\n    }\n    return result.stream();\n}\n<|mask:0|>DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        documentBuilder.setErrorHandler(new ErrorHandler() {\n            @Override\n            public void error(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void fatalError(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n\n            @Override\n            public void warning(SAXParseException exception) throws SAXException {\n                throw new SAXException(exception);\n            }\n        });\n        DocumentBuilderFactory "
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        }
    ]
}