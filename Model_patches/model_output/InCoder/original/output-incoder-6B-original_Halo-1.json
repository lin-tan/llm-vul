{
    "function range": "295,5-304,5",
    "output": [
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a tags=android,java |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.",
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a tags=android,java |>\n<| a tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck",
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.",
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck",
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a tags=android,java |>\n<| a tags=android,java dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck",
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a tags=android,java |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck",
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a tags=android,java |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\ufffd",
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a tags=android,java |>\n<| a tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709",
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709",
        "<|endoftext|>public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    <|mask:0|>\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n<|mask:0|>parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=android,java |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n/* BUG : \n*    if (pathToCheck.startsWith(parentPath.normalize())) {\n* FIXED: \n*/\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}\n</code>\n<|/ a tags=android,java |>\n<| a tags=android,java dscore=0 |>\n<code>\npublic static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new Forbidden"
    ],
    "validation_result": [
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n\n    parentPath = parentPath.normalize();\n    pathToCheck = pathToCheck.normalize();\n    if (pathToCheck.startsWith(parentPath)) {\n        return;\n    }\n    throw new ForbiddenException(\"\u4f60\u6ca1\u6709\u6743\u9650\u8bbf\u95ee \" + pathToCheck).setErrorData(pathToCheck);\n}",
            "correctness": "test_success"
        }
    ]
}