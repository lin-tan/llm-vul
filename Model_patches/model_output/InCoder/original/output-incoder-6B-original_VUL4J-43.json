{
    "function range": "90,2-105,2",
    "output": [
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows ",
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n",
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n",
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = ",
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows ",
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException",
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, String destDir)\n\tthrows ",
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n{\n",
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\t\tthrows ",
        "<|endoftext|>public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n <|mask:0|>\n\t\toutFile.mkdirs();\n\t}\n\telse {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n<|mask:0|>\tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n/* BUG : \n*\tif (entry.isDirectory()) {\n* FIXED: \n*/\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}\n\npublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\nthrows IO"
    ],
    "validation_result": [
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\n \tif (entry.isDirectory()) {\n\t\toutFile.getParentFile().mkdirs();\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n\telse {\n\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\tIOUtil.writeStream(in, outFile);\n\t\t}\n\t}\n}",
            "correctness": "compile_success"
        }
    ]
}