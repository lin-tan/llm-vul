{
    "function range": "58,5-148,5",
    "output": [
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.NONE;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \nprivate List<ParameterValue> completeDefaultParameters(List<Parameter",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.BUILD;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \nprivate List<ParameterValue> completeDefaultParameters(List<",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.BUILD;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic String getDisplayName() {\n",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.BUILD;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic String getShortDescription() {\n",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.NONE;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic String getDisplayName() {\n    return ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.NONE;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Collection<TopLevelItemDescriptor> get",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.NONE;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic String getShortDescription() {\n    return ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.BUILD;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Collection<TopLevelItem> get",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.NONE;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic String getShortName() {\n    return ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n/* BUG : \n*    if (step.getWait() && !(item instanceof Job)) {\n* FIXED: \n*/\n    <|mask:0|>\n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n        final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n        listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        List<ParameterValue> parameters = step.getParameters();\n        if (parameters != null) {\n            parameters = completeDefaultParameters(parameters, (Job) project);\n            actions.add(new ParametersAction(parameters));\n        }\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            quietPeriod = project.getQuietPeriod();\n        }\n        QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n            @Override\n            protected Job asJob() {\n                return (Job) project;\n            }\n        }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n        if (f == null) {\n            throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n        }\n    } else if (item instanceof Queue.Task){\n        if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task task = (Queue.Task) item;\n        listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n        node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n        List<Action> actions = new ArrayList<>();\n        if (step.getWait()) {\n            StepContext context = getContext();\n            actions.add(new BuildTriggerAction(context, step.isPropagate()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n        }\n        actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n        Integer quietPeriod = step.getQuietPeriod();\n        if (quietPeriod == null) {\n            try {\n                Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                if (getQuietPeriod.getReturnType().equals(int.class)) {\n                    quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                }\n            } catch (NoSuchMethodException e) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n            }\n        }\n        if (quietPeriod == null) {\n            quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n        }\n        ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n        if (scheduleResult.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n        }\n    } else {\n        throw new AbortException(\"The item named \" + job + \" is a \"\n                + (item instanceof Describable\n                ? ((Describable) item).getDescriptor().getDisplayName()\n                : item.getClass().getName())\n                + \" which is not something that can be built\");\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n<|mask:0|>listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic BuildStepMonitor getRequiredMonitorService() {\n    return BuildStepMonitor.NONE;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic Descriptor<BuildTriggerStepExecution> getDescriptor() {\n    return (Descriptor) Jenkins.getInstance().getDescriptorOrDie(getClass());\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic String getShortName() {\n    return \""
    ],
    "validation_result": [
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n\n    listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n    node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(item.getFullDisplayName())));\n    List<Action> actions = new ArrayList<>();\n    if (step.getWait()) {\n        StepContext context = getContext();\n        actions.add(new BuildTriggerAction(context, step.isPropagate()));\n        LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{item, context});\n    }\n    actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n    List<ParameterValue> parameters = step.getParameters();\n    if (parameters != null) {\n        parameters = completeDefaultParameters(parameters, (Job) item);\n        actions.add(new ParametersAction(parameters));\n    }\n    Integer quietPeriod = step.getQuietPeriod();\n    if (quietPeriod == null) {\n        try {\n            Method getQuietPeriod = item.getClass().getMethod(\"getQuietPeriod\");\n            if (getQuietPeriod.getReturnType().equals(int.class)) {\n                quietPeriod = (Integer) getQuietPeriod.invoke(item);\n            }\n        } catch (NoSuchMethodException e) {\n        } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n            LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n        }\n    }\n    if (quietPeriod == null) {\n        quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n    }\n    QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n        @Override\n        protected Job asJob() {\n            return (Job) item;\n        }\n    }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n    if (f == null) {\n        throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n    }\n    if (step.getWait()) {\n        return false;\n    } else {\n        getContext().onSuccess(null);\n        return true;\n    }\n}",
            "correctness": "uncompilable"
        }
    ]
}