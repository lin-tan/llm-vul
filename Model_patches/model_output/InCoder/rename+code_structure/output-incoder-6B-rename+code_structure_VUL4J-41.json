{
    "output": [
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if (",
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( ",
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n       \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if (",
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.",
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n       \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( ",
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )\n       throws DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( String",
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n\n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( String",
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               \n",
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       \n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n",
        "<|endoftext|>   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       <|mask:0|>\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n       \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n<|mask:0|>try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n               {\n       \n                   if (! whetherFolder )\n                   {\n                       OutputStream output = null;\n                       try\n                       {\n                           output = new FileOutputStream( targetFile );\n                           IOUtil.copy( compressedInDataSequence, output );\n                           output.close();\n                           output = null;\n                       }\n                       finally\n                       {\n                           IOUtil.close( output );\n                       }\n                   }\n                   else\n                   {\n                       targetFile.mkdirs();\n                 \n                   }\n               }\n               else{\n                   File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                   SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n               }\n               \n               long time = itemTime.getTime();\n               targetFile.setLastModified( time );\n               if ( !whetherDisregardConsent() && setting != null && !whetherFolder )\n               {\n                   DocumentItemUtility.changeMode( targetFile, setting );\n               }\n              \n           }else{\n                return;\n           }\n         \n       }\n       catch ( final FileNotFoundException e )\n       {\n           String path = targetFile.getPath();\n           acquireLogger().warn( \"Unable to expand to file \" + path );\n       }\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       /* BUG: \n        * try{\n        * FIXED: \n        */\n       try\n       {\n           if ( whetherOverwrite() || !targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n           {\n               final File parentFile = targetFile.getParentFile();\n               if ( parentFile != null )\n               {\n                   parentFile.mkdirs();\n               }\n               \n               "
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        }
    ]
}