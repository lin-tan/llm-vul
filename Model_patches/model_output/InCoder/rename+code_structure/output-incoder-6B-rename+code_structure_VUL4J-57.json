{
    "output": [
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n        return true;\n    }else{\n        return false;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n        return true;\n    }else{\n        return false;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n\n    }else{\n        throw new AbortException(\"Item type does not support parameters\");\n    }\n    return true;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLingu",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n    }else{\n        throw new AbortException(\"Item type does not support parameters\");\n    }\n    return true;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLingu",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n        return true;\n    }else{\n        return false;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.releaseOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  ",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n\n    }else{\n        throw new AbortException(\"Item type does not support parameters\");\n    }\n    return true;\n}\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLingu",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n\n    }else{\n        throw new AbortException(\"Item type does not support parameters\");\n    }\n    return true;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, be",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n    }else{\n        throw new AbortException(\"Item type does not support parameters\");\n    }\n    return true;\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, be",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n        return true;\n    }else{\n        return false;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n            LOGGER.log(Level.",
        "<|endoftext|>@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        /* BUG: \n         * if ( !measure.acquireDelay() || (point instanceof Occupation)) {\n         * FIXED: \n         */\n        <|mask:0|>\n            if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n                if(!(point instanceof Queue.Task)){\n                    String s;\n                    if(point instanceof Describable){\n                        s =  ((Describable) point).getDescriptor().getDisplayName();\n                    }else{\n                        s =  point.getClass().getName();\n                    }\n                    throw new AbortException(\"The item named \" + occupation + \" is a \" + s  + \" which is not something that can be built\");\n                }else{\n                    if (measure.acquireParameter() == null || measure.acquireParameter().isEmpty()) {\n                        Queue.Task undertaking = (Queue.Task) point;\n                        String itemEncoded = TheoreticalAccountShortLetter.encodeTo(point);\n                        hearer.getLogger().println(\"Scheduling item: \" +itemEncoded );\n                        String taskName = undertaking.getFullDisplayName();\n                        String name  = Messages.BuildTriggerStepExecution_building_(taskName);\n                        LabelAction labelAction = new LabelAction(name);\n                        knob.addAction(labelAction);\n                        List<Activity> action = new ArrayList<>();\n                        if (measure.acquireDelay()) {\n                            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                            boolean beSpread =  measure.beSpread();\n                            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n                            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n                        }\n                        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                        ReasonActivity causeAction = new ReasonActivity(cause);\n                        action.add( causeAction);\n                        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                        if (lullTimePeriod == null) {\n                            try {\n                                Class taskClass = undertaking.getClass();\n                                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                                Class returnType  = acquireLullTimePeriod.getReturnType();\n                                if (returnType.equals(int.class)) {\n                                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                                }\n                            } catch (NoExclusion v) {\n                            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + point.getFullName(), v);\n                            }\n                        }\n                        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n                        Jenkins activeInstance = Jenkins.getActiveInstance();\n                        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(undertaking, lullTimePeriod,action);\n                        if (agendaConsequence.isRefused()) {\n                            throw new AbortException(\"Failed to trigger build of \" + point.getFullName());\n                        }\n\n                    }else{\n                        throw new AbortException(\"Item type does not support parameters\");\n                    }\n                }\n            }else{\n                final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n                hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n\n                knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n                List<Activity> action = new ArrayList<>();\n                if (measure.acquireDelay()) {\n                    MeasureCircumstance linguisticContext = acquireLinguisticContext();\n                    boolean beSpread =  measure.beSpread();\n                    action.add(new PhysiqueInductionActivity(linguisticContext,beSpread ));\n                    LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n                }\n\n                Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n                ReasonActivity causeAction = new ReasonActivity(cause);\n                action.add(causeAction);\n                List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n                if (parameter != null) {\n                    parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n                    action.add(new ParameterActivity(parameter));\n                }\n                Integer lullTimePeriod = measure.acquireLullTimePeriod();\n                if (lullTimePeriod == null) {\n                    lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n                }\n<|mask:0|>List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            boolean beSpread =  measure.beSpread();\n            action.add(new PhysiqueInductionActivity(linguisticContext, beSpread ));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{occupation, linguisticContext});\n        }\n        Cause.UpstreamCause cause = new Cause.UpstreamCause(raiseTally);\n        ReasonActivity causeAction = new ReasonActivity(cause);\n        action.add( causeAction);\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Class taskClass = occupation.getClass();\n                Method acquireLullTimePeriod = taskClass.getMethod(\"getQuietPeriod\");\n                Class returnType  = acquireLullTimePeriod.getReturnType();\n                if (returnType.equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(occupation);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n                LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + occupation, v);\n            }\n        }\n        lullTimePeriod = lullTimePeriod == null? Jenkins.getActiveInstance().acquireLullTimePeriod():lullTimePeriod;\n        Jenkins activeInstance = Jenkins.getActiveInstance();\n        AgendaConsequence agendaConsequence = activeInstance.getQueue().schedule2(occupation, lullTimePeriod,action);\n        if (agendaConsequence.isRefused()) {\n            throw new AbortException(\"Failed to trigger build of \" + occupation);\n        }\n        return true;\n    }else{\n        return false;\n    }\n}\n\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean end() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point != null) {\n        if(!(point instanceof OccupationBlendIn.ParameterizedJob)){\n            if(!(point instanceof Queue.Task)){\n                String s;\n                if(point instanceof Describable){\n                    s =  ((Describable) point).getDescriptor().getDisplayName();\n                }else{\n                    s =  point.getClass().getName();\n                }"
    ],
    "validation_result": [
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}"
        }
    ]
}