{
    "output": [
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddres",
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    String name = StandardCharsets.UTF_8.name();\n    String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n    convertedResourseAddres",
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    String name = StandardCharsets.UTF_8.name();\n    String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress, name));\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n    convertedResourseAddress = ",
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    String name = StandardCharsets.UTF_8.name();\n    String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n    convertedResourseAddres",
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    String name = StandardCharsets.UTF_8.name();\n    String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n    int index = convertedResourseAddress.indexOf('?');\n    convertedResourseAddress = index > 0? convertedResourseAddres",
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n    ",
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + converted",
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedRe",
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    String name = StandardCharsets.UTF_8.name();\n    String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n    int index = convertedResourse",
        "<|endoftext|>@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    <|mask:0|>\n\n    return \"\";\n}\n<|mask:0|>\n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}\n\nprivate String mutilateTitleScope(String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return resourseAddress;\n    }\n\n    String name = StandardCharsets.UTF_8.name();\n    String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n    convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n    \n    convertedResour"
    ],
    "validation_result": [
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        },
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        },
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        },
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        },
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        },
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        },
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        },
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        },
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        },
        {
            "patch": "@Override\n@Nonnull\npublic String acquireReasonableHref(final String resourseAddress) {\n    if (!StringUtils.isNotEmpty(resourseAddress)) {\n        return \"\";\n    }\n\n    /* BUG: \n     * try {\n     *     String name = StandardCharsets.UTF_8.name();\n     *     String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n     *     convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n     *     int index = convertedResourseAddress.indexOf('?');\n     *     convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n     *     convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n     *     if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n     *         return convertedResourseAddress;\n     *     }\n     * } catch (UnsupportedEncodingException x) {\n     *     LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n     * }\n     * FIXED: \n     */\n    \n    try {\n        String name = StandardCharsets.UTF_8.name();\n        String convertedResourseAddress = StringEscapeUtils.unescapeXml(URLDecoder.decode(resourseAddress,name));\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"\\\"\", \"%22\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"'\", \"%27\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\">\", \"%3E\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"<\", \"%3C\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\"`\", \"%60\");\n        convertedResourseAddress = convertedResourseAddress.replaceAll(\" \", \"%20\");\n        int index = convertedResourseAddress.indexOf('?');\n        convertedResourseAddress = index > 0? convertedResourseAddress.substring(0, index) + convertedResourseAddress.substring(index).replaceAll(\":\", \"%3A\"):convertedResourseAddress;\n        convertedResourseAddress = mutilateTitleScope(convertedResourseAddress);\n        if (xssStrainer.whetherReasonableHref(convertedResourseAddress)) {\n            return convertedResourseAddress;\n        }\n    } catch (UnsupportedEncodingException x) {\n        LOGGER.error(\"Unable to decode url: {}.\", resourseAddress);\n    }\n\n    return \"\";\n}",
            "correctness": "compile_success",
            "translated": "@Override\n   @Nonnull\n   public String getValidHref(final String url) {\n       if (!StringUtils.isNotEmpty(url)) {\n           return \"\";\n       }\n       /* BUG: \n        * try {\n        *     String name = StandardCharsets.UTF_8.name();\n        *     String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n        *     encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n        *     encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n        *     encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n        *     encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n        *     encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n        *     encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n        *     int qMarkIx = encodedUrl.indexOf('?');\n        *     encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n        *     encodedUrl = mangleNamespaces(encodedUrl);\n        *     if (xssFilter.isValidHref(encodedUrl)) {\n        *         return encodedUrl;\n        *     }\n        * } catch (UnsupportedEncodingException e) {\n        *     LOGGER.error(\"Unable to decode url: {}.\", url);\n        * }\n        * FIXED: \n        */\n       try {\n           String name = StandardCharsets.UTF_8.name();\n           String encodedUrl = StringEscapeUtils.unescapeXml(URLDecoder.decode(url,name));\n           encodedUrl = encodedUrl.replaceAll(\"\\\"\", \"%22\");\n           encodedUrl = encodedUrl.replaceAll(\"'\", \"%27\");\n           encodedUrl = encodedUrl.replaceAll(\">\", \"%3E\");\n           encodedUrl = encodedUrl.replaceAll(\"<\", \"%3C\");\n           encodedUrl = encodedUrl.replaceAll(\"`\", \"%60\");\n           encodedUrl = encodedUrl.replaceAll(\" \", \"%20\");\n           int qMarkIx = encodedUrl.indexOf('?');\n           encodedUrl = qMarkIx > 0? encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\"):encodedUrl;\n           encodedUrl = mangleNamespaces(encodedUrl);\n           if (xssFilter.isValidHref(encodedUrl)) {\n               return encodedUrl;\n           }\n       } catch (UnsupportedEncodingException e) {\n           LOGGER.error(\"Unable to decode url: {}.\", url);\n       }\n       return \"\";\n   }"
        }
    ]
}