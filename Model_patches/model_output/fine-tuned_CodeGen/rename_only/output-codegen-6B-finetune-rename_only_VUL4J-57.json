{
    "output": [
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n    if (measure.acquireDelay()) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n        } else {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n            if (measure.acquireDelay()) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n    } else if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n    if (measure.acquireDelay() &&!(point instanceofoccupation)) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n    if (measure.acquireDelay() &&!(point instanceof OccupationBlendIn)) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n    if (measure.acquireDelay() &&!(point instanceof Occupation || point instanceof Queue.Task)) {\n<|endoftext|>",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n            throw new AbortException(\"String_Node_Str\");\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n    if (measure.acquireDelay() &&!(point instanceof Occupation && measure.acquireDelay())) {\n<|endoftext|>",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean beginning() throws Exception {\n    String occupation = measure.acquireOccupation();\n    Point point = Jenkins.getActiveInstance().getItem(occupation, raiseTally.getParent(), Point.class);\n    if (point == null) {\n        throw new AbortException(\"No item named \" + occupation + \" found\");\n    }\n// buggy lines start:\n    if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n// buggy lines end\n        \n        throw new AbortException(\"Waiting for non-job items is not supported\");\n    }\n    if (point instanceof OccupationBlendIn.ParameterizedJob) {\n        final OccupationBlendIn.ParameterizedJob scheduledJob = (OccupationBlendIn.ParameterizedJob) point;\n        hearer.getLogger().println(\"Scheduling project: \" + TheoreticalAccountShortLetter.encodeTo(scheduledJob));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(scheduledJob.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{scheduledJob, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        List<ParametricQuantityPrize> parameter = measure.acquireParameter();\n        if (parameter!= null) {\n            parameter = finishPrimaryParameter(parameter, (Occupation) scheduledJob);\n            action.add(new ParameterActivity(parameter));\n        }\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            lullTimePeriod = scheduledJob.acquireLullTimePeriod();\n        }\n        WaitingLineUndertakingHereafter<?> d = new OccupationBlendIn() {\n            @Override\n            protected Occupation arsenicOccupation() {\n                return (Occupation) scheduledJob;\n            }\n        }.scheduleBuild2(lullTimePeriod, action.toArray(new Activity[action.size()]));\n        if (d == null) {\n            throw new AbortException(\"Failed to trigger build of \" + scheduledJob.getFullName());\n        }\n    } else if (point instanceof Queue.Task){\n        if (measure.acquireParameter()!= null &&!measure.acquireParameter().isEmpty()) {\n            throw new AbortException(\"Item type does not support parameters\");\n        }\n        Queue.Task undertaking = (Queue.Task) point;\n        hearer.getLogger().println(\"Scheduling item: \" + TheoreticalAccountShortLetter.encodeTo(point));\n        knob.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(undertaking.getFullDisplayName())));\n        List<Activity> action = new ArrayList<>();\n        if (measure.acquireDelay()) {\n            MeasureCircumstance linguisticContext = acquireLinguisticContext();\n            action.add(new PhysiqueInductionActivity(linguisticContext, measure.beSpread()));\n            LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{undertaking, linguisticContext});\n        }\n        action.add(new ReasonActivity(new Cause.UpstreamCause(raiseTally)));\n        Integer lullTimePeriod = measure.acquireLullTimePeriod();\n        if (lullTimePeriod == null) {\n            try {\n                Method acquireLullTimePeriod = undertaking.getClass().getMethod(\"getQuietPeriod\");\n                if (acquireLullTimePeriod.getReturnType().equals(int.class)) {\n                    lullTimePeriod = (Integer) acquireLullTimePeriod.invoke(undertaking);\n                }\n            } catch (NoExclusion v) {\n            } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException v) {\n// fixed lines:\n    if (measure.acquireDelay() &&!(point instanceof OccupationBlendIn.ParameterizedJob)) {\n<|endoftext|><|endoftext|>"
    ],
    "validation_result": [
        {
            "patch": "    if (measure.acquireDelay()) {\n",
            "correctness": "test_timeout",
            "translated": "    if (step.getWait()) {\n"
        },
        {
            "patch": "        } else {\n",
            "correctness": "uncompilable",
            "translated": "        } else {\n"
        },
        {
            "patch": "            if (measure.acquireDelay()) {\n",
            "correctness": "test_timeout",
            "translated": "    if (step.getWait()) {\n"
        },
        {
            "patch": "    } else if (measure.acquireDelay() &&!(point instanceof Occupation)) {\n",
            "correctness": "uncompilable",
            "translated": "    } else if (step.getWait() &&!(item instanceof Job)) {\n"
        },
        {
            "patch": "    if (measure.acquireDelay() &&!(point instanceofoccupation)) {\n",
            "correctness": "uncompilable",
            "translated": "    if (step.getWait() &&!(item instanceofoccupation)) {\n"
        },
        {
            "patch": "    if (measure.acquireDelay() &&!(point instanceof OccupationBlendIn)) {\n",
            "correctness": "test_timeout",
            "translated": "    if (step.getWait() &&!(item instanceof ParameterizedJobMixIn)) {\n"
        },
        {
            "patch": "    if (measure.acquireDelay() &&!(point instanceof Occupation || point instanceof Queue.Task)) {\n",
            "correctness": "compile_success",
            "translated": "    if (step.getWait() &&!(item instanceof Job || item instanceof Queue.Task)) {\n"
        },
        {
            "patch": "            throw new AbortException(\"String_Node_Str\");\n",
            "correctness": "uncompilable",
            "translated": "            throw new AbortException(\"String_Node_Str\");\n"
        },
        {
            "patch": "    if (measure.acquireDelay() &&!(point instanceof Occupation && measure.acquireDelay())) {\n",
            "correctness": "compile_success",
            "translated": "    if (step.getWait() &&!(item instanceof Job && step.getWait())) {\n"
        },
        {
            "patch": "    if (measure.acquireDelay() &&!(point instanceof OccupationBlendIn.ParameterizedJob)) {\n",
            "correctness": "compile_success",
            "translated": "    if (step.getWait() &&!(item instanceof ParameterizedJobMixIn.ParameterizedJob)) {\n"
        }
    ]
}