{
    "output": [
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    if (f!= null) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    if ( f!= null) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final FileInputStream fis = new FileInputStream(f)) {\n<|endoftext|>",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final FileInputStream in = new FileInputStream(f)) {\n<|endoftext|><|endoftext|>",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final FileOutputStream out = new FileOutputStream(f)) {\n<|endoftext|><|endoftext|>",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final FileWriter fw = new FileWriter(f)) {\n<|endoftext|><|endoftext|><|endoftext|>",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final InputStream in = new InputStream(compressedInputStream)) {\n<|endoftext|>",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final InputStream in = new FileInputStream(f)) {\n<|endoftext|><|endoftext|><|endoftext|>",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final FileWriter fw = new FileWriter(f, true)) {\n<|endoftext|>",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( isOverwrite() ||!f.exists() ||  f.lastModified() < entryDate.getTime() ) \n        {\n            final File dirF = f.getParentFile();\n            if ( dirF!= null )\n            {\n                dirF.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symlinkDestination ) )\n            {\n                if (! isDirectory )\n                {\n                    OutputStream out = null;\n                    try\n                    {\n                        out = new FileOutputStream( f );\n                        IOUtil.copy( compressedInputStream, out );\n                        out.close();\n                        out = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( out );\n                    }\n                }\n                else\n                {\n                    f.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symlinkDestination );\n                SymlinkUtils.createSymbolicLink( f, symlinkDestFile );\n            }\n            long time = entryDate.getTime();\n            f.setLastModified( time );\n            if (!isIgnorePermissions() && mode!= null &&!isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException ex )\n    {\n        String path = f.getPath();\n        getLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final FileInputStream fis = new FileInputStream(f)){\n<|endoftext|>"
    ],
    "validation_result": [
        {
            "patch": "    if (f!= null) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    if ( f!= null) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    try (final FileInputStream fis = new FileInputStream(f)) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    try (final FileInputStream in = new FileInputStream(f)) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    try (final FileOutputStream out = new FileOutputStream(f)) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    try (final FileWriter fw = new FileWriter(f)) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    try (final InputStream in = new InputStream(compressedInputStream)) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    try (final InputStream in = new FileInputStream(f)) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    try (final FileWriter fw = new FileWriter(f, true)) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    try (final FileInputStream fis = new FileInputStream(f)){\n",
            "correctness": "uncompilable"
        }
    ]
}