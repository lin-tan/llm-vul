{
    "output": [
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(AttributeValue_unquoted);\n<|endoftext|>",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(Data_attribute);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(Data, false);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(Data_2);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(AttributeValue_singleQuoted);\n<|endoftext|>",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(Data_escape);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(Data_tag);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(Data_newline);\n<|endoftext|><|endoftext|><|endoftext|>",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(Data_single);\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n// buggy lines start:\n         t.transition(Data);\n// buggy lines end\n         return;\n     }\n     if (c == '\\f' || c ==  '\\n' || c==  ''|| c== '\\r' || c == '\\t'){\n         return;\n     }\n     if(c =='\\'' ){\n         t.transition(AttributeValue_singleQuoted);\n         return;\n     }\n     if( c==  '>'){\n         t.error(this);\n         t.emitTagPending();\n         t.transition(Data);\n         return;\n     }\n     if(c == nullChar){\n         t.error(this);\n         t.tagPending.appendAttributeValue(replacementChar);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if(c == '\"'){\n         t.transition(AttributeValue_doubleQuoted);\n         return;\n     }\n     if(c =='&' ){\n         r.unconsume();\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     if ( c== '<' || c == '`' || c == '='){\n         t.error(this);\n         t.tagPending.appendAttributeValue(c);\n         t.transition(AttributeValue_unquoted);\n         return;\n     }\n     r.unconsume();\n     t.transition(AttributeValue_unquoted);\n }\n// fixed lines:\n         t.transition(Data_after_attribute);\n<|endoftext|><|endoftext|>"
    ],
    "validation_result": [
        {
            "patch": "         t.transition(AttributeValue_unquoted);\n",
            "correctness": "compile_success",
            "translated": "         t.transition(AttributeValue_unquoted);\n"
        },
        {
            "patch": "         t.transition(Data_attribute);\n",
            "correctness": "uncompilable",
            "translated": "         t.transition(Data_attribute);\n"
        },
        {
            "patch": "         t.transition(Data, false);\n",
            "correctness": "uncompilable",
            "translated": "         t.transition(Data, false);\n"
        },
        {
            "patch": "         t.transition(Data_2);\n",
            "correctness": "uncompilable",
            "translated": "         t.transition(Data_2);\n"
        },
        {
            "patch": "         t.transition(AttributeValue_singleQuoted);\n",
            "correctness": "compile_success",
            "translated": "         t.transition(AttributeValue_singleQuoted);\n"
        },
        {
            "patch": "         t.transition(Data_escape);\n",
            "correctness": "uncompilable",
            "translated": "         t.transition(Data_escape);\n"
        },
        {
            "patch": "         t.transition(Data_tag);\n",
            "correctness": "uncompilable",
            "translated": "         t.transition(Data_tag);\n"
        },
        {
            "patch": "         t.transition(Data_newline);\n",
            "correctness": "uncompilable",
            "translated": "         t.transition(Data_newline);\n"
        },
        {
            "patch": "         t.transition(Data_single);\n",
            "correctness": "uncompilable",
            "translated": "         t.transition(Data_single);\n"
        },
        {
            "patch": "         t.transition(Data_after_attribute);\n",
            "correctness": "uncompilable",
            "translated": "         t.transition(Data_after_attribute);\n"
        }
    ]
}