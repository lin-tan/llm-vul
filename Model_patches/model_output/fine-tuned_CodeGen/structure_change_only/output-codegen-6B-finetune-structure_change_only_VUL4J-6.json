{
    "output": [
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n        int i = 0;\n<|endoftext|><|endoftext|>",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n    int i = 0;\n<|endoftext|><|endoftext|>",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n            int i = 0;\n<|endoftext|><|endoftext|>",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n    }\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n     int i = 0;\n<|endoftext|><|endoftext|>",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n            int j = 0;\n<|endoftext|><|endoftext|>",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n        int j = 0;\n<|endoftext|><|endoftext|>",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n        int i = -1;\n<|endoftext|>",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n        int i = 1;\n<|endoftext|><|endoftext|>",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n// buggy lines start:\n      int i = 0;\n// buggy lines end\n      while ( i < this.rcount) {\n          i++;\n          int j = 0;\n          while ( j < this.hashSize) {\n              j++;\n          }\n      }\n  }\n// fixed lines:\n            int i = -1;\n<|endoftext|>"
    ],
    "validation_result": [
        {
            "patch": "        int i = 0;\n",
            "correctness": "compile_success",
            "translated": "        int i = 0;\n"
        },
        {
            "patch": "    int i = 0;\n",
            "correctness": "compile_success",
            "translated": "        int i = 0;\n"
        },
        {
            "patch": "            int i = 0;\n",
            "correctness": "compile_success",
            "translated": "        int i = 0;\n"
        },
        {
            "patch": "    }\n",
            "correctness": "uncompilable",
            "translated": "    }\n"
        },
        {
            "patch": "     int i = 0;\n",
            "correctness": "compile_success",
            "translated": "        int i = 0;\n"
        },
        {
            "patch": "            int j = 0;\n",
            "correctness": "uncompilable",
            "translated": "            int j = 0;\n"
        },
        {
            "patch": "        int j = 0;\n",
            "correctness": "uncompilable",
            "translated": "            int j = 0;\n"
        },
        {
            "patch": "        int i = -1;\n",
            "correctness": "compile_success",
            "translated": "        int i = -1;\n"
        },
        {
            "patch": "        int i = 1;\n",
            "correctness": "compile_success",
            "translated": "        int i = 1;\n"
        },
        {
            "patch": "            int i = -1;\n",
            "correctness": "compile_success",
            "translated": "        int i = -1;\n"
        }
    ]
}