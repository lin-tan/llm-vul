{
    "output": [
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final File targetFile = FileUtils.resolveFile( folder, itemTitle)) {\n<|endoftext|>",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    if ( targetFile!= null) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    if (targetFile!= null) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try ( final File targetFile = FileUtils.resolveFile( folder, itemTitle)) {\n<|endoftext|>",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final FileInputStream inputStream = new FileInputStream(targetFile)) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final FileWriter fw = new FileWriter(targetFile)) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final FileWriter fw = new FileWriter(targetFile, true)) {\n<|endoftext|><|endoftext|><|endoftext|><|endoftext|>",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final File targetFile = FileUtils.resolveFile( folder, itemTitle))\n<|endoftext|><|endoftext|>",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final InputStream inputStream = new InputStream(compressedInDataSequence)) {\n<|endoftext|><|endoftext|>",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (final File targetFile = FileUtils.resolveFile( folder, itemTitle)){\n<|endoftext|>"
    ],
    "validation_result": [
        {
            "patch": "    try (final File targetFile = FileUtils.resolveFile( folder, itemTitle)) {\n",
            "correctness": "uncompilable",
            "translated": "    try (final File f = FileUtils.resolveFile( dir, entryName)) {\n"
        },
        {
            "patch": "    if ( targetFile!= null) {\n",
            "correctness": "uncompilable",
            "translated": "    if (f!= null) {\n"
        },
        {
            "patch": "    if (targetFile!= null) {\n",
            "correctness": "uncompilable",
            "translated": "    if (f!= null) {\n"
        },
        {
            "patch": "    try ( final File targetFile = FileUtils.resolveFile( folder, itemTitle)) {\n",
            "correctness": "uncompilable",
            "translated": "    try (final File f = FileUtils.resolveFile( dir, entryName)) {\n"
        },
        {
            "patch": "    try (final FileInputStream inputStream = new FileInputStream(targetFile)) {\n",
            "correctness": "uncompilable",
            "translated": "    try (final FileInputStream inputStream = new FileInputStream(f)) {\n"
        },
        {
            "patch": "    try (final FileWriter fw = new FileWriter(targetFile)) {\n",
            "correctness": "uncompilable",
            "translated": "    try (final FileWriter fw = new FileWriter(f)) {\n"
        },
        {
            "patch": "    try (final FileWriter fw = new FileWriter(targetFile, true)) {\n",
            "correctness": "uncompilable",
            "translated": "    try (final FileWriter fw = new FileWriter(f, true)) {\n"
        },
        {
            "patch": "    try (final File targetFile = FileUtils.resolveFile( folder, itemTitle))\n",
            "correctness": "uncompilable",
            "translated": "    try (final File f = FileUtils.resolveFile( dir, entryName))\n"
        },
        {
            "patch": "    try (final InputStream inputStream = new InputStream(compressedInDataSequence)) {\n",
            "correctness": "uncompilable",
            "translated": "    try (final InputStream inputStream = new InputStream(compressedInputStream)) {\n"
        },
        {
            "patch": "    try (final File targetFile = FileUtils.resolveFile( folder, itemTitle)){\n",
            "correctness": "uncompilable",
            "translated": "    try (final File f = FileUtils.resolveFile( dir, entryName)) {\n"
        }
    ]
}