{
    "output": [
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(targetDirectory.toURI().getPath())) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.equals(targetDirectory.getCanonicalPath())) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(targetDirectory.getAbsolutePath())) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(targetDir.getCanonicalPath())) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(targetDirectory.getPath())) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (f.getCanonicalPath().startsWith(targetDirectory.getCanonicalPath())) {\n<|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.contains(targetDirectory.getCanonicalPath())) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n    for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry!= null; nextEntry = supplier.getNextReadableEntry()) {\n        String name = nextEntry.getName();\n        File f = new File(targetDirectory, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {   \n// buggy lines end\n            if (!nextEntry.isDirectory()) {\n                File parent = f.getParentFile();\n                if (parent.isDirectory() || parent.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream o = Files.newOutputStream(fp)) {\n                        writer.writeEntryDataTo(nextEntry, o);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + parent;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs()) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + nextEntry.getName()\n            + \" would create file outside of \" + targetDirectory;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(targetDirectory.getCanonicalPath() + File.separator)) {\n<|endofmask|><|endofmask|><|endofmask|>"
    ],
    "validation_result": [
        {
            "patch": "        if (fpath.startsWith(targetDirectory.toURI().getPath())) {\n",
            "correctness": "test_success"
        },
        {
            "patch": "        if (fpath.equals(targetDirectory.getCanonicalPath())) {\n",
            "correctness": "compile_success"
        },
        {
            "patch": "        if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n",
            "correctness": "compile_success"
        },
        {
            "patch": "        if (fpath.startsWith(targetDirectory.getAbsolutePath())) {\n",
            "correctness": "compile_success"
        },
        {
            "patch": "        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {\n",
            "correctness": "compile_success"
        },
        {
            "patch": "        if (fpath.startsWith(targetDir.getCanonicalPath())) {\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "        if (fpath.startsWith(targetDirectory.getPath())) {\n",
            "correctness": "compile_success"
        },
        {
            "patch": "        if (f.getCanonicalPath().startsWith(targetDirectory.getCanonicalPath())) {\n",
            "correctness": "compile_success"
        },
        {
            "patch": "        if (fpath.contains(targetDirectory.getCanonicalPath())) {\n",
            "correctness": "compile_success"
        },
        {
            "patch": "        if (fpath.startsWith(targetDirectory.getCanonicalPath() + File.separator)) {\n",
            "correctness": "test_success"
        }
    ]
}