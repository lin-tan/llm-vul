{
    "output": [
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.equals(objectiveFolder.getCanonicalPath())) {\n<|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(objectiveFolder.getAbsolutePath())) {\n<|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (!fpath.startsWith(objectiveFolder.getCanonicalPath())) {\n<|endofmask|>",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(objectiveFolder.toURI().getPath())) {\n<|endofmask|>",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(objectiveFolderPath)) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {\n<|endofmask|>",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.contains(objectiveFolder.getCanonicalPath())) {\n<|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(objectiveFolder)) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(objectiveFolder.toURI().toString())) {\n<|endofmask|>",
        "<|endoftext|>private void enlarge(DocumentItemProvider provider, ItemNoter noter, File objectiveFolder)\n    throws IOException {\n    for (DocumentItem followingItem = provider.acquireFollowingLegibleItem(); followingItem!= null; followingItem = provider.acquireFollowingLegibleItem()) {\n        String name = followingItem.acquireTitle();\n        File f = new File(objectiveFolder, name);\n        String fpath = f.getCanonicalPath();\n// buggy lines start:\n        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {   \n// buggy lines end\n            if (!followingItem.whetherFolder()) {\n                File upperFolder = f.getParentFile();\n                if (upperFolder.isDirectory() || upperFolder.mkdirs()) {\n                    Path fp = f.toPath();\n                    try (OutputStream u = Files.newOutputStream(fp)) {\n                        noter.noteDownItemInformationTo(followingItem, u);\n                    }\n                }else{\n                    String s = \"failed to create directory \" + upperFolder;\n                    throw new IOException(s);\n                }\n            } else {\n                if (f.isDirectory() || f.mkdirs() ) {\n                    continue;\n                }else{\n                    String s = \"failed to create directory \" + f;\n                    throw new IOException(s);\n                }\n            }\n        }else{\n            String s = \"expanding \" + followingItem.acquireTitle()\n            + \" would create file outside of \" + objectiveFolder;\n            throw new IOException(s);\n        }\n    }\n}\n// fixed lines:\n        if (fpath.startsWith(objectiveFolder.getPath())) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>"
    ],
    "validation_result": [
        {
            "patch": "        if (fpath.equals(objectiveFolder.getCanonicalPath())) {\n",
            "correctness": "compile_success",
            "translated": "        if (fpath.equals(targetDirectory.getCanonicalPath())) {\n"
        },
        {
            "patch": "        if (fpath.startsWith(objectiveFolder.getAbsolutePath())) {\n",
            "correctness": "compile_success",
            "translated": "        if (fpath.startsWith(targetDirectory.getAbsolutePath())) {\n"
        },
        {
            "patch": "        if (!fpath.startsWith(objectiveFolder.getCanonicalPath())) {\n",
            "correctness": "compile_success",
            "translated": "        if (!fpath.startsWith(targetDirectory.getCanonicalPath())) {\n"
        },
        {
            "patch": "        if (fpath.startsWith(objectiveFolder.toURI().getPath())) {\n",
            "correctness": "test_success",
            "translated": "        if (fpath.startsWith(targetDirectory.toURI().getPath())) {\n"
        },
        {
            "patch": "        if (fpath.startsWith(objectiveFolderPath)) {\n",
            "correctness": "uncompilable",
            "translated": "        if (fpath.startsWith(objectiveFolderPath)) {\n"
        },
        {
            "patch": "        if (fpath.startsWith(objectiveFolder.getCanonicalPath())) {\n",
            "correctness": "compile_success",
            "translated": "        if (fpath.startsWith(targetDirectory.getCanonicalPath())) {\n"
        },
        {
            "patch": "        if (fpath.contains(objectiveFolder.getCanonicalPath())) {\n",
            "correctness": "compile_success",
            "translated": "        if (fpath.contains(targetDirectory.getCanonicalPath())) {\n"
        },
        {
            "patch": "        if (fpath.startsWith(objectiveFolder)) {\n",
            "correctness": "uncompilable",
            "translated": "        if (fpath.startsWith(targetDirectory)) {\n"
        },
        {
            "patch": "        if (fpath.startsWith(objectiveFolder.toURI().toString())) {\n",
            "correctness": "compile_success",
            "translated": "        if (fpath.startsWith(targetDirectory.toURI().toString())) {\n"
        },
        {
            "patch": "        if (fpath.startsWith(objectiveFolder.getPath())) {\n",
            "correctness": "compile_success",
            "translated": "        if (fpath.startsWith(targetDirectory.getPath())) {\n"
        }
    ]
}