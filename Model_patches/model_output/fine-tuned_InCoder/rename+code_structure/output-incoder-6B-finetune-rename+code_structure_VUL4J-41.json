{
    "output": [
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try \n    {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try\n    {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try{\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    finally {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try { \n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    if ( targetFile.exists() )\n    {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (InputStream input = compressedInDataSequence)\n    {\n<|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    if ( targetFile.exists() )\n        return;\n    try\n    {\n<|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try{\n// buggy lines end\n        if ( whetherOverwrite() ||!targetFile.exists() ||  targetFile.lastModified() < itemTime.getTime() ) \n        {\n            final File parentFile = targetFile.getParentFile();\n            if ( parentFile!= null )\n            {\n                parentFile.mkdirs();\n            }\n            if ( StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n            {\n                if (! whetherFolder )\n                {\n                    OutputStream output = null;\n                    try\n                    {\n                        output = new FileOutputStream( targetFile );\n                        IOUtil.copy( compressedInDataSequence, output );\n                        output.close();\n                        output = null;\n                    }\n                    finally\n                    {\n                        IOUtil.close( output );\n                    }\n                }\n                else\n                {\n                    targetFile.mkdirs();\n                }\n            }\n            else{\n                File symlinkDestFile = new File( symbolicLinkTargetLocation );\n                SymlinkUtils.createSymbolicLink( targetFile, symlinkDestFile);\n            }\n            long time = itemTime.getTime();\n            targetFile.setLastModified( time );\n            if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n            {\n                DocumentItemUtility.changeMode( targetFile, setting );\n            }\n        }else{\n             return;\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        String path = targetFile.getPath();\n        acquireLogger().warn( \"Unable to expand to file \" + path );\n    }\n}\n// fixed lines:\n    try (InputStream input = compressedInDataSequence) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>"
    ],
    "validation_result": [
        {
            "patch": "    try \n    {\n",
            "correctness": "compile_success",
            "translated": "    try \n    {\n"
        },
        {
            "patch": "    try\n    {\n",
            "correctness": "compile_success",
            "translated": "    try \n    {\n"
        },
        {
            "patch": "    try {\n",
            "correctness": "compile_success",
            "translated": "    try \n    {\n"
        },
        {
            "patch": "    try{\n",
            "correctness": "compile_success",
            "translated": "    try \n    {\n"
        },
        {
            "patch": "    finally {\n",
            "correctness": "uncompilable",
            "translated": "    finally {\n"
        },
        {
            "patch": "    try { \n",
            "correctness": "compile_success",
            "translated": "    try \n    {\n"
        },
        {
            "patch": "    if ( targetFile.exists() )\n    {\n",
            "correctness": "uncompilable",
            "translated": "    if ( f.exists() )\n    {\n"
        },
        {
            "patch": "    try (InputStream input = compressedInDataSequence)\n    {\n",
            "correctness": "compile_success",
            "translated": "    try (InputStream input = compressedInputStream)\n    {\n"
        },
        {
            "patch": "    if ( targetFile.exists() )\n        return;\n    try\n    {\n",
            "correctness": "compile_success",
            "translated": "    if ( f.exists() )\n        return;\n    try\n    {\n"
        },
        {
            "patch": "    try (InputStream input = compressedInDataSequence) {\n",
            "correctness": "compile_success",
            "translated": "    try (InputStream input = compressedInputStream)\n    {\n"
        }
    ]
}