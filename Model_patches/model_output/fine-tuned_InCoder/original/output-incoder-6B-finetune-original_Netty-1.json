{
    "output": [
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (ch == ':') {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (ch == ':' || Character.isWhitespace(ch) || ch == '=') {\n<|endofmask|>",
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (ch == ':' || Character.isISOControl(ch)) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (ch == ';' || Character.isWhitespace(ch)) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (!Character.isWhitespace(ch)) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (ch == ':' &&!Character.isWhitespace(ch)) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (ch == '=') {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (ch == ':' || Character.isWhitespace(ch) || ch == '\\\\') {\n<|endofmask|>",
        "<|endoftext|>private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n// buggy lines start:\n        if (ch == ':' || Character.isWhitespace(ch)) {\n// buggy lines end\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    name = sb.subStringUnsafe(nameStart, nameEnd);\n    valueStart = findNonWhitespace(sb, colonEnd);\n    if (valueStart == length) {\n        value = EMPTY_VALUE;\n    } else {\n        valueEnd = findEndOfString(sb);\n        value = sb.subStringUnsafe(valueStart, valueEnd);\n    }\n}\n// fixed lines:\n        if (ch == ':' || Character.isWhitespace(ch) || ch == '-') {\n<|endofmask|>"
    ],
    "validation_result": [
        {
            "patch": "        if (ch == ':') {\n",
            "correctness": "compile_success",
            "translated": "        if (ch == ':') {\n"
        },
        {
            "patch": "        if (ch == ':' || Character.isWhitespace(ch) || ch == '=') {\n",
            "correctness": "compile_success",
            "translated": "        if (ch == ':' || Character.isWhitespace(ch) || ch == '=') {\n"
        },
        {
            "patch": "        if (ch == ':' || Character.isISOControl(ch)) {\n",
            "correctness": "compile_success",
            "translated": "        if (ch == ':' || Character.isISOControl(ch)) {\n"
        },
        {
            "patch": "        if (ch == ';' || Character.isWhitespace(ch)) {\n",
            "correctness": "compile_success",
            "translated": "        if (ch == ';' || Character.isWhitespace(ch)) {\n"
        },
        {
            "patch": "        if (!Character.isWhitespace(ch)) {\n",
            "correctness": "compile_success",
            "translated": "        if (!Character.isWhitespace(ch)) {\n"
        },
        {
            "patch": "        if (ch == ':' &&!Character.isWhitespace(ch)) {\n",
            "correctness": "compile_success",
            "translated": "        if (ch == ':' &&!Character.isWhitespace(ch)) {\n"
        },
        {
            "patch": "        if (ch == '=') {\n",
            "correctness": "compile_success",
            "translated": "        if (ch == '=') {\n"
        },
        {
            "patch": "        if (ch == ':' || Character.isWhitespace(ch)) {\n",
            "correctness": "compile_success",
            "translated": "        if (ch == ':' || Character.isWhitespace(ch)) {\n"
        },
        {
            "patch": "        if (ch == ':' || Character.isWhitespace(ch) || ch == '\\\\') {\n",
            "correctness": "compile_success",
            "translated": "        if (ch == ':' || Character.isWhitespace(ch) || ch == '\\\\') {\n"
        },
        {
            "patch": "        if (ch == ':' || Character.isWhitespace(ch) || ch == '-') {\n",
            "correctness": "compile_success",
            "translated": "        if (ch == ':' || Character.isWhitespace(ch) || ch == '-') {\n"
        }
    ]
}