{
    "output": [
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        setCurrentAccessPermission(currentAccessPermission, true);\n<|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        setCurrentAccessPermission(dicPermissions);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        setAccessPermission(currentAccessPermission);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        setCurrentAccessPermission(null);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        encryption.setCurrentAccessPermission(currentAccessPermission);\n<|endofmask|>",
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        setCurrentAccessPermission(currentAccessPermission, false);\n<|endofmask|><|endofmask|>",
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        setCurrentAccessPermission(new AccessPermission(dicPermissions));\n<|endofmask|>",
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        setCurrentAccessPermission(currentAccessPermission, encryption);\n<|endofmask|>",
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        setCurrentAccessPermission(currentAccessPermission.copy());\n<|endofmask|>",
        "<|endoftext|>@Override\npublic void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                 DecryptionMaterial decryptionMaterial)\n                                 throws IOException\n{\n    if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n    {\n        throw new IOException(\"Decryption material is not compatible with the document\");\n    }\n    setDecryptMetadata(encryption.isEncryptMetaData());\n    StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n    String password = material.getPassword();\n    if(password == null)\n    {\n        password = \"\";\n    }\n    int dicPermissions = encryption.getPermissions();\n    int dicRevision = encryption.getRevision();\n    int dicLength = encryption.getVersion() == 1? 5 : encryption.getLength() / 8;\n    byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n    boolean encryptMetadata = encryption.isEncryptMetaData();\n    byte[] userKey = encryption.getUserKey();\n    byte[] ownerKey = encryption.getOwnerKey();\n    byte[] ue = null, oe = null;\n    Charset passwordCharset = Charsets.ISO_8859_1;\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        passwordCharset = Charsets.UTF_8;\n        ue = encryption.getUserEncryptionKey();\n        oe = encryption.getOwnerEncryptionKey();\n    }\n    AccessPermission currentAccessPermission;\n    if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                             dicPermissions, documentIDBytes, dicRevision,\n                             dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n        setCurrentAccessPermission(currentAccessPermission);\n        byte[] computedPassword;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            computedPassword = password.getBytes(passwordCharset);\n        }\n        else\n        {\n            computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                    ownerKey, dicRevision, dicLength );\n        }\n        encryptionKey =\n            computeEncryptedKey(\n                computedPassword,\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, true );\n    }\n    else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                       dicPermissions, documentIDBytes, dicRevision,\n                       dicLength, encryptMetadata) )\n    {\n        currentAccessPermission = new AccessPermission(dicPermissions);\n// buggy lines start:\n        setCurrentAccessPermission(currentAccessPermission);\n// buggy lines end\n        \n        encryptionKey =\n            computeEncryptedKey(\n                password.getBytes(passwordCharset),\n                ownerKey, userKey, oe, ue,\n                dicPermissions,\n                documentIDBytes,\n                dicRevision,\n                dicLength,\n                encryptMetadata, false );\n    }\n    else\n    {\n        throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n    }\n    if (dicRevision == 6 || dicRevision == 5)\n    {\n        validatePerms(encryption, dicPermissions, encryptMetadata);\n    }\n    if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n    {\n        PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n        if (stdCryptFilterDictionary!= null)\n        {\n            COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n            setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                   COSName.AESV3.equals(cryptFilterMethod));\n        }\n    }\n}\n// fixed lines:\n        setCurrentAccessPermission(currentAccessPermission.getPermission());\n<|endofmask|>"
    ],
    "validation_result": [
        {
            "patch": "        setCurrentAccessPermission(currentAccessPermission, true);\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "        setCurrentAccessPermission(dicPermissions);\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "        setAccessPermission(currentAccessPermission);\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "        setCurrentAccessPermission(null);\n",
            "correctness": "compile_success"
        },
        {
            "patch": "        encryption.setCurrentAccessPermission(currentAccessPermission);\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "        setCurrentAccessPermission(currentAccessPermission, false);\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "        setCurrentAccessPermission(new AccessPermission(dicPermissions));\n",
            "correctness": "compile_success"
        },
        {
            "patch": "        setCurrentAccessPermission(currentAccessPermission, encryption);\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "        setCurrentAccessPermission(currentAccessPermission.copy());\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "        setCurrentAccessPermission(currentAccessPermission.getPermission());\n",
            "correctness": "uncompilable"
        }
    ]
}