{
    "output": [
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    String targetDirPath = targetDirectory.getAbsolutePath();\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    String targetDirPath = targetDirectory.getPath();\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    String targetDirPath = targetDirectory.getCanonicalPath() + File.separator;\n<|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    Path targetDirPath = targetDirectory.toPath();\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    final String targetDirPath = targetDirectory.getCanonicalPath();\n<|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    String targetDirPath = targetDirectory.toURI().toString();\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    String targetDirPath = targetDirectory.toURI().getPath();\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    String targetDirPath = getCanonicalPath(targetDirectory);\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    Path targetDirPath = Paths.get(targetDirectory.getCanonicalPath());\n<|endofmask|>",
        "<|endoftext|>private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n// buggy lines start:\n    String targetDirPath = targetDirectory.getCanonicalPath();\n// buggy lines end\n    ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n    while (nextEntry!= null) {\n        File f = new File(targetDirectory, nextEntry.getName());\n        if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n            throw new IOException(\"expanding \" + nextEntry.getName()\n                + \" would create file outside of \" + targetDirectory);\n        }\n        if (nextEntry.isDirectory()) {\n            if (!f.isDirectory() &&!f.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + f);\n            }\n        } else {\n            File parent = f.getParentFile();\n            if (!parent.isDirectory() &&!parent.mkdirs()) {\n                throw new IOException(\"failed to create directory \" + parent);\n            }\n            try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                writer.writeEntryDataTo(nextEntry, o);\n            }\n        }\n        nextEntry = supplier.getNextReadableEntry();\n    }\n}\n// fixed lines:\n    Path targetDirPath = Paths.get(targetDirectory.getPath());\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>"
    ],
    "validation_result": [
        {
            "patch": "    String targetDirPath = targetDirectory.getAbsolutePath();\n",
            "correctness": "compile_success"
        },
        {
            "patch": "    String targetDirPath = targetDirectory.getPath();\n",
            "correctness": "compile_success"
        },
        {
            "patch": "    String targetDirPath = targetDirectory.getCanonicalPath() + File.separator;\n",
            "correctness": "test_success"
        },
        {
            "patch": "    Path targetDirPath = targetDirectory.toPath();\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    final String targetDirPath = targetDirectory.getCanonicalPath();\n",
            "correctness": "compile_success"
        },
        {
            "patch": "    String targetDirPath = targetDirectory.toURI().toString();\n",
            "correctness": "compile_success"
        },
        {
            "patch": "    String targetDirPath = targetDirectory.toURI().getPath();\n",
            "correctness": "test_success"
        },
        {
            "patch": "    String targetDirPath = getCanonicalPath(targetDirectory);\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    Path targetDirPath = Paths.get(targetDirectory.getCanonicalPath());\n",
            "correctness": "uncompilable"
        },
        {
            "patch": "    Path targetDirPath = Paths.get(targetDirectory.getPath());\n",
            "correctness": "uncompilable"
        }
    ]
}