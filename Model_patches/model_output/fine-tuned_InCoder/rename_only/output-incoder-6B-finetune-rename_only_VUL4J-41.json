{
    "output": [
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    try\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    try <|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    try (\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    try {\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    try // fixed <|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    finally <|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    try // fixed lines end\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    try \n<|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    try (InputStream input = compressedInDataSequence)\n<|endofmask|>",
        "<|endoftext|>protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n// buggy lines start:\n    try\n// buggy lines end\n    {\n        if (!whetherOverwrite() && targetFile.exists() && ( targetFile.lastModified() >= itemTime.getTime() ) )\n        {\n            return;\n        }\n        final File parentFile = targetFile.getParentFile();\n        if ( parentFile!= null )\n        {\n            parentFile.mkdirs();\n        }\n        if (!StringUtils.isEmpty( symbolicLinkTargetLocation ) )\n        {\n            SymlinkUtils.createSymbolicLink( targetFile, new File( symbolicLinkTargetLocation ) );\n        }\n        else if ( whetherFolder )\n        {\n            targetFile.mkdirs();\n        }\n        else\n        {\n            OutputStream output = null;\n            try\n            {\n                output = new FileOutputStream( targetFile );\n                IOUtil.copy( compressedInDataSequence, output );\n                output.close();\n                output = null;\n            }\n            finally\n            {\n                IOUtil.close( output );\n            }\n        }\n        targetFile.setLastModified( itemTime.getTime() );\n        if (!whetherDisregardConsent() && setting!= null &&!whetherFolder )\n        {\n            DocumentItemUtility.changeMode( targetFile, setting );\n        }\n    }\n    catch ( final FileNotFoundException e )\n    {\n        acquireLogger().warn( \"Unable to expand to file \" + targetFile.getPath() );\n    }\n}\n// fixed lines:\n    final File parentFile = targetFile.getParentFile();\n<|endofmask|>"
    ],
    "validation_result": [
        {
            "patch": "    try\n",
            "correctness": "compile_success",
            "translated": "    try\n"
        },
        {
            "patch": "    try ",
            "correctness": "compile_success",
            "translated": "    try\n"
        },
        {
            "patch": "    try (\n",
            "correctness": "uncompilable",
            "translated": "    try (\n"
        },
        {
            "patch": "    try {\n",
            "correctness": "uncompilable",
            "translated": "    try {\n"
        },
        {
            "patch": "    try // fixed ",
            "correctness": "uncompilable",
            "translated": "    try // fixed "
        },
        {
            "patch": "    finally ",
            "correctness": "uncompilable",
            "translated": "    finally "
        },
        {
            "patch": "    try // fixed lines end\n",
            "correctness": "compile_success",
            "translated": "    try // fixed lines end\n"
        },
        {
            "patch": "    try \n",
            "correctness": "compile_success",
            "translated": "    try\n"
        },
        {
            "patch": "    try (InputStream input = compressedInDataSequence)\n",
            "correctness": "compile_success",
            "translated": "    try (InputStream input = compressedInputStream)\n"
        },
        {
            "patch": "    final File parentFile = targetFile.getParentFile();\n",
            "correctness": "uncompilable",
            "translated": "    final File dirF = f.getParentFile();\n"
        }
    ]
}