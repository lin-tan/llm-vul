{
    "output": [
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = titile.lastIndexOf('.');\n<|endofmask|>",
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = titile.indexOf('/');\n<|endofmask|><|endofmask|>",
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = titile.indexOf('.', 1);\n<|endofmask|>",
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = f.getName().indexOf('.');\n<|endofmask|>",
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = titile.indexOf(':');\n<|endofmask|><|endofmask|>",
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = filename.indexOf('.');\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = titile.indexOf('.');\n<|endofmask|><|endofmask|>",
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = title.indexOf('.');\n<|endofmask|><|endofmask|><|endofmask|><|endofmask|>",
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = titile.indexOf('.', 2);\n<|endofmask|>",
        "<|endoftext|>static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    if (m > 0) {\n        titile = titile.substring(0, m);\n    }\n    File f = new File(folder, titile);\n// buggy lines start:\n    int point = titile.indexOf('.');\n// buggy lines end\n    String beginning = point < 0? titile : titile.substring(0, point);\n    String postfix = point < 0? \"\" : titile.substring(point);\n    int position = 2;\n    while (f.exists()) {\n        f = new File(folder, beginning + \"-\" + position++ + postfix);\n    }\n    f.getParentFile().mkdirs();\n    return f;\n}\n// fixed lines:\n    int point = titile.indexOf('.', 0);\n<|endofmask|>"
    ],
    "validation_result": [
        {
            "patch": "    int point = titile.lastIndexOf('.');\n",
            "correctness": "compile_success",
            "translated": "    int dot = name.lastIndexOf('.');\n"
        },
        {
            "patch": "    int point = titile.indexOf('/');\n",
            "correctness": "compile_success",
            "translated": "    int dot = name.indexOf('/');\n"
        },
        {
            "patch": "    int point = titile.indexOf('.', 1);\n",
            "correctness": "compile_success",
            "translated": "    int dot = name.indexOf('.', 1);\n"
        },
        {
            "patch": "    int point = f.getName().indexOf('.');\n",
            "correctness": "compile_success",
            "translated": "    int dot = file.getName().indexOf('.');\n"
        },
        {
            "patch": "    int point = titile.indexOf(':');\n",
            "correctness": "compile_success",
            "translated": "    int dot = name.indexOf(':');\n"
        },
        {
            "patch": "    int point = filename.indexOf('.');\n",
            "correctness": "uncompilable",
            "translated": "    int dot = filename.indexOf('.');\n"
        },
        {
            "patch": "    int point = titile.indexOf('.');\n",
            "correctness": "compile_success",
            "translated": "    int dot = name.indexOf('.');\n"
        },
        {
            "patch": "    int point = title.indexOf('.');\n",
            "correctness": "uncompilable",
            "translated": "    int dot = title.indexOf('.');\n"
        },
        {
            "patch": "    int point = titile.indexOf('.', 2);\n",
            "correctness": "compile_success",
            "translated": "    int dot = name.indexOf('.', 2);\n"
        },
        {
            "patch": "    int point = titile.indexOf('.', 0);\n",
            "correctness": "compile_success",
            "translated": "    int dot = name.indexOf('.', 0);\n"
        }
    ]
}