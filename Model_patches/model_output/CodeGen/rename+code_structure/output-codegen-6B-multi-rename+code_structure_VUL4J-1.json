{
    "function range": "2,5-63,5",
    "output": [
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.COMMA:\n            tokenizer.followingToken(JSONToken.",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.EOF:\n            tokenizer.followingToken(JSONToken.",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.TRUE:\n            tokenizer.followingToken(JSONToken.",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.EOF:\n            return null;\n        default:\n            break",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    if (constituentCategory instanceof",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    return null;\n}\n}\n",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.EOF:\n            return null;\n        default:\n            throw",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    batch.add(constituentCategory",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    batch.add(constituentTemplate",
        "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    if (constituentTemplate instanceof"
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T inverseConvert(BasicAnalyzerJson analyzer, Type category, Object attributeTitile) {\n    final JsonTokenizer tokenizer = analyzer.tokenizer;\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JsonBatch batch = new JsonBatch();\n    Class constituentTemplate;\n    Type constituentCategory;\n    if (!(category instanceof GenericArrayType)) {\n        constituentCategory =  ((Class) category).acquireCategoryOfComponent();\n        constituentTemplate = ((Class) category).acquireCategoryOfComponent();\n    } else {\n        constituentCategory = ((GenericArrayType) category).getGenericComponentType();\n        if (! (constituentCategory instanceof TypeVariable)) {\n            constituentTemplate = CategoryTools.acquireClass(constituentCategory);\n        } else {\n            TypeVariable categoryVariable = (TypeVariable) constituentCategory;\n            Type categoryOfObject = analyzer.obtainContext().category;\n            if (!(categoryOfObject instanceof ParameterizedType)) {\n                Type type_ = categoryVariable.getBounds()[0];\n                constituentTemplate = CategoryTools.acquireClass(type_);\n            } else {\n                ParameterizedType parameterizedCategoryOfObject = (ParameterizedType) categoryOfObject;\n                Type originalCategoryOfObject = parameterizedCategoryOfObject.getRawType();\n                Type realCategory = null;\n                if (originalCategoryOfObject instanceof Class) {\n                    TypeVariable[] objectCategoryParameters = ((Class) originalCategoryOfObject).getTypeParameters();\n                    int x = 0;\n                    while( x < objectCategoryParameters.length) {\n                        String i_name = objectCategoryParameters[x].getName();\n                        String typeVar_name = categoryVariable.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            x++;\n                           continue;\n                        }\n                        realCategory = parameterizedCategoryOfObject.getActualTypeArguments()[x];\n                        x++;\n                    }\n                }\n                constituentTemplate = (realCategory instanceof Class)? (Class) realCategory:Object.class;\n            } \n        }\n    }\n    switch (tokenizer.token()) {\n        case JSONToken.LITERAL_STR:\n            byte[] bytes = tokenizer.contentsOfBytes();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = tokenizer.intValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = tokenizer.floatValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = tokenizer.doubleValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = tokenizer.booleanValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = tokenizer.stringValue();\n            tokenizer.followingToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            tokenizer.followingToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    return null;\n}\n}",
            "correctness": "uncompilable",
            "translated": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\npublic <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n    final JSONLexer lexer = parser.lexer;\n    switch (lexer.token()) {\n        case JSONToken.LITERAL_STRING:\n            byte[] bytes = lexer.bytesValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    JSONArray array = new JSONArray();\n    Class componentClass;\n    Type componentType;\n    if (!(type instanceof GenericArrayType)) {\n        componentType =  ((Class) type).getComponentType();\n        componentClass = ((Class) type).getComponentType();\n    } else {\n        componentType = ((GenericArrayType) type).getGenericComponentType();\n        if (! (componentType instanceof TypeVariable)) {\n            componentClass = TypeUtils.getClass(componentType);\n        } else {\n            TypeVariable typeVar = (TypeVariable) componentType;\n            Type objType = parser.getContext().type;\n            if (!(objType instanceof ParameterizedType)) {\n                Type type_ = typeVar.getBounds()[0];\n                componentClass = TypeUtils.getClass(type_);\n            } else {\n                ParameterizedType objParamType = (ParameterizedType) objType;\n                Type objRawType = objParamType.getRawType();\n                Type actualType = null;\n                if (objRawType instanceof Class) {\n                    TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();\n                    int i = 0;\n                    while( i < objTypeParams.length) {\n                        String i_name = objTypeParams[i].getName();\n                        String typeVar_name = typeVar.getName();\n                        if (!i_name.equals(typeVar_name)) {\n                            i++;\n                           continue;\n                        }\n                        actualType = objParamType.getActualTypeArguments()[i];\n                        i++;\n                    }\n                }\n                componentClass = (actualType instanceof Class)? (Class) actualType:Object.class;\n            } \n        }\n    }\n    switch (lexer.token()) {\n        case JSONToken.LITERAL_STRING:\n            byte[] bytes = lexer.bytesValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) bytes;\n        case JSONToken.NULL:\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LITERAL_INT:\n            int intValue = lexer.intValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) intValue;\n        case JSONToken.LITERAL_FLOAT:\n            float floatValue = lexer.floatValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) floatValue;\n        case JSONToken.LITERAL_DOUBLE:\n            double doubleValue = lexer.doubleValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) doubleValue;\n        case JSONToken.LITERAL_BOOLEAN:\n            boolean booleanValue = lexer.booleanValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) booleanValue;\n        case JSONToken.LITERAL_STRING:\n            String stringValue = lexer.stringValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) stringValue;\n        case JSONToken.LITERAL_NULL:\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACE:\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.RBRACKET:\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACE:\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        case JSONToken.LBRACKET:\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        default:\n            break;\n    }\n    return null;\n}\n}"
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        }
    ]
}