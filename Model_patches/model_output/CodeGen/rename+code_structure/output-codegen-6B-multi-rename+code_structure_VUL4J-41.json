{
    "output": [
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedIn",
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws",
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }\n   \n   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, final String symbolicLinkTargetLocation )",
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( target",
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( target",
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( target",
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( target",
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( target",
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( target",
        "   protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.forceMkdir( targetFile."
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       FileUtils.forceMkdir( f.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInputStream, f );\n   }"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                               final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                               final Integer setting, String symbolicLinkTargetLocation )\n       throws IOException, DocumentorException\n   {\n      \n       final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n       FileUtils.forceMkdir( targetFile.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n   }",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                               final String entryName, final Date entryDate, final boolean isDirectory,\n                               final Integer mode, String symlinkDestination )\n       throws IOException, ArchiverException\n   {\n      \n       final File f = FileUtils.resolveFile( dir, entryName );\n       FileUtils.forceMkdir( f.getParentFile() );\n       FileUtils.copyInputStreamToFile( compressedInputStream, f );\n   }"
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        }
    ]
}