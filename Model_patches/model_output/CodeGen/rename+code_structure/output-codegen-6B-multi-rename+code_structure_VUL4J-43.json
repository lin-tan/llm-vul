{
    "output": [
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif (item.isDirectory())\n\t{\n\t\tif (!outputFile.exists())\n\t\t{\n\t\t\toutputFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(outputFile);\n\t\ttry\n\t\t{\n\t\t\tInputStream is = compressedFile.getInputStream(item);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(is, fos);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tis.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tfos.close();\n\t\t}\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif (item.isDirectory())\n\t{\n\t\tif (!outputFile.exists())\n\t\t{\n\t\t\toutputFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(outputFile);\n\t\ttry\n\t\t{\n\t\t\tInputStream is = compressedFile.getInputStream(item);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(is, fos);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tis.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tfos.close();\n\t\t}\n\t}\n}\n\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}\n\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}\n\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif (item.isDirectory())\n\t{\n\t\tif (!outputFile.exists())\n\t\t{\n\t\t\toutputFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(outputFile);\n\t\ttry\n\t\t{\n\t\t\tInputStream is = compressedFile.getInputStream(item);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(is, fos);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tIOUtils.closeQuietly(is);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tfos.close();\n\t\t}\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}\n\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.flush();\n\t\tout.close();\n\t}\n}\n}\n"
    ],
    "validation_result": [
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif (item.isDirectory())\n\t{\n\t\tif (!outputFile.exists())\n\t\t{\n\t\t\toutputFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(outputFile);\n\t\ttry\n\t\t{\n\t\t\tInputStream is = compressedFile.getInputStream(item);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(is, fos);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tis.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tfos.close();\n\t\t}\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(outFile);\n\t\ttry\n\t\t{\n\t\t\tInputStream is = zipFile.getInputStream(entry);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(is, fos);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tis.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tfos.close();\n\t\t}\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif (item.isDirectory())\n\t{\n\t\tif (!outputFile.exists())\n\t\t{\n\t\t\toutputFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(outputFile);\n\t\ttry\n\t\t{\n\t\t\tInputStream is = compressedFile.getInputStream(item);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(is, fos);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tis.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tfos.close();\n\t\t}\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(outFile);\n\t\ttry\n\t\t{\n\t\t\tInputStream is = zipFile.getInputStream(entry);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(is, fos);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tis.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tfos.close();\n\t\t}\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif(!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tif(!outFile.exists())\n\t{\n\t\toutFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif(!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tif(!outFile.exists())\n\t{\n\t\toutFile.createNewFile();\n\t}\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif(!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tif(!outFile.exists())\n\t{\n\t\toutFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif(!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tif(!outFile.exists())\n\t{\n\t\toutFile.createNewFile();\n\t}\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif (item.isDirectory())\n\t{\n\t\tif (!outputFile.exists())\n\t\t{\n\t\t\toutputFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(outputFile);\n\t\ttry\n\t\t{\n\t\t\tInputStream is = compressedFile.getInputStream(item);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(is, fos);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tIOUtils.closeQuietly(is);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tfos.close();\n\t\t}\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFileOutputStream fos = new FileOutputStream(outFile);\n\t\ttry\n\t\t{\n\t\t\tInputStream is = zipFile.getInputStream(entry);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(is, fos);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tIOUtils.closeQuietly(is);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tfos.close();\n\t\t}\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif(!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tif(!outFile.exists())\n\t{\n\t\toutFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif(!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tif(!outFile.exists())\n\t{\n\t\toutFile.createNewFile();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tString entryName = item.getName();\n\tFile outputFile = new File(targetFolder,entryName);\n\tif(!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tif(!outputFile.exists())\n\t{\n\t\toutputFile.createNewFile();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.flush();\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif(!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tif(!outFile.exists())\n\t{\n\t\toutFile.createNewFile();\n\t}\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.flush();\n\t\tout.close();\n\t}\n}"
        }
    ]
}