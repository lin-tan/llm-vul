{
    "output": [
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n }\n}\n",
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   } else {\n     throw new Exception(decoderResult.cause());\n   }\n }\n}\n",
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   } else {\n     throw new Exception(decoderResult.cause());\n   }\n }\n\n}\n",
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   } else {\n     throw new HttpException(decoderResult.cause());\n   }\n }\n}\n",
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }\n\n  @Override\n  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n    cause.printStackTrace();\n    ctx.close();\n  }\n}\n",
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }\n\n  @Override\n  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n    ctx.close();\n  }\n}\n",
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }\n  \n  @Override\n  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n    cause.printStackTrace();\n    ctx.close();\n  }\n}\n",
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }\n\n  @Override\n  public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n    if (msg instanceof HttpRequest) {\n      HttpRequest httpRequest = (HttpRequest) msg;\n      createQuery(ctx, httpRequest);\n    }\n    ctx.fireChannelRead(msg);\n  }\n}\n",
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }\n\n  @Override\n  public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n    if (msg instanceof HttpRequest) {\n      HttpRequest httpRequest = (HttpRequest) msg;\n      createQuery(ctx, httpRequest);\n    }\n    ctx.fireChannelRead(msg);\n  }\n\n  @Override\n  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n    cause.printStackTrace();\n    ctx.close();\n  }\n}\n",
        "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }\n\n  @Override\n  public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n    if (msg instanceof HttpRequest) {\n      createQuery(ctx, (HttpRequest) msg);\n    }\n    ctx.fireChannelRead(msg);\n  }\n\n  @Override\n  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n    cause.printStackTrace();\n    ctx.close();\n  }\n}\n"
    ],
    "validation_result": [
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   }\n }"
        },
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   } else {\n     throw new Exception(decoderResult.cause());\n   }\n }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   } else {\n     throw new Exception(decoderResult.cause());\n   }\n }"
        },
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   } else {\n     throw new Exception(decoderResult.cause());\n   }\n }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   } else {\n     throw new Exception(decoderResult.cause());\n   }\n }"
        },
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   } else {\n     throw new HttpException(decoderResult.cause());\n   }\n }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   } else {\n     throw new HttpException(decoderResult.cause());\n   }\n }"
        },
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   }\n }"
        },
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   }\n }"
        },
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   }\n }"
        },
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   }\n }"
        },
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   }\n }"
        },
        {
            "patch": "private void createQuery(ChannelHandlerContext ctx, HttpRequest httpQuery) throws Exception {\n   DecoderResult decoderResult = httpQuery.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = httpQuery.headers();\n     Headings queryHeading = new NetworkLibraryHeadingSupporteHeadings(httpHeaders);\n     Long messageSize = HttpUtil.getContentLength(httpQuery, -1L);\n     boolean withContent = (messageSize > 0) || (queryHeading.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     QueryContent queryContent;\n     if(!withContent){\n       queryContent =  null;\n     }else{\n       queryContent  = new QueryContent(messageSize, httpQuery, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (queryContent!= null) {\n       channel.attr(contentCollectorKey).set(queryContent);\n     }\n     X509Certificate clientCertificate = channel.attr(customerAutorizationKey).get();\n     Instant instant = time.instant();\n     PrimaryQuery query = new PrimaryQuery(\n       instant,\n       queryHeading,\n       httpQuery.method(),\n       httpQuery.protocolVersion(),\n       httpQuery.uri(),\n       (InetSocketAddress) channel.distantReference(),\n       (InetSocketAddress) channel.localAddress(),\n       hostRepository.get(ServerConfig.class),\n       queryContent,\n       ConnexionSpareTimeOver.about(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(query);\n   }\n  }",
            "correctness": "uncompilable",
            "translated": "private void newRequest(ChannelHandlerContext ctx, HttpRequest nettyRequest) throws Exception {\n   DecoderResult decoderResult = nettyRequest.decoderResult();\n   if (decoderResult.isSuccess()) {\n     HttpHeaders httpHeaders = nettyRequest.headers();\n     Headers requestHeaders = new NettyHeadersBackedHeaders(httpHeaders);\n     Long contentLength = HttpUtil.getContentLength(nettyRequest, -1L);\n     boolean hasBody = (contentLength > 0) || (requestHeaders.get(HttpHeaderNames.TRANSFER_ENCODING)!= null);\n     RequestBody requestBody;\n     if(!hasBody){\n       requestBody =  null;\n     }else{\n       requestBody  = new RequestBody(contentLength, nettyRequest, ctx);\n     }\n   \n     Channel channel = ctx.channel();\n     if (requestBody!= null) {\n       channel.attr(BODY_ACCUMULATOR_KEY).set(requestBody);\n     }\n     X509Certificate clientCertificate = channel.attr(CLIENT_CERT_KEY).get();\n     Instant instant = clock.instant();\n     DefaultRequest request = new DefaultRequest(\n       instant,\n       requestHeaders,\n       nettyRequest.method(),\n       nettyRequest.protocolVersion(),\n       nettyRequest.uri(),\n       (InetSocketAddress) channel.remoteAddress(),\n       (InetSocketAddress) channel.localAddress(),\n       serverRegistry.get(ServerConfig.class),\n       requestBody,\n       ConnectionIdleTimeout.of(channel),\n       clientCertificate\n     );\n     channel.attr(primaryQueryKey).set(request);\n   }\n }"
        }
    ]
}