{
    "function range": "2,3-26,5",
    "output": [
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n      int zv15 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv15);\n      int zv16 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv16);\n      int zv17 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv17);\n      int zv18 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv18);\n      int zv19 =  ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv19);\n      int zv20 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv20);\n      int zv21 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv21);\n      int zv22 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv22);\n      int zv23 =  ZipTwoByteInteger",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n      int zv15 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv15);\n      int zv16 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv16);\n      int zv17 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv17);\n      int zv18 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv18);\n      int zv19 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv19);\n      int zv20 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv20);\n      int zv21 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv21);\n      int zv22 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv22);\n      int zv23 =  ZipTwoByteInteger",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n      int zv15 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv15);\n      int zv16 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv16);\n      int zv17 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv17);\n      int zv18 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv18);\n      int zv19 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv19);\n      int zv20 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv20);\n      int zv21 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv21);\n      int zv22 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv22);\n      int zv23 =  ZipTwoByteInteger",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n      int zv15 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv15);\n      int zv16 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv16);\n      int zv17 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv17);\n      int zv18 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv18);\n      int zv19 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv19);\n      int zv20 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv20);\n      int zv21 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv21);\n      int zv22 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv22);\n      int zv23 =  ZipTwoByteInteger",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n      int zv15 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv15);\n      int zv16 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv16);\n      int zv17 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv17);\n      int zv18 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv18);\n      int zv19 =  ZipTwoByteInteger.acquireContent(information, beginning + 16);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv19);\n      int zv20 =  ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv20);\n      int zv21 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv21);\n      int zv22 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv22);\n      int zv23 =  ZipTwoByteInteger",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n      int zv15 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv15);\n      int zv16 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv16);\n      int zv17 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv17);\n      int zv18 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv18);\n      int zv19 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv19);\n      int zv20 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv20);\n      int zv21 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv21);\n      int zv22 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv22);\n      int zv23 =  ZipTwoByteInteger",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n      int zv15 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv15);\n      int zv16 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv16);\n      int zv17 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv17);\n      int zv18 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv18);\n      int zv19 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv19);\n      int zv20 =  ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv20);\n      int zv21 =  ZipTwoByteInteger.acquireContent(information, beginning + 16);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv21);\n      int zv22 =  ZipTwoByteInteger.acquireContent(information, beginning + 18);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv22);\n      int zv23 =  ZipTwoByteInteger",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n  }\n}\n",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n      int zv15 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv15);\n      int zv16 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv16);\n      int zv17 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv17);\n      int zv18 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv18);\n      int zv19 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv19);\n      int zv20 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv20);\n      int zv21 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv21);\n      int zv22 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv22);\n      int zv23 =  ZipTwoByteInteger.ac",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n      int zv15 =  ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv15);\n      int zv16 =  ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv16);\n      int zv17 =  ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv17);\n      int zv18 =  ZipTwoByteInteger.acquireContent(information, beginning);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv18);\n      int zv19 =  ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv19);\n      int zv20 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv20);\n      int zv21 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv21);\n      int zv22 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.dataDescriptor = AlgorithmForDataDescriptor.acquireAlgorithmThroughCode(zv22);\n      int zv23 =  ZipFourByteInteger"
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n      this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n      this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n      this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n      this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n      int zv2 = ZipTwoByteInteger.acquireContent(information, beginning + 2);\n      this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n      int zv12 =  ZipTwoByteInteger.acquireContent(information, beginning + 12);\n      this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(zv12);\n      int zv13 =  ZipTwoByteInteger.acquireContent(information, beginning + 10);\n      this.encryption = AlgorithmForEncryption.acquireAlgorithmThroughCode(zv13);\n      int zv14 =  ZipTwoByteInteger.acquireContent(information, beginning + 8);\n      this.compression = AlgorithmForCompression.acquireAlgorithmThroughCode(zv14);\n  }",
            "correctness": "uncompilable",
            "translated": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n      this.rcount = ZipLong.getValue(data, offset + 8);\n      this.flags = ZipShort.getValue(data, offset + 6);\n      this.format = ZipShort.getValue(data, offset);\n      this.bitlen = ZipShort.getValue(data, offset + 4);\n      int zv2 = ZipShort.getValue(data, offset + 2);\n      this.algId = EncryptionAlgorithm.getAlgorithmByCode(zv2);\n      if (rcount <= 0) {\n          return;\n      }\n      this.hashSize = ZipShort.getValue(data, offset + 14);\n      int zv12 =  ZipShort.getValue(data, offset + 12);\n      this.hashAlg = HashAlgorithm.getAlgorithmByCode(zv12);\n      int zv13 =  ZipShort.getValue(data, offset + 10);\n      this.encryption = AlgorithmForEncryption.getAlgorithmByCode(zv13);\n      int zv14 =  ZipShort.getValue(data, offset + 8);\n      this.compression = AlgorithmForCompression.getAlgorithmByCode(zv14);\n  }"
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        }
    ]
}