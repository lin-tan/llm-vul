{
    "function range": "2,5-28,5",
    "output": [
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return f;\n}\n}\n",
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    try {\n        f.createNewFile();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return f;\n}\n}\n",
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return f;\n}\n\n}\n",
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    return f;\n}\n}\n",
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n    return f;\n}\n}\n",
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    return f;\n}\n\n}\n",
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return new File(folder, beginning + \".\" + postfix);\n}\n}\n",
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n    return f;\n}\n\n}\n",
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return new File(folder, beginning + \".\" + postfix);\n}\n\n}\n",
        "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    return new File(folder, beginning + \".\" + postfix);\n}\n}\n"
    ],
    "validation_result": [
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return f;\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    if(!file.exists()){\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return file;\n}"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    try {\n        f.createNewFile();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return f;\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    try {\n        file.createNewFile();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return file;\n}"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return f;\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    if(!file.exists()){\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return file;\n}"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    return f;\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    if(!file.exists()){\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    return file;\n}"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return f;\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    if(!file.exists()){\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return file;\n}"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    return f;\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    if(!file.exists()){\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    return file;\n}"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return new File(folder, beginning + \".\" + postfix);\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    if(!file.exists()){\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return new File(dir, prefix + \".\" + suffix);\n}"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return f;\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    if(!file.exists()){\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return file;\n}"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return new File(folder, beginning + \".\" + postfix);\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    if(!file.exists()){\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return new File(dir, prefix + \".\" + suffix);\n}"
        },
        {
            "patch": "static public File apportionFile(File folder, String titile) {\n    int m = titile.indexOf('?');\n    titile = m > 0? titile.substring(0, m):titile;\n    int point = titile.indexOf('.');\n    String beginning;\n    String postfix;\n    if(point >= 0){\n        beginning  =  titile.substring(0, point);\n        postfix = titile.substring(point);\n    }else{\n        beginning = titile;\n        postfix = \"\";\n    }\n    File f = new File(folder, titile);\n    if(!f.exists()){\n        try {\n            f.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    return new File(folder, beginning + \".\" + postfix);\n}",
            "correctness": "compile_success",
            "translated": "static public File allocateFile(File dir, String name) {\n    int q = name.indexOf('?');\n    name = q > 0? name.substring(0, q):name;\n    int dot = name.indexOf('.');\n    String prefix;\n    String suffix;\n    if(dot >= 0){\n        prefix  =  name.substring(0, dot);\n        suffix = name.substring(dot);\n    }else{\n        prefix = name;\n        suffix = \"\";\n    }\n    File file = new File(dir, name);\n    if(!file.exists()){\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    return new File(dir, prefix + \".\" + suffix);\n}"
        }
    ]
}