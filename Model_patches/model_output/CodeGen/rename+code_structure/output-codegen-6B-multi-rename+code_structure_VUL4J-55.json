{
    "output": [
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n}\n\npublic Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n}\n\n}\n",
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                    break EXTERIOR;\n                }\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n}\n\npublic Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                    break EXTERIOR;\n                }\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n}\n\n}\n",
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundHalfUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundHalfUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar",
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundHalfUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundHalfUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(cal",
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundHalfUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundHalfUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar",
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundHalfUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 1);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundHalfUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar",
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundHalfUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -1);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundHalfUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(cal",
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundHalfUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 1);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundHalfUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar",
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundHalfUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundHalfUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(cal",
        "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundDown(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, -2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) >= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundDown(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, -1);\n    }\n    return calendar;\n  }\n\n  public Calendar roundHalfUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) > 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundHalfUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar"
    ],
    "validation_result": [
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n}",
            "correctness": "compile_success",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                }\n                break OUTER;\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                    break EXTERIOR;\n                }\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n}",
            "correctness": "test_timeout",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                    break OUTER;\n                }\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }",
            "correctness": "compile_success",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                }\n                break OUTER;\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }",
            "correctness": "compile_success",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                }\n                break OUTER;\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }",
            "correctness": "compile_success",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                }\n                break OUTER;\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }",
            "correctness": "compile_success",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                }\n                break OUTER;\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }",
            "correctness": "compile_success",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                }\n                break OUTER;\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }",
            "correctness": "compile_success",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                }\n                break OUTER;\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }",
            "correctness": "compile_success",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                }\n                break OUTER;\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        },
        {
            "patch": "public Calendar roundUp(Calendar calendar) {\n    Calendar futurityTwoYears = (Calendar) calendar.clone();\n    futurityTwoYears.add(Calendar.YEAR, 2);\n    EXTERIOR:\n    while (true) {\n        if (calendar.compareTo(futurityTwoYears) <= 0) {\n            int i =0;\n            while (i< CalendarAttribute.ADJUST_ORDER.length) {\n                CalendarAttribute a = CalendarAttribute.ADJUST_ORDER[i++];\n                int now = a.valueOf(calendar);\n                int following = a.roundUp(this,now);\n                if (now==following)  continue;   \n\n                CalendarAttribute b=a.lowerAttribute;\n                while (b!=null){\n                    b.empty(calendar);\n                    b=b.lowerAttribute;\n                }\n\n                if (following>=0) {\n                    a.changeTO(calendar,following);\n                }\n                break EXTERIOR;\n            }\n        }\n        calendar.add(Calendar.YEAR, 1);\n    }\n    return calendar;\n  }",
            "correctness": "compile_success",
            "translated": "public Calendar ceil(Calendar cal) {\n    Calendar twoYearsFuture = (Calendar) cal.clone();\n    twoYearsFuture.add(Calendar.YEAR, 2);\n    OUTER:\n    while (true) {\n        if (cal.compareTo(twoYearsFuture) <= 0) {\n            int i =0;\n            while (i< CalendarField.ADJUST_ORDER.length) {\n                CalendarField f = CalendarField.ADJUST_ORDER[i++];\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   \n\n                CalendarField l=f.lowerField;\n                while (l!=null){\n                    l.clear(cal);\n                    l=l.lowerField;\n                }\n\n                if (next>=0) {\n                    f.setTo(cal,next);\n                }\n                break OUTER;\n            }\n        }\n        cal.add(Calendar.YEAR, 1);\n    }\n    return cal;\n}"
        }
    ]
}