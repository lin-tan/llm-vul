{
    "output": [
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           administeredRecords.readEntry(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       }\n   }\n}\n",
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       }\n   }\n}\n",
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       }\n   }\n}\n",
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       }\n   }\n}\n",
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }\n}\n",
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }\n\n   @Override\n   public void acquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, itemNumber, false);\n   }\n\n   @Override\n   public void acquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber, boolean reliable) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, itemNumber, reliable);\n   }\n}\n",
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }\n\n   @Override\n   public void acquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, itemNumber, false);\n   }\n\n   @Override\n   public void acquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber, boolean reliable) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, itemNumber, reliable);\n   }\n\n}\n",
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }\n\n   @Override\n   public void acquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, itemNumber, false);\n   }\n\n   @Override\n   public void acquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                        boolean reliable) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, itemNumber, reliable);\n   }\n}\n",
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }\n\n   @Override\n   public void acquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, itemNumber, false);\n   }\n\n   @Override\n   public void acquireNewsThroughNumberReliable(AsyncResponse asyncReply, long recordsNumber, long itemNumber) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, itemNumber, true);\n   }\n}\n",
        "   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }\n\n   @Override\n   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, itemNumber, false);\n   }\n\n   @Override\n   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber) {\n       innerAcquireNewsThroughNumber(asyncReply, recordsNumber, 0, false);\n   }\n\n   @Override\n   protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply) {\n       innerAcquireNewsThroughNumber(asyncReply, 0, 0, false);\n   }\n}\n"
    ],
    "validation_result": [
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           administeredRecords.readEntry(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           administeredRecords.readEntry(positionImpl, readEntryCallback);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }"
        },
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           topic.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }"
        },
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           topic.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }"
        },
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           topic.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       }\n   }"
        },
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           topic.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } finally {\n           if (topicName.isGlobal()) {\n               namespaceName.release();\n           }\n       }\n   }"
        },
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           topic.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } finally {\n           if (topicName.isGlobal()) {\n               namespaceName.release();\n           }\n       }\n   }"
        },
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           topic.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } finally {\n           if (topicName.isGlobal()) {\n               namespaceName.release();\n           }\n       }\n   }"
        },
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           topic.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } finally {\n           if (topicName.isGlobal()) {\n               namespaceName.release();\n           }\n       }\n   }"
        },
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           topic.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } finally {\n           if (topicName.isGlobal()) {\n               namespaceName.release();\n           }\n       }\n   }"
        },
        {
            "patch": "protected void innerAcquireNewsThroughNumber(AsyncResponse asyncReply, long recordsNumber, long itemNumber,\n                                             boolean reliable) {\n       try {\n           confirmSubjectPossession(subjectTitle, reliable);\n           confirmSubjectAction(subjectTitle, SubjectAction.PEEK_MESSAGES);\n           if (subjectTitle.whetherUniversal()) {\n               confirmUniversalTitleScopePossession(titleScopeTitle);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void retrieveItemFinish(Item item, Object obj) {\n                   try {\n                       Response response = produceReplyWithItem(item);\n                       asyncReply.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncReply.resume(restException);\n                   } finally {\n                       if (item == null) {\n                           return;\n                       }else{\n                           item.free();\n                       }\n                   }\n               }\n               @Override\n               public void retrieveItemUnsuccess(AdministeredRecordsException exception, Object obj) {\n                   RestException restException =  new RestException(exception);\n                   asyncReply.resume(restException);\n               }\n           };\n           PlaceImpl positionImpl = new PlaceImpl(recordsNumber, itemNumber);\n           subject.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (AdministeredRecordsException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncReply.resume(restException);\n       } finally {\n           if (subjectTitle.whetherUniversal()) {\n               titleScopeTitle.free();\n           }\n       }\n   }",
            "correctness": "uncompilable",
            "translated": "protected void internalGetMessageById(AsyncResponse asyncResponse, long ledgerId, long entryId,\n                                             boolean authoritative) {\n       try {\n           validateTopicOwnership(topicName, authoritative);\n           validateTopicOperation(topicName, TopicOperation.PEEK_MESSAGES);\n           if (topicName.isGlobal()) {\n               validateGlobalNamespaceOwnership(namespaceName);\n           }\n           AsyncCallbacks.ReadEntryCallback readEntryCallback = new AsyncCallbacks.ReadEntryCallback() {\n               @Override\n               public void readEntryComplete(Entry entry, Object ctx) {\n                   try {\n                       Response response = generateResponseWithEntry(entry);\n                       asyncResponse.resume(response);\n                   } catch (IOException exception) {\n                       RestException restException =  new RestException(exception);\n                       asyncResponse.resume(restException);\n                   } finally {\n                       if (entry == null) {\n                           return;\n                       }else{\n                           entry.release();\n                       }\n                   }\n               }\n               @Override\n               public void readEntryFailed(ManagedLedgerException exception, Object ctx) {\n                   RestException restException =  new RestException(exception);\n                   asyncResponse.resume(restException);\n               }\n           };\n           PositionImpl positionImpl = new PositionImpl(ledgerId, entryId);\n           topic.acquireNewsThroughNumber(positionImpl, readEntryCallback);\n       } catch (ManagedLedgerException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } catch (IOException exception) {\n           RestException restException =  new RestException(exception);\n           asyncResponse.resume(restException);\n       } finally {\n           if (topicName.isGlobal()) {\n               namespaceName.release();\n           }\n       }\n   }"
        }
    ]
}