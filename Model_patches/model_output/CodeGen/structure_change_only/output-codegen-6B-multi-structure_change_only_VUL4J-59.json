{
    "function range": "2,8-54,9",
    "output": [
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n }\n\n private void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n }\n\n private void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             t.transition(AttributeValue_singleQuoted);\n             ",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\"':\n             t.transition(AfterAttributeValue_quoted);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             break;\n     }\n}\n\nvoid AttributeValue_singleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\\'':\n             t.transition(AfterAttributeValue_quoted);\n             break;\n         case -1:\n             t",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\"':\n             t.transition(AfterAttributeValue_quoted);\n             break;\n         case '\\0':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             break;\n     }\n}\n\nvoid AttributeValue_singleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\"':\n             t.transition(AfterAttributeValue_quoted);\n             break;\n         case -1:\n             t.eofError(this);\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         default:\n             break;\n     }\n}\n\nvoid AttributeValue_singleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\"':\n             t.transition(AfterAttributeValue_quoted);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         default:\n             break;\n     }\n}\n\nvoid AttributeValue_singleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\"':\n             t.transition(AfterAttributeValue_quoted);\n             break;\n         case -1:\n             t.eofError(this);\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         default:\n             break;\n     }\n}\n\nvoid AttributeValue_singleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\\'':\n             t.transition(AfterAttributeValue_quoted);\n             break",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\"':\n             t.transition(AfterAttributeValue_quoted);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             break;\n     }\n}\n\nvoid AttributeValue_singleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\\''",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\"':\n             t.transition(AfterAttributeValue_quoted);\n             break;\n         case '\\0':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             break;\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, StringReader r) {\n     char c = r.consume();\n     switch (c",
        "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     switch (c) {\n         case '\"':\n             t.transition(AfterAttributeValue_quoted);\n             break;\n         case -1:\n             t.eofError(this);\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         default:\n             break;\n     }\n}\n\nvoid AttributeValue_doubleQuoted::read(Tokeniser t, StringReader r) {\n     char c"
    ],
    "validation_result": [
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n }",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n }",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n     if(c== eof){\n         t.eofError(this);\n         t.transition(Data);\n         return;\n     }\n     switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case'':\n             t.transition(BeforeAttributeName);\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n         case '\"':\n             r.unconsume();\n             t.transition(AttributeValue_doubleQuoted);\n             break;\n         case '\\'':\n             r.unconsume();\n             t.transition(AttributeValue_singleQuoted);\n             break;\n         case '=':\n             t.transition(BeforeAttributeValue);\n             break;\n         case '<':\n             t.reset();\n             t.transition(Data);\n             break;\n         case '\\u0000':\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n             break;\n         case -1:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n         default:\n             t.error(this);\n             r.unconsume();\n             t.transition(Data);\n     }\n}",
            "correctness": "uncompilable"
        }
    ]
}