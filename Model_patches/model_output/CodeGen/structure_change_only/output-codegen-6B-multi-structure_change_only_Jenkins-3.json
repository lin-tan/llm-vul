{
    "output": [
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/jenkins/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getRootPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     ",
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views; \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/jenkins/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getRootPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     * <",
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/jenkins/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getRootPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     ",
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return viewGroupMixIn.getViews(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/jenkins/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getRootPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".",
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getRootPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n",
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/jenkins/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getContextPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     ",
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/jenkins/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getRootPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page,\n     * such as \"http://localhost/hudson/\".\n     ",
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views; \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getRootPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     *",
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getRootPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n",
        "    @Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }\n\n    public String getUrlChildPrefix() {\n        return \"job\";\n    }\n\n    /**\n     * Gets the absolute URL of Jenkins,\n     * such as \"http://localhost/jenkins/\".\n     *\n     * <p>\n     * This method first tries to use the manually configured value, then\n     * fall back to {@link StaplerRequest#getRootPath()}.\n     * It is done in this order so that it can work correctly even in the face\n     * of a reverse proxy.\n     *\n     * @return\n     *      This method returns null if this parameter is not configured by the user.\n     *      The caller must gracefully deal with this situation.\n     *      The returned URL will always have the trailing '/'.\n     * @since 1.66\n     * @see Descriptor#getCheckUrl(String)\n     * @see #getRootUrlFromRequest()\n     */\n    public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n    \n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *"
    ],
    "validation_result": [
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views; \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return viewGroupMixIn.getViews(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "test_success"
        },
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views; \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Override\n    public SearchIndexBuilder makeSearchIndex() {\n        SearchIndexBuilder searchIndexBuilder = super.makeSearchIndex();\n        searchIndexBuilder.add(getPrimaryView().makeSearchIndex());\n\n        CollectionSearchIndex<TopLevelItem> collectionSearchIndexItem=new CollectionSearchIndex<TopLevelItem>() {\n                protected SearchItem get(String key) { \n                    return getItemByFullName(key, TopLevelItem.class); \n                }\n                protected Collection<TopLevelItem> all() { \n                    return getAllItems(TopLevelItem.class); \n                }\n        };\n\n\n        CollectionSearchIndex collectionSearchIndexComputer = new CollectionSearchIndex() {\n                protected Collection<Computer> all() { \n                    return computers.values(); \n                }\n                protected Computer get(String key) { \n                    return getComputer(key); \n                }\n\n        };\n\n\n        searchIndexBuilder.add(collectionSearchIndexItem);\n        searchIndexBuilder.add(\"configure\", \"config\",\"configure\");\n\n        searchIndexBuilder.add(collectionSearchIndexComputer); \n\n        searchIndexBuilder.add(\"log\");\n        searchIndexBuilder.add(\"manage\");\n\n\n         CollectionSearchIndex collectionSearchIndexView = new CollectionSearchIndex() {\n                protected Collection<View> all() { \n                    return views.values(); \n                }\n                protected View get(String key) { \n                    return getView(key); \n                }\n        };\n\n        searchIndexBuilder.add(collectionSearchIndexView);\n\n        return searchIndexBuilder;\n    }",
            "correctness": "uncompilable"
        }
    ]
}