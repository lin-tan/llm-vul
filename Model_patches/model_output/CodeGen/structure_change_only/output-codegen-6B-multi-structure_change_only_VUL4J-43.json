{
    "function range": "2,2-19,2",
    "output": [
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in, out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tIOUtils.closeQuietly(out);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tIOUtils.closeQuietly(in);\n\t\t}\n\t}\n}\n}\n",
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in, out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tin.close();\n\t\t}\n\t}\n}\n\n}\n",
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in, out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tin.close();\n\t\t}\n\t}\n}\n}\n",
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in,out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tIOUtils.closeQuietly(out);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tIOUtils.closeQuietly(in);\n\t\t}\n\t}\n}\n}\n",
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in,out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tin.close();\n\t\t}\n\t}\n}\n\n}\n",
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in,out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tin.close();\n\t\t}\n\t}\n}\n}\n",
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\tOutputStream out = new FileOutputStream(outFile);\n\t\tbyte[] buf = new byte[1024];\n\t\tint len;\n\t\twhile ((len = in.read(buf)) > 0)\n\t\t{\n\t\t\tout.write(buf, 0, len);\n\t\t}\n\t\tin.close();\n\t\tout.close();\n\t}\n}\n}\n",
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\toutFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry {\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry {\n\t\t\tIOUtils.copy(in, out);\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(in);\n\t\t}\n\t} finally {\n\t\tIOUtils.closeQuietly(out);\n\t}\n}\n\n}\n",
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\toutFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry {\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry {\n\t\t\tIOUtils.copy(in, out);\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(in);\n\t\t}\n\t} finally {\n\t\tIOUtils.closeQuietly(out);\n\t}\n}\n}\n",
        "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\toutFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry {\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry {\n\t\t\tIOUtils.copy(in, out);\n\t\t} finally {\n\t\t\tin.close();\n\t\t}\n\t} finally {\n\t\tout.close();\n\t}\n}\n\n}\n"
    ],
    "validation_result": [
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in, out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tIOUtils.closeQuietly(out);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tIOUtils.closeQuietly(in);\n\t\t}\n\t}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in, out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tin.close();\n\t\t}\n\t}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in, out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tin.close();\n\t\t}\n\t}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in,out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tIOUtils.closeQuietly(out);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tIOUtils.closeQuietly(in);\n\t\t}\n\t}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in,out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tin.close();\n\t\t}\n\t}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry\n\t\t{\n\t\t\tOutputStream out = new FileOutputStream(outFile);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tIOUtils.copy(in,out);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tin.close();\n\t\t}\n\t}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\tif (entry.isDirectory())\n\t{\n\t\tif (!outFile.exists())\n\t\t{\n\t\t\toutFile.mkdirs();\n\t\t}\n\t}\n\telse\n\t{\n\t\tFile parentDir = outFile.getParentFile();\n\t\tif (!parentDir.exists())\n\t\t{\n\t\t\tparentDir.mkdirs();\n\t\t}\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\tOutputStream out = new FileOutputStream(outFile);\n\t\tbyte[] buf = new byte[1024];\n\t\tint len;\n\t\twhile ((len = in.read(buf)) > 0)\n\t\t{\n\t\t\tout.write(buf, 0, len);\n\t\t}\n\t\tin.close();\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\toutFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry {\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry {\n\t\t\tIOUtils.copy(in, out);\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(in);\n\t\t}\n\t} finally {\n\t\tIOUtils.closeQuietly(out);\n\t}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\toutFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry {\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry {\n\t\t\tIOUtils.copy(in, out);\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(in);\n\t\t}\n\t} finally {\n\t\tIOUtils.closeQuietly(out);\n\t}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tString entryName = entry.getName();\n\tFile outFile = new File(destDir,entryName);\n\toutFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry {\n\t\tInputStream in = zipFile.getInputStream(entry);\n\t\ttry {\n\t\t\tIOUtils.copy(in, out);\n\t\t} finally {\n\t\t\tin.close();\n\t\t}\n\t} finally {\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable"
        }
    ]
}