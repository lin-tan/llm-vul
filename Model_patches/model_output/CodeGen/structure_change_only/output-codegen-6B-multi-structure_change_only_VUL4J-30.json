{
    "function range": "3,5-17,5",
    "output": [
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage());\n        }\n    }\n  }\n}\n",
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage());\n        }\n    }\n  }\n\n}\n",
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(getErrorMessage(fieldName, value));\n        }\n    }\n  }\n}\n",
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(getErrorMessage(fieldName, value));\n        }\n    }\n  }\n\n}\n",
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage(fieldName, value));\n        }\n    }\n  }\n}\n",
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this, object, fieldName, value);\n        }\n    }\n  }\n}\n",
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage(fieldName, value));\n        }\n    }\n  }\n\n}\n",
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(getErrorMessage(fieldName, value));\n        }\n    }\n  }\n\n  public String getUrlRegex() {\n    return urlRegex;\n  }\n\n  public void setUrlRegex(String urlRegex) {\n    this.urlRegex = urlRegex;\n  }\n}\n",
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(getErrorMessage(fieldName, value));\n        }\n    }\n  }\n\n  public String getUrlRegex() {\n    return urlRegex;\n  }\n\n  public void setUrlRegex(String regex) {\n    this.urlRegex = regex;\n  }\n}\n",
        "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage(fieldName, value));\n        }\n    }\n  }\n\n  public String getUrlRegex() {\n    return urlRegex;\n  }\n\n  public void setUrlRegex(String regex) {\n    this.urlRegex = regex;\n  }\n}\n"
    ],
    "validation_result": [
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage());\n        }\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage());\n        }\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(getErrorMessage(fieldName, value));\n        }\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(getErrorMessage(fieldName, value));\n        }\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage(fieldName, value));\n        }\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this, object, fieldName, value);\n        }\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage(fieldName, value));\n        }\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(getErrorMessage(fieldName, value));\n        }\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(getErrorMessage(fieldName, value));\n        }\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n    if (value!= null && value.toString().length()!= 0) {\n        Class value_class = value.getClass();\n        String urlRegex = getUrlRegex();\n        Pattern p = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(value.toString());\n        if (!m.matches()) {\n            throw new ValidationException(this.getErrorMessage(fieldName, value));\n        }\n    }\n  }",
            "correctness": "uncompilable"
        }
    ]
}