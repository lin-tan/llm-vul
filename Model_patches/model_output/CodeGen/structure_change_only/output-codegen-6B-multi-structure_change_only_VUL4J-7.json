{
    "function range": "2,5-45,5",
    "output": [
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n}\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n}\n\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }\n\n  @Override\n  public void close() throws IOException {\n    in.close();\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }\n\n  @Override\n  public void close() throws IOException {\n    if (in!= null) {\n      in.close();\n    }\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }\n\n  @Override\n  public void close() throws IOException {\n    if (in!= null) {\n      in.close();\n      in = null;\n    }\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }\n\n  @Override\n  public void close() throws IOException {\n    if (in!= null) {\n      in.close();\n      in = null;\n    }\n    if (buf!= null) {\n      buf.clear();\n      buf = null;\n    }\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }\n\n  @Override\n  public int read(final byte[] buffer, final int offset, final int length) throws IOException {\n    return readStored(buffer, offset, length);\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }\n\n  @Override\n  public int read(final byte[] buffer, final int offset, final int length) throws IOException {\n    return readStored(buffer, offset, length);\n  }\n\n  @Override\n  public int read(final byte[] buffer) throws IOException {\n    return readStored(buffer, 0, buffer.length);\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }\n\n  @Override\n  public int read(final byte[] buffer, final int offset, final int length) throws IOException {\n    return readStored(buffer, offset, length);\n  }\n\n  @Override\n  public long skip(final long n) throws IOException {\n    return in.skip(n);\n  }\n\n  @Override\n  public int available() throws IOException {\n    return in.available();\n  }\n\n  @Override\n  public void close() throws IOException {\n    in.close();\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }\n\n  @Override\n  public int read(final byte[] buffer, final int offset, final int length) throws IOException {\n    return readStored(buffer, offset, length);\n  }\n\n  @Override\n  public void close() throws IOException {\n    in.close();\n  }\n}\n"
    ],
    "validation_result": [
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (!current.hasDataDescriptor) {\n        final long csize = current.entry.getSize();\n        if (current.bytesRead < csize) {\n            if (buf.position() >= buf.limit()) {\n                buf.position(0);\n                byte[] bufArray = buf.array();\n                final int l = in.read(bufArray);\n                if (l!= -1) {\n                    buf.limit(l);\n                    count(l);\n                    current.bytesReadFromStream += l;\n                }else{\n                    return -1;\n                }\n            }\n            final int toRead = (int) (csize - current.bytesRead);\n            if (toRead > length) {\n                toRead = length;\n            }\n            System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n            buf.position(buf.position() + toRead);\n            current.bytesRead += toRead;\n            return toRead;\n        }\n    }\n    return in.read(buffer, offset, length);\n  }",
            "correctness": "uncompilable"
        }
    ]
}