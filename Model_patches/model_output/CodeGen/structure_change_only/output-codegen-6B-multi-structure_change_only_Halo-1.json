{
    "function range": "2,5-13,5",
    "output": [
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isReadable(parentPath), \"Parent path is not readable\");\n    Assert.isTrue(Files.isExecutable(parentPath), \"Parent path is not executable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.isWritable(pathToCheck), \"Path to check is not writable\");\n    Assert.isTrue(Files.isReadable(pathToCheck), \"Path to check is not readable\");\n    Assert.isTrue(Files.isExecutable(pathToCheck), \"Path to check is not executable\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isReadable(parentPath), \"Parent path is not readable\");\n    Assert.isTrue(Files.isExecutable(parentPath), \"Parent path is not executable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.exists(pathToCheck), \"Path to check does not exist\");\n    Assert.isTrue(Files.isWritable(pathToCheck), \"Path to check is not writable\");\n    Assert.isTrue(Files.isReadable(pathToCheck), \"Path to check is not readable\");\n    Assert.isTrue(Files.isExecutable(pathToCheck), \"Path to check is not executable\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.exists(pathToCheck), \"Path to check does not exist\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.isWritable(pathToCheck), \"Path to check is not writable\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isReadable(parentPath), \"Parent path is not readable\");\n    Assert.isTrue(Files.isExecutable(parentPath), \"Parent path is not executable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.isWritable(pathToCheck), \"Path to check is not writable\");\n    Assert.isTrue(Files.isReadable(pathToCheck), \"Path to check is not readable\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.exists(pathToCheck), \"Path to check does not exist\");\n    Assert.isTrue(Files.isRegularFile(pathToCheck), \"Path to check is not a regular file\");\n    Assert.isTrue(Files.isDirectory(pathToCheck.getParent()), \"Path to check parent is not a directory\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.exists(pathToCheck), \"Path to check does not exist\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.isSameFile(parentPath, pathToCheck), \"Path to check is not a child of parent path\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isReadable(parentPath), \"Parent path is not readable\");\n    Assert.isTrue(Files.isExecutable(parentPath), \"Parent path is not executable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");"
    ],
    "validation_result": [
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isReadable(parentPath), \"Parent path is not readable\");\n    Assert.isTrue(Files.isExecutable(parentPath), \"Parent path is not executable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.isWritable(pathToCheck), \"Path to check is not writable\");\n    Assert.isTrue(Files.isReadable(pathToCheck), \"Path to check is not readable\");\n    Assert.isTrue(Files.isExecutable(pathToCheck), \"Path to check is not executable\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isReadable(parentPath), \"Parent path is not readable\");\n    Assert.isTrue(Files.isExecutable(parentPath), \"Parent path is not executable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.exists(pathToCheck), \"Path to check does not exist\");\n    Assert.isTrue(Files.isWritable(pathToCheck), \"Path to check is not writable\");\n    Assert.isTrue(Files.isReadable(pathToCheck), \"Path to check is not readable\");\n    Assert.isTrue(Files.isExecutable(pathToCheck), \"Path to check is not executable\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.exists(pathToCheck), \"Path to check does not exist\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.isWritable(pathToCheck), \"Path to check is not writable\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isReadable(parentPath), \"Parent path is not readable\");\n    Assert.isTrue(Files.isExecutable(parentPath), \"Parent path is not executable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.isWritable(pathToCheck), \"Path to check is not writable\");\n    Assert.isTrue(Files.isReadable(pathToCheck), \"Path to check is not readable\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.exists(pathToCheck), \"Path to check does not exist\");\n    Assert.isTrue(Files.isRegularFile(pathToCheck), \"Path to check is not a regular file\");\n    Assert.isTrue(Files.isDirectory(pathToCheck.getParent()), \"Path to check parent is not a directory\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.exists(pathToCheck), \"Path to check does not exist\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n    Assert.isTrue(Files.isSameFile(parentPath, pathToCheck), \"Path to check is not a child of parent path\");\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.isTrue(Files.exists(parentPath), \"Parent path does not exist\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path is not a directory\");\n    Assert.isTrue(Files.isWritable(parentPath), \"Parent path is not writable\");\n    Assert.isTrue(Files.isReadable(parentPath), \"Parent path is not readable\");\n    Assert.isTrue(Files.isExecutable(parentPath), \"Parent path is not executable\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check is not a directory\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "",
            "correctness": "uncompilable"
        }
    ]
}