{
    "output": [
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n}\n\n}\n",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n}\n\n}\n",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n    targetFile.setLastModified( itemTime.getTime() );\n}\n\n}\n",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n}\n\n}\n",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n}\n\n}\n",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true );\n        targetFile.setWritable( true );\n        targetFile.setExecutable( true );\n    }\n    else\n    {\n        targetFile.setReadable( false );\n        targetFile.setWritable( false );\n        targetFile.setExecutable( false );\n    }\n}\n\n}\n",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n        targetFile.setHidden( false );\n    }\n    else\n    {\n        targetFile.setReadable( false, false );\n        targetFile.setWritable( false, false );\n        targetFile.setExecutable( false, false );\n        targetFile.setHidden( true );\n    }\n}\n\n}\n",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n        targetFile.setHidden( false );\n    }\n    else\n    {\n        targetFile.setReadable( false, false );\n        targetFile.setWritable( false, false );\n        targetFile.setExecutable( false, false );\n        targetFile.setHidden( true );\n    }\n    if ( symbolicLinkTargetLocation!= null )\n    {\n        FileUtils.symlink( symbolicLinkTargetLocation, targetFile );\n    }\n}\n\n}\n",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n}\n\n}\n",
        "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n}\n}\n"
    ],
    "validation_result": [
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    if (!f.exists() )\n    {\n        f.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n    targetFile.setLastModified( itemTime.getTime() );\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    if (!f.exists() )\n    {\n        f.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n    f.setLastModified( entryDate.getTime() );\n    if (!isDirectory )\n    {\n        f.setReadable( true, false );\n        f.setWritable( true, false );\n        f.setExecutable( true, false );\n    }\n    else\n    {\n        f.setReadable( true, true );\n        f.setWritable( true, true );\n        f.setExecutable( true, true );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setReadable( true, true );\n    f.setWritable( true, true );\n    f.setExecutable( true, true );\n    f.setLastModified( entryDate.getTime() );\n    f.setReadable( true, true );\n    f.setWritable( true, true );\n    f.setExecutable( true, true );\n    f.setLastModified( entryDate.getTime() );\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    if (!f.exists() )\n    {\n        f.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n    f.setLastModified( entryDate.getTime() );\n    if (!isDirectory )\n    {\n        f.setReadable( true, false );\n        f.setWritable( true, false );\n        f.setExecutable( true, false );\n    }\n    else\n    {\n        f.setReadable( true, true );\n        f.setWritable( true, true );\n        f.setExecutable( true, true );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setReadable( true, true );\n    f.setWritable( true, true );\n    f.setExecutable( true, true );\n    f.setLastModified( entryDate.getTime() );\n    f.setReadable( true, true );\n    f.setWritable( true, true );\n    f.setExecutable( true, true );\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    if (!f.exists() )\n    {\n        f.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n    f.setLastModified( entryDate.getTime() );\n    if (!isDirectory )\n    {\n        f.setReadable( true, false );\n        f.setWritable( true, false );\n        f.setExecutable( true, false );\n    }\n    else\n    {\n        f.setReadable( true, true );\n        f.setWritable( true, true );\n        f.setExecutable( true, true );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setReadable( true, true );\n    f.setWritable( true, true );\n    f.setExecutable( true, true );\n    f.setReadable( true, true );\n    f.setWritable( true, true );\n    f.setExecutable( true, true );\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true );\n        targetFile.setWritable( true );\n        targetFile.setExecutable( true );\n    }\n    else\n    {\n        targetFile.setReadable( false );\n        targetFile.setWritable( false );\n        targetFile.setExecutable( false );\n    }\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    if (!f.exists() )\n    {\n        f.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n    f.setLastModified( entryDate.getTime() );\n    if (!isDirectory )\n    {\n        f.setReadable( true );\n        f.setWritable( true );\n        f.setExecutable( true );\n    }\n    else\n    {\n        f.setReadable( false );\n        f.setWritable( false );\n        f.setExecutable( false );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n        targetFile.setHidden( false );\n    }\n    else\n    {\n        targetFile.setReadable( false, false );\n        targetFile.setWritable( false, false );\n        targetFile.setExecutable( false, false );\n        targetFile.setHidden( true );\n    }\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    if (!f.exists() )\n    {\n        f.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n    f.setLastModified( entryDate.getTime() );\n    if (!isDirectory )\n    {\n        f.setReadable( true, false );\n        f.setWritable( true, false );\n        f.setExecutable( true, false );\n        f.setHidden( false );\n    }\n    else\n    {\n        f.setReadable( false, false );\n        f.setWritable( false, false );\n        f.setExecutable( false, false );\n        f.setHidden( true );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n        targetFile.setHidden( false );\n    }\n    else\n    {\n        targetFile.setReadable( false, false );\n        targetFile.setWritable( false, false );\n        targetFile.setExecutable( false, false );\n        targetFile.setHidden( true );\n    }\n    if ( symbolicLinkTargetLocation!= null )\n    {\n        FileUtils.symlink( symbolicLinkTargetLocation, targetFile );\n    }\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    if (!f.exists() )\n    {\n        f.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n    f.setLastModified( entryDate.getTime() );\n    if (!isDirectory )\n    {\n        f.setReadable( true, false );\n        f.setWritable( true, false );\n        f.setExecutable( true, false );\n        f.setHidden( false );\n    }\n    else\n    {\n        f.setReadable( false, false );\n        f.setWritable( false, false );\n        f.setExecutable( false, false );\n        f.setHidden( true );\n    }\n    if ( symlinkDestination!= null )\n    {\n        FileUtils.symlink( symlinkDestination, f );\n    }\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    if (!f.exists() )\n    {\n        f.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n    f.setLastModified( entryDate.getTime() );\n    if (!isDirectory )\n    {\n        f.setReadable( true, false );\n        f.setWritable( true, false );\n        f.setExecutable( true, false );\n    }\n    else\n    {\n        f.setReadable( true, true );\n        f.setWritable( true, true );\n        f.setExecutable( true, true );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setReadable( true, true );\n    f.setWritable( true, true );\n    f.setExecutable( true, true );\n}"
        },
        {
            "patch": "protected void takeOutDataFile( final File originFile, final File folder, final InputStream compressedInDataSequence,\n                            final String itemTitle, final Date itemTime, final boolean whetherFolder,\n                            final Integer setting, String symbolicLinkTargetLocation )\n    throws IOException, DocumentorException\n{\n    final File targetFile = FileUtils.resolveFile( folder, itemTitle );\n    if (!targetFile.getParentFile().exists() )\n    {\n        targetFile.getParentFile().mkdirs();\n    }\n    if (!targetFile.exists() )\n    {\n        targetFile.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInDataSequence, targetFile );\n    targetFile.setLastModified( itemTime.getTime() );\n    if (!whetherFolder )\n    {\n        targetFile.setReadable( true, false );\n        targetFile.setWritable( true, false );\n        targetFile.setExecutable( true, false );\n    }\n    else\n    {\n        targetFile.setReadable( true, true );\n        targetFile.setWritable( true, true );\n        targetFile.setExecutable( true, true );\n    }\n    targetFile.setLastModified( itemTime.getTime() );\n    targetFile.setReadable( true, true );\n    targetFile.setWritable( true, true );\n    targetFile.setExecutable( true, true );\n}",
            "correctness": "uncompilable",
            "translated": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n    if (!f.exists() )\n    {\n        f.createNewFile();\n    }\n    FileUtils.copyInputStreamToFile( compressedInputStream, f );\n    f.setLastModified( entryDate.getTime() );\n    if (!isDirectory )\n    {\n        f.setReadable( true, false );\n        f.setWritable( true, false );\n        f.setExecutable( true, false );\n    }\n    else\n    {\n        f.setReadable( true, true );\n        f.setWritable( true, true );\n        f.setExecutable( true, true );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setReadable( true, true );\n    f.setWritable( true, true );\n    f.setExecutable( true, true );\n}"
        }
    ]
}