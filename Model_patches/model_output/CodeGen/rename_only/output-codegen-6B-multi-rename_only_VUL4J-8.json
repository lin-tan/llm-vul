{
    "output": [
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    result.flip();\n    return result;\n}\n}\n",
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            break;\n        }\n    }\n    result.flip();\n    return result;\n}\n}\n",
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    result.flip();\n    return result;\n}\n}\n",
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    return result;\n}\n}\n",
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            result = encodeEntirely(charEncoder, charBuffer.get(), result);\n        }\n    }\n    result.flip();\n    return result;\n}\n}\n",
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    result.flip();\n    return result;\n}\n\n}\n",
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    return result;\n}\n\n}\n",
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n        }\n    }\n    result.flip();\n    return result;\n}\n}\n",
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n        }\n    }\n    return result;\n}\n}\n",
        "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    if (cb_temp!= null) {\n        cb_temp.clear();\n    }\n    result.flip();\n    return result;\n}\n}\n"
    ],
    "validation_result": [
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    result.flip();\n    return result;\n}",
            "correctness": "compile_success",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        }\n    }\n    out.flip();\n    return out;\n}"
        },
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            break;\n        }\n    }\n    result.flip();\n    return result;\n}",
            "correctness": "compile_success",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else {\n            break;\n        }\n    }\n    out.flip();\n    return out;\n}"
        },
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    result.flip();\n    return result;\n}",
            "correctness": "compile_success",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else {\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        }\n    }\n    out.flip();\n    return out;\n}"
        },
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    return result;\n}",
            "correctness": "compile_success",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else {\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        }\n    }\n    return out;\n}"
        },
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            result = encodeEntirely(charEncoder, charBuffer.get(), result);\n        }\n    }\n    result.flip();\n    return result;\n}",
            "correctness": "uncompilable",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else {\n            out = encodeFully(enc, cb.get(), out);\n        }\n    }\n    out.flip();\n    return out;\n}"
        },
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    result.flip();\n    return result;\n}",
            "correctness": "compile_success",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else {\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        }\n    }\n    out.flip();\n    return out;\n}"
        },
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    return result;\n}",
            "correctness": "compile_success",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else {\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        }\n    }\n    return out;\n}"
        },
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n        }\n    }\n    result.flip();\n    return result;\n}",
            "correctness": "compile_success",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else {\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n        }\n    }\n    out.flip();\n    return out;\n}"
        },
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n        }\n    }\n    return result;\n}",
            "correctness": "compile_success",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else {\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n        }\n    }\n    return out;\n}"
        },
        {
            "patch": "@Override\npublic ByteBuffer encode(final String tile) {\n    final CharsetEncoder charEncoder = newEncoder();\n    final CharBuffer charBuffer = CharBuffer.wrap(tile);\n    CharBuffer cb_temp = null;\n    ByteBuffer result = ByteBuffer.allocate(approximateOriginalBufferSize(charEncoder, charBuffer.remaining()));\n    while (charBuffer.remaining() > 0) {\n        final CoderResult outcome = charEncoder.encode(charBuffer, result, false);\n        if (outcome.isUnmappable() || outcome.isMalformed()) {\n            int roomForSubstitute = approximateAdditionalEncodeingSize(charEncoder, 6 * outcome.length());\n            if (roomForSubstitute > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else if (outcome.isOverflow()) {\n            int increase = approximateAdditionalEncodeingSize(charEncoder, charBuffer.remaining());\n            if (increase > result.remaining()) {\n                int charAmount = 0;\n                for (int j = charBuffer.position() ; j < charBuffer.limit(); j++) {\n                    charAmount +=!charEncoder.ableToEncode(charBuffer.get(j))? 6 : 1;\n                }\n                int sumSupernumeraryInfinite = approximateAdditionalEncodeingSize(charEncoder, charAmount);\n                result = CompressedFileEncodingAssistant.enlargeBufferWith(result, sumSupernumeraryInfinite - result.remaining());\n            }\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        } else {\n            if (cb_temp == null) {\n                cb_temp = CharBuffer.allocate(6);\n            }\n            for (int j = 0; j < outcome.length(); ++j) {\n                result = encodeEntirely(charEncoder, encodeSubstitute(cb_temp, charBuffer.get()), result);\n            }\n        }\n    }\n    if (cb_temp!= null) {\n        cb_temp.clear();\n    }\n    result.flip();\n    return result;\n}",
            "correctness": "compile_success",
            "translated": "@Override\npublic ByteBuffer encode(final String name) {\n    final CharsetEncoder enc = newEncoder();\n    final CharBuffer cb = CharBuffer.wrap(name);\n    CharBuffer tmp = null;\n    ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n    while (cb.remaining() > 0) {\n        final CoderResult res = enc.encode(cb, out, false);\n        if (res.isUnmappable() || res.isMalformed()) {\n            int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n            if (spaceForSurrogate > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else if (res.isOverflow()) {\n            int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n            if (increment > out.remaining()) {\n                int charCount = 0;\n                for (int i = cb.position() ; i < cb.limit(); i++) {\n                    charCount +=!enc.canEncode(cb.get(i))? 6 : 1;\n                }\n                int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n            }\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        } else {\n            if (tmp == null) {\n                tmp = CharBuffer.allocate(6);\n            }\n            for (int i = 0; i < res.length(); ++i) {\n                out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n            }\n        }\n    }\n    if (tmp!= null) {\n        tmp.clear();\n    }\n    out.flip();\n    return out;\n}"
        }
    ]
}