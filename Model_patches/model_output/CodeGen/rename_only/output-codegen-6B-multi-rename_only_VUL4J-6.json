{
    "function range": "2,1-16,1",
    "output": [
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64Size = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64Offset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64LocalHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64RelativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n    this.zip64HeaderOffset = ZipEightByteInteger.acquireContent(information, beginning +",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64ExtendedInformationSize = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64ExtendedInformationOffset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64DataSize = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64DataOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n    this.zip64LocalHeaderOffset = ZipEightByteInteger.acquireContent(",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64Size = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64Offset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64DataSize = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64DataOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n}\n}\n",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64Size = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64Offset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64LocalHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64RelativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n    this.zip64CentralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64ExtendedInformationSize = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64ExtendedInformationOffset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64DataSize = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64DataOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n    this.endOfCentralDirOffset = ZipEightByteInteger.acquireContent(",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64ExtendedInformationSize = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64ExtendedInformationOffset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64EndOfCentralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64EndOfCentralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n    this.zip64EndOfCentralDirectoryDiskNumber =",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64ExtendedInformationSize = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64ExtendedInformationOffset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64EndOfCentralDirSize = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64EndOfCentralDirOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n    this.zip64EndOfCentralDirLocator =",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64ExtendedInformationSize = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64ExtendedInformationOffset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64EndOfCentralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64EndOfCentralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n    this.endOfCentralDirectorySize = ZipEightByte",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64ExtendedInformationSize = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64ExtendedInformationOffset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64EndOfCentralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64EndOfCentralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n    this.zip64EndOfCentralDirectoryLocator =",
        "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64ExtendedInformationSize = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64ExtendedInformationOffset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64EndOfCentralDirSize = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64EndOfCentralDirOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n    this.zip64CentralDirSize = ZipEightByte"
    ],
    "validation_result": [
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "public void analyzeCentralDirectoryScheme(final byte[] information, final int beginning, final int duration) {\n    this.formatting = ZipTwoByteInteger.acquireContent(information, beginning);\n    this.Idaho = EncodingAlgorithm.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 2));\n    this.bitlen = ZipTwoByteInteger.acquireContent(information, beginning + 4);\n    this.flag = ZipTwoByteInteger.acquireContent(information, beginning + 6);\n    this.rcount = ZipFourByteInteger.acquireContent(information, beginning + 8);\n    if (rcount > 0) {\n        this.hashish = AlgorithmForHash.acquireAlgorithmThroughCode(ZipTwoByteInteger.acquireContent(information, beginning + 12));\n        this.hashishSizing = ZipTwoByteInteger.acquireContent(information, beginning + 14);\n    } else {\n        this.hashish = null;\n        this.hashishSizing = null;\n    }\n    this.crc = ZipEightByteInteger.acquireContent(information, beginning + 16);\n    this.compressedSize = ZipEightByteInteger.acquireContent(information, beginning + 24);\n    this.uncompressedSize = ZipEightByteInteger.acquireContent(information, beginning + 32);\n    this.fileNameLength = ZipTwoByteInteger.acquireContent(information, beginning + 40);\n    this.extraFieldLength = ZipTwoByteInteger.acquireContent(information, beginning + 42);\n    this.fileCommentLength = ZipTwoByteInteger.acquireContent(information, beginning + 44);\n    this.diskNumberStart = ZipTwoByteInteger.acquireContent(information, beginning + 46);\n    this.internalFileAttributes = ZipTwoByteInteger.acquireContent(information, beginning + 48);\n    this.externalFileAttributes = ZipFourByteInteger.acquireContent(information, beginning + 50);\n    this.localHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.acquireContent(information, beginning + 62);\n    this.headerOffset = ZipEightByteInteger.acquireContent(information, beginning + 70);\n    this.dataOffset = ZipEightByteInteger.acquireContent(information, beginning + 78);\n    this.dataSize = ZipEightByteInteger.acquireContent(information, beginning + 86);\n    this.centralDirectorySize = ZipEightByteInteger.acquireContent(information, beginning + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.acquireContent(information, beginning + 102);\n    this.zip64Size = ZipEightByteInteger.acquireContent(information, beginning + 110);\n    this.zip64Offset = ZipEightByteInteger.acquireContent(information, beginning + 118);\n    this.zip64DataSize = ZipEightByteInteger.acquireContent(information, beginning + 126);\n    this.zip64DataOffset = ZipEightByteInteger.acquireContent(information, beginning + 134);\n}",
            "correctness": "uncompilable",
            "translated": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n    } else {\n        this.hashAlg = null;\n        this.hashSize = null;\n    }\n    this.crc = ZipEightByteInteger.getValue(data, offset + 16);\n    this.compressedSize = ZipEightByteInteger.getValue(data, offset + 24);\n    this.uncompressedSize = ZipEightByteInteger.getValue(data, offset + 32);\n    this.fileNameLength = ZipShort.getValue(data, offset + 40);\n    this.extraFieldLength = ZipShort.getValue(data, offset + 42);\n    this.fileCommentLength = ZipShort.getValue(data, offset + 44);\n    this.diskNumberStart = ZipShort.getValue(data, offset + 46);\n    this.internalFileAttributes = ZipShort.getValue(data, offset + 48);\n    this.externalFileAttributes = ZipLong.getValue(data, offset + 50);\n    this.localHeaderOffset = ZipEightByteInteger.getValue(data, offset + 54);\n    this.relativeHeaderOffset = ZipEightByteInteger.getValue(data, offset + 62);\n    this.headerOffset = ZipEightByteInteger.getValue(data, offset + 70);\n    this.dataOffset = ZipEightByteInteger.getValue(data, offset + 78);\n    this.dataSize = ZipEightByteInteger.getValue(data, offset + 86);\n    this.centralDirectorySize = ZipEightByteInteger.getValue(data, offset + 94);\n    this.centralDirectoryOffset = ZipEightByteInteger.getValue(data, offset + 102);\n    this.zip64Size = ZipEightByteInteger.getValue(data, offset + 110);\n    this.zip64Offset = ZipEightByteInteger.getValue(data, offset + 118);\n    this.zip64DataSize = ZipEightByteInteger.getValue(data, offset + 126);\n    this.zip64DataOffset = ZipEightByteInteger.getValue(data, offset + 134);\n}"
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        },
        {
            "patch": "",
            "correctness": "uncompilable",
            "translated": ""
        }
    ]
}