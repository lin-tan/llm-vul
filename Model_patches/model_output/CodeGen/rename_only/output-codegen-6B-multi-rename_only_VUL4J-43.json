{
    "output": [
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\toutputFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\toutputFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}\n\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}\n\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}\n\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}\n\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tIOUtils.closeQuietly(out);\n\t}\n}\n}\n",
        "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.flush();\n\t\tout.close();\n\t}\n}\n}\n"
    ],
    "validation_result": [
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\toutputFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\toutFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\toutputFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\toutFile.getParentFile().mkdirs();\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream fos = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(fos);\n\t}\n\tfinally\n\t{\n\t\tfos.flush();\n\t\tfos.close();\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tIOUtils.closeQuietly(out);\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tIOUtils.closeQuietly(out);\n\t}\n}"
        },
        {
            "patch": "public static void saveItem(ZipFile compressedFile, ZipEntry item, File targetFolder)\n\tthrows IOException\n{\n\tFile outputFile = new File(targetFolder, item.getName());\n\tif (!outputFile.getParentFile().exists())\n\t{\n\t\toutputFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outputFile);\n\ttry\n\t{\n\t\tcompressedFile.getInputStream(item).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.flush();\n\t\tout.close();\n\t}\n}",
            "correctness": "uncompilable",
            "translated": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\tthrows IOException\n{\n\tFile outFile = new File(destDir, entry.getName());\n\tif (!outFile.getParentFile().exists())\n\t{\n\t\toutFile.getParentFile().mkdirs();\n\t}\n\tFileOutputStream out = new FileOutputStream(outFile);\n\ttry\n\t{\n\t\tzipFile.getInputStream(entry).transferTo(out);\n\t}\n\tfinally\n\t{\n\t\tout.flush();\n\t\tout.close();\n\t}\n}"
        }
    ]
}