{
    "output": [
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n    }\n  }\n}\n",
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3':\n      case '4': case '5': case '6': case '7':\n      case '8': case '9':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n    }\n  }\n}\n",
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        } else {\n          embed(h, currentChar);\n        }\n        break;\n    }\n  }\n}\n",
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '/');\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        } else {\n          embed(h, currentChar);\n        }\n        break;\n    }\n  }\n}\n",
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n    }\n  }\n}\n",
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '\\b':\n        supplant(h, h + 1, \"\\\\b\"); break;\n      case '\\f':\n        supplant(h, h + 1, \"\\\\f\"); break;\n      case '\\n':\n        supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r':\n        supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\t':\n        supplant(h, h + 1, \"\\\\t\"); break;\n    }\n  }\n}\n",
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '\\b':\n        supplant(h, h + 1, \"\\\\b\");\n        break;\n      case '\\f':\n        supplant(h, h + 1, \"\\\\f\");\n        break;\n      case '\\n':\n        supplant(h, h + 1, \"\\\\n\");\n        break;\n      case '\\r':\n        supplant(h, h + 1, \"\\\\r\");\n        break;\n      case '\\t':\n        supplant(h, h + 1, \"\\\\t\");\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        } else {\n          embed(h, currentChar);\n        }\n        break;\n    }\n  }\n}\n",
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '\\b':\n        supplant(h, h + 1, \"\\\\b\");\n        break;\n      case '\\f':\n        supplant(h, h + 1, \"\\\\f\");\n        break;\n      case '\\n':\n        supplant(h, h + 1, \"\\\\n\");\n        break;\n      case '\\r':\n        supplant(h, h + 1, \"\\\\r\");\n        break;\n      case '\\t':\n        supplant(h, h + 1, \"\\\\t\");\n        break;\n      default:\n        supplant(h, h + 1, currentChar);\n        break;\n    }\n  }\n}\n",
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '\\b':\n        supplant(h, h + 1, \"\\\\b\");\n        break;\n      case '\\f':\n        supplant(h, h + 1, \"\\\\f\");\n        break;\n      case '\\n':\n        supplant(h, h + 1, \"\\\\n\");\n        break;\n      case '\\r':\n        supplant(h, h + 1, \"\\\\r\");\n        break;\n      case '\\t':\n        supplant(h, h + 1, \"\\\\t\");\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        } else {\n          embed(h, currentChar);\n        }\n    }\n  }\n}\n",
        "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n    }\n  }\n}\n\nprivate void supplant(int begin, int terminal, char replacement) {\n  for (int h = begin; h < terminal; ++h) {\n    JSONlike.setCharAt(h, replacement);\n  }\n}\n"
    ],
    "validation_result": [
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n    }\n  }\n}",
            "correctness": "compile_success",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        }\n        break;\n      default:\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        }\n        break;\n    }\n  }\n}"
        },
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3':\n      case '4': case '5': case '6': case '7':\n      case '8': case '9':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n    }\n  }\n}",
            "correctness": "compile_success",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        }\n        break;\n      default:\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        }\n        break;\n    }\n  }\n}"
        },
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        } else {\n          embed(h, currentChar);\n        }\n        break;\n    }\n  }\n}",
            "correctness": "compile_success",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      default:\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        } else {\n          insert(i, ch);\n        }\n        break;\n    }\n  }\n}"
        },
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '/');\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        } else {\n          embed(h, currentChar);\n        }\n        break;\n    }\n  }\n}",
            "correctness": "compile_success",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        } else {\n          insert(i, '/');\n        }\n        break;\n      default:\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        } else {\n          insert(i, ch);\n        }\n        break;\n    }\n  }\n}"
        },
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n    }\n  }\n}",
            "correctness": "compile_success",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        }\n        break;\n      default:\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        }\n    }\n  }\n}"
        },
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '\\b':\n        supplant(h, h + 1, \"\\\\b\"); break;\n      case '\\f':\n        supplant(h, h + 1, \"\\\\f\"); break;\n      case '\\n':\n        supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r':\n        supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\t':\n        supplant(h, h + 1, \"\\\\t\"); break;\n    }\n  }\n}",
            "correctness": "uncompilable",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '\\b':\n        replace(i, i + 1, \"\\\\b\"); break;\n      case '\\f':\n        replace(i, i + 1, \"\\\\f\"); break;\n      case '\\n':\n        replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r':\n        replace(i, i + 1, \"\\\\r\"); break;\n      case '\\t':\n        replace(i, i + 1, \"\\\\t\"); break;\n    }\n  }\n}"
        },
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '\\b':\n        supplant(h, h + 1, \"\\\\b\");\n        break;\n      case '\\f':\n        supplant(h, h + 1, \"\\\\f\");\n        break;\n      case '\\n':\n        supplant(h, h + 1, \"\\\\n\");\n        break;\n      case '\\r':\n        supplant(h, h + 1, \"\\\\r\");\n        break;\n      case '\\t':\n        supplant(h, h + 1, \"\\\\t\");\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        } else {\n          embed(h, currentChar);\n        }\n        break;\n    }\n  }\n}",
            "correctness": "uncompilable",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '\\b':\n        replace(i, i + 1, \"\\\\b\");\n        break;\n      case '\\f':\n        replace(i, i + 1, \"\\\\f\");\n        break;\n      case '\\n':\n        replace(i, i + 1, \"\\\\n\");\n        break;\n      case '\\r':\n        replace(i, i + 1, \"\\\\r\");\n        break;\n      case '\\t':\n        replace(i, i + 1, \"\\\\t\");\n        break;\n      default:\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        } else {\n          insert(i, ch);\n        }\n        break;\n    }\n  }\n}"
        },
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '\\b':\n        supplant(h, h + 1, \"\\\\b\");\n        break;\n      case '\\f':\n        supplant(h, h + 1, \"\\\\f\");\n        break;\n      case '\\n':\n        supplant(h, h + 1, \"\\\\n\");\n        break;\n      case '\\r':\n        supplant(h, h + 1, \"\\\\r\");\n        break;\n      case '\\t':\n        supplant(h, h + 1, \"\\\\t\");\n        break;\n      default:\n        supplant(h, h + 1, currentChar);\n        break;\n    }\n  }\n}",
            "correctness": "uncompilable",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '\\b':\n        replace(i, i + 1, \"\\\\b\");\n        break;\n      case '\\f':\n        replace(i, i + 1, \"\\\\f\");\n        break;\n      case '\\n':\n        replace(i, i + 1, \"\\\\n\");\n        break;\n      case '\\r':\n        replace(i, i + 1, \"\\\\r\");\n        break;\n      case '\\t':\n        replace(i, i + 1, \"\\\\t\");\n        break;\n      default:\n        replace(i, i + 1, ch);\n        break;\n    }\n  }\n}"
        },
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        } else {\n          embed(h, '\\\\');\n        }\n        break;\n      case '\\b':\n        supplant(h, h + 1, \"\\\\b\");\n        break;\n      case '\\f':\n        supplant(h, h + 1, \"\\\\f\");\n        break;\n      case '\\n':\n        supplant(h, h + 1, \"\\\\n\");\n        break;\n      case '\\r':\n        supplant(h, h + 1, \"\\\\r\");\n        break;\n      case '\\t':\n        supplant(h, h + 1, \"\\\\t\");\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        } else {\n          embed(h, currentChar);\n        }\n    }\n  }\n}",
            "correctness": "uncompilable",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        } else {\n          insert(i, '\\\\');\n        }\n        break;\n      case '\\b':\n        replace(i, i + 1, \"\\\\b\");\n        break;\n      case '\\f':\n        replace(i, i + 1, \"\\\\f\");\n        break;\n      case '\\n':\n        replace(i, i + 1, \"\\\\n\");\n        break;\n      case '\\r':\n        replace(i, i + 1, \"\\\\r\");\n        break;\n      case '\\t':\n        replace(i, i + 1, \"\\\\t\");\n        break;\n      default:\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        } else {\n          insert(i, ch);\n        }\n    }\n  }\n}"
        },
        {
            "patch": "private void cleanString(int begin, int terminal) {\n  boolean shut = false;\n  for (int h = begin; h < terminal; ++h) {\n    char currentChar = JSONlike.charAt(h);\n    switch (currentChar) {\n      case '\\n': supplant(h, h + 1, \"\\\\n\"); break;\n      case '\\r': supplant(h, h + 1, \"\\\\r\"); break;\n      case '\\u2028': supplant(h, h + 1, \"\\\\u2028\"); break;\n      case '\\u2029': supplant(h, h + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (h == begin) {\n          if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n        } else {\n          if (h + 1 == terminal) {\n            char beginDelimiter = JSONlike.charAt(begin);\n            if (beginDelimiter!= '\\'') {\n              beginDelimiter = '\"';\n            }\n            shut = beginDelimiter == currentChar;\n          }\n          if (shut) {\n            if (currentChar == '\\'') { supplant(h, h + 1, '\"'); }\n          } else if (currentChar == '\"') {\n            embed(h, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n      default:\n        if (h + 1 == terminal) {\n          char beginDelimiter = JSONlike.charAt(begin);\n          if (beginDelimiter!= '\\'') {\n            beginDelimiter = '\"';\n          }\n          shut = beginDelimiter == currentChar;\n        }\n        if (shut) {\n          supplant(h, h + 1, currentChar);\n        }\n        break;\n    }\n  }\n}",
            "correctness": "compile_success",
            "translated": "private void sanitizeString(int start, int end) {\n  boolean closed = false;\n  for (int i = start; i < end; ++i) {\n    char ch = jsonish.charAt(i);\n    switch (ch) {\n      case '\\n': replace(i, i + 1, \"\\\\n\"); break;\n      case '\\r': replace(i, i + 1, \"\\\\r\"); break;\n      case '\\u2028': replace(i, i + 1, \"\\\\u2028\"); break;\n      case '\\u2029': replace(i, i + 1, \"\\\\u2029\"); break;\n      case '\"': case '\\'':\n        if (i == start) {\n          if (ch == '\\'') { replace(i, i + 1, '\"'); }\n        } else {\n          if (i + 1 == end) {\n            char startDelim = jsonish.charAt(start);\n            if (startDelim!= '\\'') {\n              startDelim = '\"';\n            }\n            closed = startDelim == ch;\n          }\n          if (closed) {\n            if (ch == '\\'') { replace(i, i + 1, '\"'); }\n          } else if (ch == '\"') {\n            insert(i, '\\\\');\n          }\n        }\n        break;\n      case '\\\\':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '\\\\');\n        }\n        break;\n      case '/':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, '/');\n        }\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        }\n        break;\n      default:\n        if (i + 1 == end) {\n          char startDelim = jsonish.charAt(start);\n          if (startDelim!= '\\'') {\n            startDelim = '\"';\n          }\n          closed = startDelim == ch;\n        }\n        if (closed) {\n          replace(i, i + 1, ch);\n        }\n        break;\n    }\n  }\n}"
        }
    ]
}