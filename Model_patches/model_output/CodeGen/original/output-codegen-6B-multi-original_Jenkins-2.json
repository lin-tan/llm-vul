{
    "output": [
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job is in this collection.\n     */\n    public final boolean contains(TopLevelItem item) {\n        return item!=null && items.contains(item);\n    }\n\n    /**\n     * Gets the name of all this collection.\n     *\n     * @see #rename(String)\n     */\n    @Exported(visibility=2,name=\"name\")\n    public String getViewName() {\n        return name;\n    }\n\n    /**\n     * Renames this view.\n     */\n    public void rename(String newName) throws Failure, FormException {\n        if(name.equals(newName))    return; // noop\n        checkGoodName(newName);\n        if(owner.get",
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job with the given name exists.\n     */\n    public boolean contains(String name) {\n        return getItem(name)!= null;\n    }\n\n    /**\n     * Binds /userContent/... to $JENKINS_HOME/userContent.\n     */\n    public DirectoryBrowserSupport doUserContent() {\n        return new DirectoryBrowserSupport(this,getRootPath().child(\"userContent\"),\"User content\",\"folder.png\",true);\n    }\n\n    /**\n     * Perform a restart of Hudson, if we can.\n     *\n     * This first replaces \"app\" to {@link HudsonIsRestarting}\n     */\n    @CLIMethod(name=\"restart\")\n    public void doRestart(",
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job is in this collection.\n     */\n    public final boolean contains(TopLevelItem item) {\n        return item!=null && items.contains(item);\n    }\n\n    /**\n     * Gets the name of all this collection.\n     *\n     * @see #rename(String)\n     */\n    @Exported(visibility=2,name=\"name\")\n    public String getViewName() {\n        return name;\n    }\n\n    /**\n     * Renames this view.\n     */\n    public void rename(String newName) throws Failure, FormException {\n        if(name.equals(newName))    return; // noop\n        checkGoodName(newName);\n        if(owner instanceof",
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job is in this collection.\n     */\n    public final boolean contains(TopLevelItem item) {\n        return item!=null && items.contains(item);\n    }\n\n    /**\n     * Gets the name of all this collection.\n     *\n     * @see #rename(String)\n     */\n    @Exported(visibility=2,name=\"name\")\n    public String getViewName() {\n        return name;\n    }\n\n    /**\n     * Renames this view.\n     */\n    public void rename(String newName) throws Failure, FormException {\n        if(name.equals(newName))    return; // noop\n        String oldName = name;\n        name = newName;\n",
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job is in this collection.\n     */\n    public final boolean contains(TopLevelItem item) {\n        return item!=null && items.contains(item);\n    }\n\n    /**\n     * Gets the name of all this collection.\n     *\n     * @see #rename(String)\n     */\n    @Exported(visibility=2,name=\"name\")\n    public String getViewName() {\n        return name;\n    }\n\n    /**\n     * Renames this view.\n     */\n    public void rename(String newName) throws Failure, FormException {\n        if(name.equals(newName))    return; // noop\n        checkGoodName(newName);\n        if(owner!=",
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job is in this collection.\n     */\n    public final boolean contains(TopLevelItem item) {\n        return item!=null && items.contains(item);\n    }\n\n    /**\n     * Gets the name of all this collection.\n     *\n     * @see #rename(String)\n     */\n    @Exported(visibility=2,name=\"name\")\n    public String getViewName() {\n        return name;\n    }\n\n    /**\n     * Renames this view.\n     */\n    public void rename(String newName) throws Failure, FormException {\n        if(name.equals(newName))    return; // noop\n        checkGoodName(newName);\n        String oldName = name",
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job is in this collection.\n     */\n    public final boolean contains(TopLevelItem item) {\n        return item!=null && items.contains(item);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s in the hierarchy.\n     */\n    public Collection<String> getNameList() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the number of all {@link TopLevelItem}s in the hierarchy.\n     */\n    public int getNumItems() {\n        return items.",
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job is in this collection.\n     */\n    public final boolean contains(TopLevelItem item) {\n        return item!=null && items.contains(item);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s in the hierarchy.\n     */\n    public Collection<String> getNameList() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    @Override\n    public String getDisplayName() {\n        return \"Jobs\";\n    }\n\n    @Override\n    public String getIconFileName() {\n        return",
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job is in this collection.\n     */\n    public final boolean contains(TopLevelItem item) {\n        return item!=null && items.contains(item);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s in this collection.\n     */\n    public Collection<String> getNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    @Override\n    public String getDisplayName() {\n        return \"Jobs\";\n    }\n\n    @Override\n    public String getIconFileName() {\n        return \"",
        "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s.\n     */\n    public Collection<String> getItemNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name.\n     */\n    public TopLevelItem getItem(String name) {\n        for (TopLevelItem item : items) {\n            if(item.getName().equals(name))\n                return item;\n        }\n        return null;\n    }\n\n    /**\n     * Gets the {@link TopLevelItem} of the given name, or null if not found.\n     */\n    public TopLevelItem getItem(String name, ItemGroup context) {\n        while (context!=null) {\n            TopLevelItem item = context.getItem(name);\n            if (item!=null)    return item;\n            context = context.getParent();\n        }\n        return null;\n    }\n\n    /**\n     * Alias for {@link #getItem(String)}. This is the one used in the URL binding.\n     */\n    public final TopLevelItem getJob(String name) {\n        return getItem(name);\n    }\n\n    /**\n     * Checks if the job is in this collection.\n     */\n    public final boolean contains(TopLevelItem item) {\n        return item!=null && items.contains(item);\n    }\n\n    /**\n     * Gets the names of all {@link TopLevelItem}s in the collection.\n     */\n    public final Collection<String> getNames() {\n        List<String> names = new ArrayList<String>();\n        for (TopLevelItem item : items) {\n            names.add(item.getName());\n        }\n        return names;\n    }\n\n    @Override\n    public String getDisplayName() {\n        return \"Jobs\";\n    }\n\n    @Override\n    public String getIconFileName() {\n        return"
    ],
    "validation_result": [
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(name=\"jobs\")\npublic List<TopLevelItem> getItems() {\n        return Collections.unmodifiableList(items);\n    }",
            "correctness": "uncompilable"
        }
    ]
}