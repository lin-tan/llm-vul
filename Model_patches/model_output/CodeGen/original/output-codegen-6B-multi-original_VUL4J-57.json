{
    "output": [
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n}\n}\n",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n}\n\n}\n",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInProgress()) {\n        throw new AbortException(\"Job \" + job + \" is in progress\");\n    }\n    return true;\n}\n\n}\n",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInProgress()) {\n        throw new AbortException(\"Job \" + job + \" is in progress\");\n    }\n    return true;\n}\n}\n",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n  }\n}\n",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n}\n\n}\n",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInProgress()) {\n        throw new AbortException(\"Job \" + job + \" is in progress\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isStuck()) {\n        throw new AbortException(\"Job \" + job + \" is stuck\");\n    }\n    return true;\n}\n\n}\n",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n}\n}\n",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    return true;\n}\n\n}\n",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    return true;\n}\n}\n"
    ],
    "validation_result": [
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n}\n\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInProgress()) {\n        throw new AbortException(\"Job \" + job + \" is in progress\");\n    }\n    return true;\n}\n\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInProgress()) {\n        throw new AbortException(\"Job \" + job + \" is in progress\");\n    }\n    return true;\n}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n  }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n}\n\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInProgress()) {\n        throw new AbortException(\"Job \" + job + \" is in progress\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isStuck()) {\n        throw new AbortException(\"Job \" + job + \" is stuck\");\n    }\n    return true;\n}\n\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    return true;\n}\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    return true;\n}\n\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override\npublic boolean start() throws Exception {\n    String job = step.getJob();\n    Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n    if (item == null) {\n        throw new AbortException(\"No item named \" + job + \" found\");\n    }\n    if (!(item instanceof AbstractProject)) {\n        throw new AbortException(\"Job \" + job + \" is not a project\");\n    }\n    AbstractProject project = (AbstractProject) item;\n    if (project.isDisabled()) {\n        throw new AbortException(\"Job \" + job + \" is disabled\");\n    }\n    if (project.isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    if (project.isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isBuilding()) {\n        throw new AbortException(\"Job \" + job + \" is building\");\n    }\n    if (project.getLastBuild()!= null && project.getLastBuild().isInQueue()) {\n        throw new AbortException(\"Job \" + job + \" is in queue\");\n    }\n    return true;\n}\n}",
            "correctness": "uncompilable"
        }
    ]
}