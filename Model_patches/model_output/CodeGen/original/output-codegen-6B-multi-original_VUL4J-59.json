{
    "output": [
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n        case '=':\n        case '`':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n  }\n\n}\n",
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.transition(Data);\n            break;\n        case '=':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n",
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n",
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.transition(Data);\n            break;\n        case '=':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case ']':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '[':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '{':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n\n}\n",
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '?':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n\n}\n",
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.transition(Data);\n            break;\n        case '=':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case ']':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '[':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n\n}\n",
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '?':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n",
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.transition(Data);\n            break;\n        case '=':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case ']':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '[':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n",
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.tagPending.appendAttributeValue('!');\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.tagPending.appendAttributeValue('-');\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n",
        "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.tagPending.appendAttributeValue('!');\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.tagPending.appendAttributeValue('-');\n            t.transition(AttributeValue_unquoted);\n            break;\n        case 'N':\n        case 'n':\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n\n}\n"
    ],
    "validation_result": [
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n        case '=':\n        case '`':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.transition(Data);\n            break;\n        case '=':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.transition(Data);\n            break;\n        case '=':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case ']':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '[':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '{':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}\n\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '?':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.transition(Data);\n            break;\n        case '=':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case ']':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '[':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '?':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.transition(Data);\n            break;\n        case '=':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case ']':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '[':\n            t.error(this);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.tagPending.appendAttributeValue('!');\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.tagPending.appendAttributeValue('-');\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case'':\n            break;\n        case '\"':\n            t.transition(AttributeValue_doubleQuoted);\n            break;\n        case '&':\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '\\'':\n            t.transition(AttributeValue_singleQuoted);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '>':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case '<':\n            t.error(this);\n            t.emitTagPending();\n            t.transition(TagOpen);\n            break;\n        case '=':\n            t.error(this);\n            t.tagPending.appendAttributeValue(c);\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '!':\n            t.error(this);\n            t.tagPending.appendAttributeValue('!');\n            t.transition(AttributeValue_unquoted);\n            break;\n        case '-':\n            t.error(this);\n            t.tagPending.appendAttributeValue('-');\n            t.transition(AttributeValue_unquoted);\n            break;\n        case 'N':\n        case 'n':\n            t.error(this);\n            t.tagPending.appendAttributeValue(replacementChar);\n            t.transition(AttributeValue_unquoted);\n            break;\n        default:\n            r.unconsume();\n            t.transition(AttributeValue_unquoted);\n    }\n}",
            "correctness": "uncompilable"
        }
    ]
}