{
    "output": [
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n    }\n  }\n}\n",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n    } else {\n        this.hashAlg = HashAlgorithm.NONE;\n        this.hashSize = 0;\n    }\n  }\n}\n",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    }\n  }\n}\n",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    }\n  }\n\n}\n",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.NONE;\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.NONE;\n        this.cryptSize = 0;\n    }\n  }\n}\n",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.NONE;\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.NONE;\n        this.cryptSize = 0;\n    }\n  }\n\n}\n",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = null;\n        this.hashSize = 0;\n        this.cryptAlg = null;\n        this.cryptSize = 0;\n    }\n  }\n}\n",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(0);\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(0);\n        this.cryptSize = 0;\n    }\n  }\n}\n",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.NOT_AVAILABLE;\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.NOT_AVAILABLE;\n        this.cryptSize = 0;\n    }\n  }\n}\n",
        "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(0);\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(0);\n        this.cryptSize = 0;\n    }\n  }\n\n}\n"
    ],
    "validation_result": [
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n    }\n  }",
            "correctness": "test_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n    } else {\n        this.hashAlg = HashAlgorithm.NONE;\n        this.hashSize = 0;\n    }\n  }",
            "correctness": "test_success"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.NONE;\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.NONE;\n        this.cryptSize = 0;\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.NONE;\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.NONE;\n        this.cryptSize = 0;\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = null;\n        this.hashSize = 0;\n        this.cryptAlg = null;\n        this.cryptSize = 0;\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(0);\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(0);\n        this.cryptSize = 0;\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.NOT_AVAILABLE;\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.NOT_AVAILABLE;\n        this.cryptSize = 0;\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n    this.format = ZipShort.getValue(data, offset);\n    this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n    this.bitlen = ZipShort.getValue(data, offset + 4);\n    this.flags = ZipShort.getValue(data, offset + 6);\n    this.rcount = ZipLong.getValue(data, offset + 8);\n    if (rcount > 0) {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n        this.hashSize = ZipShort.getValue(data, offset + 14);\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 16));\n        this.cryptSize = ZipShort.getValue(data, offset + 18);\n    } else {\n        this.hashAlg = HashAlgorithm.getAlgorithmByCode(0);\n        this.hashSize = 0;\n        this.cryptAlg = EncryptionAlgorithm.getAlgorithmByCode(0);\n        this.cryptSize = 0;\n    }\n  }",
            "correctness": "uncompilable"
        }
    ]
}