{
    "output": [
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    if (!targetDirectory.mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetDirectory);\n                    }\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    if (!targetFile.getParentFile().mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetFile.getParentFile());\n                    }\n                }\n                if (!targetFile.createNewFile()) {\n                    throw new IOException(\"Unable to create file \" + targetFile);\n                }\n                writer.write(targetFile, entry);\n            }\n        }\n    }\n}\n",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    if (!targetDirectory.mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetDirectory);\n                    }\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    if (!targetFile.getParentFile().mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetFile.getParentFile());\n                    }\n                }\n                try (OutputStream out = new FileOutputStream(targetFile)) {\n                    writer.write(out, entry);\n                }\n            }\n        }\n    }\n}\n",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    if (!targetDirectory.mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetDirectory);\n                    }\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    if (!targetFile.getParentFile().mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetFile.getParentFile());\n                    }\n                }\n                writer.write(entry, targetFile);\n            }\n        }\n    }\n}\n",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    if (!targetDirectory.mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetDirectory);\n                    }\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    if (!targetFile.getParentFile().mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetFile.getParentFile());\n                    }\n                }\n                writer.writeEntry(entry, targetFile);\n            }\n        }\n    }\n}\n",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.write(entry, targetFile);\n            }\n        }\n    }\n}\n",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.writeEntry(entry, targetFile);\n            }\n        }\n    }\n}\n",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            }\n            else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.writeEntry(entry, targetFile);\n            }\n        }\n    }\n}\n",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            }\n            else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.write(entry, targetFile);\n            }\n        }\n    }\n}\n",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.write(targetFile, entry);\n            }\n        }\n    }\n}\n",
        "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            }\n            else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.writeEntry(entry, targetFile);\n            }\n        }\n    }\n\n}\n"
    ],
    "validation_result": [
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    if (!targetDirectory.mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetDirectory);\n                    }\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    if (!targetFile.getParentFile().mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetFile.getParentFile());\n                    }\n                }\n                if (!targetFile.createNewFile()) {\n                    throw new IOException(\"Unable to create file \" + targetFile);\n                }\n                writer.write(targetFile, entry);\n            }\n        }\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    if (!targetDirectory.mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetDirectory);\n                    }\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    if (!targetFile.getParentFile().mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetFile.getParentFile());\n                    }\n                }\n                try (OutputStream out = new FileOutputStream(targetFile)) {\n                    writer.write(out, entry);\n                }\n            }\n        }\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    if (!targetDirectory.mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetDirectory);\n                    }\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    if (!targetFile.getParentFile().mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetFile.getParentFile());\n                    }\n                }\n                writer.write(entry, targetFile);\n            }\n        }\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    if (!targetDirectory.mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetDirectory);\n                    }\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    if (!targetFile.getParentFile().mkdirs()) {\n                        throw new IOException(\"Unable to create directory \" + targetFile.getParentFile());\n                    }\n                }\n                writer.writeEntry(entry, targetFile);\n            }\n        }\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.write(entry, targetFile);\n            }\n        }\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.writeEntry(entry, targetFile);\n            }\n        }\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            }\n            else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.writeEntry(entry, targetFile);\n            }\n        }\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            }\n            else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.write(entry, targetFile);\n            }\n        }\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            } else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.write(targetFile, entry);\n            }\n        }\n    }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n    throws IOException {\n        ArchiveEntry entry;\n        while ((entry = supplier.getNextEntry())!= null) {\n            if (entry.isDirectory()) {\n                if (!targetDirectory.exists()) {\n                    targetDirectory.mkdirs();\n                }\n            }\n            else {\n                File targetFile = new File(targetDirectory, entry.getName());\n                if (!targetFile.getParentFile().exists()) {\n                    targetFile.getParentFile().mkdirs();\n                }\n                writer.writeEntry(entry, targetFile);\n            }\n        }\n    }",
            "correctness": "uncompilable"
        }
    ]
}