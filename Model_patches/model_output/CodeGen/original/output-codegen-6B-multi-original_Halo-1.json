{
    "output": [
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to the path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with the path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with the parent path\");\n    }\n    if (parentPath.endsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not end with the path to check\");\n    }\n    if (pathToCheck.endsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not end with the parent path\");\n    }\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with parent path\");\n    }\n    if (parentPath.endsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not end with path to check\");\n    }\n    if (pathToCheck.endsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not end with parent path\");\n    }\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to the path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with the path to check\");\n    }\n    if (parentPath.endsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not end with the path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with the parent path\");\n    }\n    if (pathToCheck.endsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not end with the parent path\");\n    }\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path must be a directory\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check must be a directory\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to the path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with the path to check\");\n    }\n    if (parentPath.endsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not end with the path to check\");\n    }\n    if (parentPath.contains(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not contain the path to check\");\n    }\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with parent path\");\n    }\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to the path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with the path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with the parent path\");\n    }\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.isTrue(parentPath.isAbsolute(), \"Parent path must be absolute\");\n    Assert.isTrue(pathToCheck.isAbsolute(), \"Path to check must be absolute\");\n    Assert.isTrue(pathToCheck.startsWith(parentPath), \"Path to check must start with parent path\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.isTrue(parentPath.isAbsolute(), \"Parent path must be absolute\");\n    Assert.isTrue(pathToCheck.isAbsolute(), \"Path to check must be absolute\");\n    Assert.isTrue(parentPath.startsWith(pathToCheck), \"Parent path must be a parent of the path to check\");\n  }\n}\n",
        "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (!parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must be a parent of the path to check\");\n    }\n  }\n}\n"
    ],
    "validation_result": [
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to the path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with the path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with the parent path\");\n    }\n    if (parentPath.endsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not end with the path to check\");\n    }\n    if (pathToCheck.endsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not end with the parent path\");\n    }\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with parent path\");\n    }\n    if (parentPath.endsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not end with path to check\");\n    }\n    if (pathToCheck.endsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not end with parent path\");\n    }\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to the path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with the path to check\");\n    }\n    if (parentPath.endsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not end with the path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with the parent path\");\n    }\n    if (pathToCheck.endsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not end with the parent path\");\n    }\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.isTrue(Files.isDirectory(parentPath), \"Parent path must be a directory\");\n    Assert.isTrue(Files.isDirectory(pathToCheck), \"Path to check must be a directory\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to the path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with the path to check\");\n    }\n    if (parentPath.endsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not end with the path to check\");\n    }\n    if (parentPath.contains(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not contain the path to check\");\n    }\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with parent path\");\n    }\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (parentPath.equals(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not be equal to the path to check\");\n    }\n    if (parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must not start with the path to check\");\n    }\n    if (pathToCheck.startsWith(parentPath)) {\n      throw new IllegalArgumentException(\"Path to check must not start with the parent path\");\n    }\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.isTrue(parentPath.isAbsolute(), \"Parent path must be absolute\");\n    Assert.isTrue(pathToCheck.isAbsolute(), \"Path to check must be absolute\");\n    Assert.isTrue(pathToCheck.startsWith(parentPath), \"Path to check must start with parent path\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    Assert.isTrue(parentPath.isAbsolute(), \"Parent path must be absolute\");\n    Assert.isTrue(pathToCheck.isAbsolute(), \"Path to check must be absolute\");\n    Assert.isTrue(parentPath.startsWith(pathToCheck), \"Parent path must be a parent of the path to check\");\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n    Assert.notNull(parentPath, \"Parent path must not be null\");\n    Assert.notNull(pathToCheck, \"Path to check must not be null\");\n    if (!parentPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Parent path must be absolute\");\n    }\n    if (!pathToCheck.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path to check must be absolute\");\n    }\n    if (!parentPath.startsWith(pathToCheck)) {\n      throw new IllegalArgumentException(\"Parent path must be a parent of the path to check\");\n    }\n  }",
            "correctness": "compile_success"
        }
    ]
}