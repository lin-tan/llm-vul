{
    "output": [
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n  }\n\n  private void readStoredEntry() throws IOException {\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n  }\n\n  private void readStoredEntry() throws IOException {\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(l);\n    }\n    final int n = Math.min(buf.remaining(), csize - current.bytesRead);\n    buf.get(buffer, offset, n);\n    current.bytesRead += n;\n    return n;\n}\n\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(l);\n    }\n    final int n = Math.min(buf.remaining(), csize - current.bytesRead);\n    buf.get(buffer, offset, n);\n    current.bytesRead += n;\n    return n;\n}\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(l);\n    }\n    final int n = Math.min(buf.remaining(), length);\n    buf.get(buffer, offset, n);\n    current.bytesRead += n;\n    return n;\n}\n\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n}\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n}\n\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n  }\n\n  private void readStoredEntry() throws IOException {\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n  }\n\n  @Override\n  public void close() throws IOException {\n    in.close();\n  }\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n}\n}\n",
        "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n}\n\n}\n"
    ],
    "validation_result": [
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(l);\n    }\n    final int n = Math.min(buf.remaining(), csize - current.bytesRead);\n    buf.get(buffer, offset, n);\n    current.bytesRead += n;\n    return n;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(l);\n    }\n    final int n = Math.min(buf.remaining(), csize - current.bytesRead);\n    buf.get(buffer, offset, n);\n    current.bytesRead += n;\n    return n;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(l);\n    }\n    final int n = Math.min(buf.remaining(), length);\n    buf.get(buffer, offset, n);\n    current.bytesRead += n;\n    return n;\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n    if (current.hasDataDescriptor) {\n        if (lastStoredEntry == null) {\n            readStoredEntry();\n        }\n        return lastStoredEntry.read(buffer, offset, length);\n    }\n    final long csize = current.entry.getSize();\n    if (current.bytesRead >= csize) {\n        return -1;\n    }\n    if (buf.position() >= buf.limit()) {\n        buf.position(0);\n        final int l = in.read(buf.array());\n        if (l == -1) {\n            throw new EOFException();\n        }\n        buf.limit(buf.position());\n    }\n    final int toRead = (int) (csize - current.bytesRead);\n    if (toRead > length) {\n        toRead = length;\n    }\n    System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, offset, toRead);\n    buf.position(buf.position() + toRead);\n    current.bytesRead += toRead;\n    return toRead;\n}",
            "correctness": "uncompilable"
        }
    ]
}