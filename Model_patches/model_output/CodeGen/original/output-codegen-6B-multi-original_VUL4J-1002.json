{
    "output": [
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd), sb.subSequence(valueStart, valueEnd));\n}\n}\n",
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }\n\n  private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n    for (int result = offset; result < sb.length(); result ++) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result;\n      }\n    }\n    return sb.length();\n  }\n\n  private static int findEndOfString(AppendableCharSequence sb) {\n    final int length = sb.length();\n    for (int result = length; result > 0; result --) {\n      if (sb.charAtUnsafe(result - 1)!= '\\\\') {\n        return result;\n      }\n    }\n    return 0;\n  }\n\n  private static void addHeader(CharSequence name, CharSequence value) {\n    if (name == null) {\n      throw new NullPointerException(\"name == null\");\n    }\n    if (value == null) {\n      throw new NullPointerException(\"value == null\");\n    }\n    request.headers().add(name, value);\n  }\n}\n",
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }\n\n  private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n    for (int result = offset; result < sb.length(); result ++) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result;\n      }\n    }\n    return sb.length();\n  }\n\n  private static int findEndOfString(AppendableCharSequence sb) {\n    final int length = sb.length();\n    for (int result = length; result > 0; result --) {\n      if (sb.charAtUnsafe(result - 1)!= '\\\\') {\n        return result;\n      }\n    }\n    return 0;\n  }\n\n  private static void addHeader(CharSequence name, CharSequence value) {\n    if (name!= null && value!= null) {\n      headers.add(name, value);\n    }\n  }\n}\n",
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }\n\n  private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n    for (int result = offset; result < sb.length(); result ++) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result;\n      }\n    }\n    return sb.length();\n  }\n\n  private static int findEndOfString(AppendableCharSequence sb) {\n    for (int result = sb.length() - 1; result > 0; result --) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result + 1;\n      }\n    }\n    return 0;\n  }\n\n  private static void addHeader(CharSequence name, CharSequence value) {\n    if (name!= null && value!= null) {\n      headers.add(name, value);\n    }\n  }\n}\n",
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }\n\n  private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n    for (int result = offset; result < sb.length(); result ++) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result;\n      }\n    }\n    return sb.length();\n  }\n\n  private static int findEndOfString(AppendableCharSequence sb) {\n    final int length = sb.length();\n    for (int result = length; result > 0; result --) {\n      if (sb.charAtUnsafe(result - 1)!= '\\\\') {\n        return result;\n      }\n    }\n    return 0;\n  }\n\n  private static void addHeader(CharSequence name, CharSequence value) {\n    if (name == null) {\n      throw new NullPointerException(\"name == null\");\n    }\n    if (value == null) {\n      throw new NullPointerException(\"value == null\");\n    }\n    if (name.length() == 0) {\n      throw new IllegalArgumentException(\"name.length() == 0\");\n    }\n    if (value.length() == 0) {\n      throw new IllegalArgumentException(\"value.length() == 0\");\n    }\n    request.headers().add(name, value);\n  }\n}\n",
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }\n\n  private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n    for (int result = offset; result < sb.length(); result ++) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result;\n      }\n    }\n    return sb.length();\n  }\n\n  private static int findEndOfString(AppendableCharSequence sb) {\n    final int length = sb.length();\n    for (int result = length; result > 0; result --) {\n      if (sb.charAtUnsafe(result - 1)!= '\\\\') {\n        return result;\n      }\n    }\n    return 0;\n  }\n\n  private static void addHeader(CharSequence name, CharSequence value) {\n    if (name == null) {\n      throw new NullPointerException(\"name == null\");\n    }\n    if (value == null) {\n      throw new NullPointerException(\"value == null\");\n    }\n    headers.add(name, value);\n  }\n}\n",
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }\n\n  private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n    for (int result = offset; result < sb.length(); result ++) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result;\n      }\n    }\n    return sb.length();\n  }\n\n  private static int findEndOfString(AppendableCharSequence sb) {\n    final int length = sb.length();\n    for (int result = length; result > 0; result --) {\n      if (sb.charAtUnsafe(result - 1)!= '\\\\') {\n        return result;\n      }\n    }\n    return 0;\n  }\n\n  private static void addHeader(CharSequence name, CharSequence value) {\n    if (name == null) {\n      throw new NullPointerException(\"name == null\");\n    }\n    if (value == null) {\n      throw new NullPointerException(\"value == null\");\n    }\n    headers.add(new Header(name, value));\n  }\n}\n",
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }\n\n  private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n    for (int result = offset; result < sb.length(); result ++) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result;\n      }\n    }\n    return sb.length();\n  }\n\n  private static int findEndOfString(AppendableCharSequence sb) {\n    final int length = sb.length();\n    for (int result = length; result > 0; result --) {\n      if (sb.charAtUnsafe(result - 1)!= '\\\\') {\n        return result;\n      }\n    }\n    return 0;\n  }\n\n  private static void addHeader(CharSequence name, CharSequence value) {\n    if (name == null) {\n      throw new NullPointerException(\"name == null\");\n    }\n    if (name.length() == 0) {\n      throw new IllegalArgumentException(\"name is empty\");\n    }\n    if (value == null) {\n      throw new NullPointerException(\"value == null\");\n    }\n    if (value.length() == 0) {\n      throw new IllegalArgumentException(\"value is empty\");\n    }\n    request.headers().add(name, value);\n  }\n}\n",
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }\n\n  private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n    for (int result = offset; result < sb.length(); result ++) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result;\n      }\n    }\n    return sb.length();\n  }\n\n  private static int findEndOfString(AppendableCharSequence sb) {\n    final int length = sb.length();\n    for (int result = length; result > 0; result --) {\n      if (sb.charAtUnsafe(result - 1)!= '\\\\') {\n        return result;\n      }\n    }\n    return 0;\n  }\n\n  private static void addHeader(CharSequence name, CharSequence value) {\n    if (name == null) {\n      throw new NullPointerException(\"name == null\");\n    }\n    if (value == null) {\n      throw new NullPointerException(\"value == null\");\n    }\n    if (name.length() == 0) {\n      throw new IllegalArgumentException(\"name.length() == 0\");\n    }\n    if (value.length() == 0) {\n      throw new IllegalArgumentException(\"value.length() == 0\");\n    }\n    headers.add(name, value);\n  }\n}\n",
        "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }\n\n  private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n    for (int result = offset; result < sb.length(); result ++) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n        return result;\n      }\n    }\n    return sb.length();\n  }\n\n  private static int findEndOfString(AppendableCharSequence sb) {\n    for (int result = sb.length(); result > 0; result --) {\n      if (!Character.isWhitespace(sb.charAtUnsafe(result - 1))) {\n        return result;\n      }\n    }\n    return 0;\n  }\n\n  private void addHeader(CharSequence name, CharSequence value) {\n    if (name == null || name.length() == 0 || value == null || value.length() == 0) {\n      return;\n    }\n    headers.add(new Header(name, value));\n  }\n}\n"
    ],
    "validation_result": [
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd), sb.subSequence(valueStart, valueEnd));\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }",
            "correctness": "uncompilable"
        },
        {
            "patch": "private void splitHeader(AppendableCharSequence sb) {\n    final int length = sb.length();\n    int nameStart;\n    int nameEnd;\n    int colonEnd;\n    int valueStart;\n    int valueEnd;\n    nameStart = findNonWhitespace(sb, 0);\n    for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n        char ch = sb.charAtUnsafe(nameEnd);\n        if (ch == ':' || Character.isWhitespace(ch)) {\n            break;\n        }\n    }\n    for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {\n        if (sb.charAtUnsafe(colonEnd) == ':') {\n            colonEnd ++;\n            break;\n        }\n    }\n    valueStart = findNonWhitespace(sb, colonEnd);\n    valueEnd = findEndOfString(sb);\n    addHeader(sb.subSequence(nameStart, nameEnd),\n              sb.subSequence(valueStart, valueEnd));\n  }",
            "correctness": "uncompilable"
        }
    ]
}