{
    "output": [
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }\n\n  public String getUrlChildPrefix() {\n    return \"job\";\n  }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getRootPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n     * this one uses the current request to reconstruct the URL. The benefit is\n     * that this is immune to the configuration",
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }\n\n  public String getUrlChildPrefix() {\n    return \"job\";\n  }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getRootPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n    // for compatibility. the actual data is stored in Mailer\n    String url = Mailer.descriptor().getUrl();\n    if(url!=null) {\n      if (!url.endsWith(\"/\")) url += '/';\n      return url;\n    }\n\n    StaplerRequest req = Stapler.getCurrentRequest();\n    if(req!=null)\n      return getRootUrlFromRequest();\n    return null;\n  }\n\n  /**\n   * Is Jenkins running in HTTPS?\n   *\n   * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n   * in the reverse proxy.\n   */\n  public boolean isRootUrlSecure() {\n    String url = getRootUrl();\n    return url!=null && url.startsWith(\"https\");\n  }\n\n  /**\n   * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n   *\n   * <p>\n   * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n   * this one uses the current request to reconstruct the URL. The benefit is\n   * that this is immune to the configuration",
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }\n\n  public String getUrlChildPrefix() {\n    return \"job\";\n  }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getContextPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n     * this one uses the current request to reconstruct the URL. The benefit is\n     * that this is immune to the configuration",
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }\n\n  public String getUrlChildPrefix() {\n    return \"job\";\n  }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getRootPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page,\n     * such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n     * this one uses the current request to reconstruct the URL. The benefit is\n     * that this is immune",
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return viewGroupMixIn.getViews(); }\n        });\n  }\n\n  public String getUrlChildPrefix() {\n    return \"job\";\n  }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getRootPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n     * this one uses the current request to reconstruct the URL. The benefit is\n     *",
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }\n\n  public String getUrlChildPrefix() { return \"job\"; }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getRootPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n     * this one uses the current request to reconstruct the URL. The benefit is\n     * that this is immune to the configuration mistake (users often",
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }\n\n  public String getUrlChildPrefix() {\n    return \"job\";\n  }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getRootPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n    // for compatibility. the actual data is stored in Mailer\n    String url = Mailer.descriptor().getUrl();\n    if(url!=null) {\n      if (!url.endsWith(\"/\")) url += '/';\n      return url;\n    }\n\n    StaplerRequest req = Stapler.getCurrentRequest();\n    if(req!=null)\n      return getRootUrlFromRequest();\n    return null;\n  }\n\n  /**\n   * Is Jenkins running in HTTPS?\n   *\n   * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n   * in the reverse proxy.\n   */\n  public boolean isRootUrlSecure() {\n    String url = getRootUrl();\n    return url!=null && url.startsWith(\"https\");\n  }\n\n  /**\n   * Gets the absolute URL of Hudson top page,\n   * such as \"http://localhost/hudson/\".\n   *\n   * <p>\n   * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n   * this one uses the current request to reconstruct the URL. The benefit is\n   * that this is immune",
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }\n\n  public String getUrlChildPrefix() {\n    return \"job\";\n  }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getRootPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n    // for compatibility. the actual data is stored in Mailer\n    String url = Mailer.descriptor().getUrl();\n    if(url!=null) {\n      if (!url.endsWith(\"/\")) url += '/';\n      return url;\n    }\n\n    StaplerRequest req = Stapler.getCurrentRequest();\n    if(req!=null)\n      return getRootUrlFromRequest();\n    return null;\n  }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n     * this one uses the current request to reconstruct the URL. The benefit is\n     * that this is immune to the configuration",
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }\n\n  @Override\n  public String getUrlChildPrefix() {\n    return \"job\";\n  }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getRootPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n        // for compatibility. the actual data is stored in Mailer\n        String url = Mailer.descriptor().getUrl();\n        if(url!=null) {\n            if (!url.endsWith(\"/\")) url += '/';\n            return url;\n        }\n\n        StaplerRequest req = Stapler.getCurrentRequest();\n        if(req!=null)\n            return getRootUrlFromRequest();\n        return null;\n    }\n\n    /**\n     * Is Jenkins running in HTTPS?\n     *\n     * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n     * in the reverse proxy.\n     */\n    public boolean isRootUrlSecure() {\n        String url = getRootUrl();\n        return url!=null && url.startsWith(\"https\");\n    }\n\n    /**\n     * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n     *\n     * <p>\n     * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n     * this one uses the current request to reconstruct the URL. The benefit is\n     * that this is",
        "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return viewGroupMixIn.getViews(); }\n        });\n  }\n\n  public String getUrlChildPrefix() {\n    return \"job\";\n  }\n\n  /**\n   * Gets the absolute URL of Jenkins,\n   * such as \"http://localhost/jenkins/\".\n   *\n   * <p>\n   * This method first tries to use the manually configured value, then\n   * fall back to {@link StaplerRequest#getRootPath()}.\n   * It is done in this order so that it can work correctly even in the face\n   * of a reverse proxy.\n   *\n   * @return\n   *      This method returns null if this parameter is not configured by the user.\n   *      The caller must gracefully deal with this situation.\n   *      The returned URL will always have the trailing '/'.\n   * @since 1.66\n   * @see Descriptor#getCheckUrl(String)\n   * @see #getRootUrlFromRequest()\n   */\n  public String getRootUrl() {\n    // for compatibility. the actual data is stored in Mailer\n    String url = Mailer.descriptor().getUrl();\n    if(url!=null) {\n      if (!url.endsWith(\"/\")) url += '/';\n      return url;\n    }\n\n    StaplerRequest req = Stapler.getCurrentRequest();\n    if(req!=null)\n      return getRootUrlFromRequest();\n    return null;\n  }\n\n  /**\n   * Is Jenkins running in HTTPS?\n   *\n   * Note that we can't really trust {@link StaplerRequest#isSecure()} because HTTPS might be terminated\n   * in the reverse proxy.\n   */\n  public boolean isRootUrlSecure() {\n    String url = getRootUrl();\n    return url!=null && url.startsWith(\"https\");\n  }\n\n  /**\n   * Gets the absolute URL of Hudson top page, such as \"http://localhost/hudson/\".\n   *\n   * <p>\n   * Unlike {@link #getRootUrl()}, which uses the manually configured value,\n   * this one uses the current request to reconstruct the URL. The benefit is\n   *"
    ],
    "validation_result": [
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return viewGroupMixIn.getViews(); }\n        });\n  }",
            "correctness": "test_success"
        },
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return views; }\n        });\n  }",
            "correctness": "compile_success"
        },
        {
            "patch": "@Override\npublic SearchIndexBuilder makeSearchIndex() {\n    return super.makeSearchIndex()\n       .add(\"configure\", \"config\",\"configure\")\n       .add(\"manage\")\n       .add(\"log\")\n       .add(new CollectionSearchIndex<TopLevelItem>() {\n            protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }\n            protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }\n        })\n       .add(getPrimaryView().makeSearchIndex())\n       .add(new CollectionSearchIndex() {\n            protected Computer get(String key) { return getComputer(key); }\n            protected Collection<Computer> all() { return computers.values(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected User get(String key) { return User.get(key,false); }\n            protected Collection<User> all() { return User.getAll(); }\n        })\n       .add(new CollectionSearchIndex() {\n            protected View get(String key) { return getView(key); }\n            protected Collection<View> all() { return viewGroupMixIn.getViews(); }\n        });\n  }",
            "correctness": "test_success"
        }
    ]
}