{
    "output": [
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}\n\n}\n",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}\n}\n",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}\n\n}\n",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}\n}\n",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}\n\n}\n",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if ( isDirectory )\n    {\n        if (!f.exists() )\n        {\n            f.mkdirs();\n        }\n    }\n    else\n    {\n        if (!f.getParentFile().exists() )\n        {\n            f.getParentFile().mkdirs();\n        }\n\n        final FileOutputStream fos = new FileOutputStream( f );\n        try\n        {\n            IOUtils.copy( compressedInputStream, fos );\n        }\n        finally\n        {\n            IOUtils.closeQuietly( fos );\n        }\n    }\n}\n\n}\n",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}\n\n}\n",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}\n\n}\n",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}\n\n}\n",
        "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}\n\n}\n"
    ],
    "validation_result": [
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if ( isDirectory )\n    {\n        if (!f.exists() )\n        {\n            f.mkdirs();\n        }\n    }\n    else\n    {\n        if (!f.getParentFile().exists() )\n        {\n            f.getParentFile().mkdirs();\n        }\n\n        final FileOutputStream fos = new FileOutputStream( f );\n        try\n        {\n            IOUtils.copy( compressedInputStream, fos );\n        }\n        finally\n        {\n            IOUtils.closeQuietly( fos );\n        }\n    }\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                            final String entryName, final Date entryDate, final boolean isDirectory,\n                            final Integer mode, String symlinkDestination )\n    throws IOException, ArchiverException\n{\n    final File f = FileUtils.resolveFile( dir, entryName );\n    if (!f.getParentFile().exists() )\n    {\n        f.getParentFile().mkdirs();\n    }\n\n    final FileOutputStream fos = new FileOutputStream( f );\n    try\n    {\n        IOUtils.copy( compressedInputStream, fos );\n    }\n    finally\n    {\n        IOUtils.closeQuietly( fos );\n    }\n\n    if ( isDirectory )\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    else\n    {\n        f.setLastModified( entryDate.getTime() );\n        f.setLastModified( entryDate.getTime() );\n    }\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n    f.setLastModified( entryDate.getTime() );\n}",
            "correctness": "uncompilable"
        }
    ]
}