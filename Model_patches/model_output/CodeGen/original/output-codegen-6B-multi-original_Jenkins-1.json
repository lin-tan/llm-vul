{
    "output": [
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Returns cached environment variables (copy to prevent modification) for the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        EnvVars cachedEnvironment = this.cachedEnvironment;\n        if (cachedEnvironment!= null) {\n            return new EnvVars(cachedEnvironment);\n        }\n\n        cachedEnvironment = EnvVars.getRemote(getChannel());\n        this.cachedEnvironment = cachedEnvironment;\n        return new EnvVars(cachedEnvironment);\n    }\n\n    /**\n     * Creates an environment variable override to be used for launching processes on this node.\n     *\n     * @see ProcStarter#envs(Map)\n     * @since 1.489\n     */\n    public @Nonnull EnvVars buildEnvironment(@Nonnull TaskListener listener) throws IOException, InterruptedException {\n        EnvVars env = new EnvVars();\n\n        Node node = getNode();\n        if (node==null)     return env; // bail out\n\n        for (NodeProperty nodeProperty: Jenkins.getInstance().getGlobalNodeProperties()) {\n            nodeProperty.buildEnvVars(env,listener",
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    @Deprecated\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Returns cached environment variables (copy to prevent modification) for the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        EnvVars cachedEnvironment = this.cachedEnvironment;\n        if (cachedEnvironment!= null) {\n            return new EnvVars(cachedEnvironment);\n        }\n\n        cachedEnvironment = EnvVars.getRemote(getChannel());\n        this.cachedEnvironment = cachedEnvironment;\n        return new EnvVars(cachedEnvironment);\n    }\n\n    /**\n     * Creates an environment variable override to be used for launching processes on this node.\n     *\n     * @see ProcStarter#envs(Map)\n     * @since 1.489\n     */\n    public @Nonnull EnvVars buildEnvironment(@Nonnull TaskListener listener) throws IOException, InterruptedException {\n        EnvVars env = new EnvVars();\n\n        Node node = getNode();\n        if (node==null)     return env; // bail out\n\n        for (NodeProperty nodeProperty: Jenkins.getInstance().getGlobalNodeProperties()) {\n            nodeProperty.buildEnvVars",
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    @Deprecated\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Returns cached environment variables (copy to prevent modification) for the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        EnvVars cachedEnvironment = this.cachedEnvironment;\n        if (cachedEnvironment!= null) {\n            return new EnvVars(cachedEnvironment);\n        }\n\n        cachedEnvironment = EnvVars.getRemote(getChannel());\n        this.cachedEnvironment = cachedEnvironment;\n        return new EnvVars(cachedEnvironment);\n    }\n\n    /**\n     * Creates an environment variable override to be used for launching processes on this node.\n     *\n     * @see ProcStarter#envs(Map)\n     */\n    public @Nonnull EnvVars buildEnvironment(@Nonnull TaskListener listener) throws IOException, InterruptedException {\n        EnvVars env = new EnvVars();\n        \n        Node node = getNode();\n        if (node==null)     return env; // bail out\n\n        for (NodeProperty nodeProperty: Jenkins.getInstance().getGlobalNodeProperties()) {\n            nodeProperty.buildEnvVars(env,listener);",
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Returns cached environment variables (copy to prevent modification) for the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        EnvVars cachedEnvironment = this.cachedEnvironment;\n        if (cachedEnvironment!= null) {\n            return new EnvVars(cachedEnvironment);\n        }\n\n        cachedEnvironment = EnvVars.getRemote(getChannel());\n        this.cachedEnvironment = cachedEnvironment;\n        return new EnvVars(cachedEnvironment);\n    }\n\n    /**\n     * Creates an environment variable override to be used for launching processes on this node.\n     *\n     * @see ProcStarter#envs(Map)\n     */\n    public @Nonnull EnvVars buildEnvironment(@Nonnull TaskListener listener) throws IOException, InterruptedException {\n        EnvVars env = new EnvVars();\n        \n        Node node = getNode();\n        if (node==null)     return env; // bail out\n\n        for (NodeProperty nodeProperty: Jenkins.getInstance().getGlobalNodeProperties()) {\n            nodeProperty.buildEnvVars(env,listener);\n        }\n\n        ",
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Gets the environment variables of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        return EnvVars.getRemote(getChannel());\n    }\n\n    /**\n     * Gets the thread dump of the JVM on this computer.\n     * If this is the master, it returns the thread dump of the master computer.\n     */\n    public String getThreadDump() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getThreadDump(getChannel());\n    }\n\n    /**\n     * Obtains the heap dump.\n     */\n    public HeapDump getHeapDump() throws IOException {\n        return new HeapDump(this,getChannel());\n    }\n\n    /**\n     * This method tries to compute the name of the host that's reachable by all the other nodes.\n     *\n     * <p>\n     * Since it's possible that the slave is not reachable from the master (it may be behind a firewall),\n     * this method may return null.\n     *\n     * It's surprisingly tricky for a machine to know a name that other systems can get to,\n     * especially between things like",
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    @Deprecated\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Returns cached environment variables (copy to prevent modification) for the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        EnvVars cachedEnvironment = this.cachedEnvironment;\n        if (cachedEnvironment!= null) {\n            return new EnvVars(cachedEnvironment);\n        }\n\n        cachedEnvironment = EnvVars.getRemote(getChannel());\n        this.cachedEnvironment = cachedEnvironment;\n        return new EnvVars(cachedEnvironment);\n    }\n\n    /**\n     * Creates an environment variable override to be used for launching processes on this node.\n     *\n     * @see ProcStarter#envs(Map)\n     */\n    public EnvVars buildEnvironment(TaskListener listener) throws IOException, InterruptedException {\n        EnvVars env = new EnvVars();\n        \n        Node node = getNode();\n        if (node==null)     return env; // bail out\n\n        for (NodeProperty nodeProperty: Jenkins.getInstance().getGlobalNodeProperties()) {\n            nodeProperty.buildEnvVars(env,listener);\n        }\n\n        for",
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    @Deprecated\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Returns cached environment variables (copy to prevent modification) for the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        EnvVars cachedEnvironment = this.cachedEnvironment;\n        if (cachedEnvironment!= null) {\n            return new EnvVars(cachedEnvironment);\n        }\n\n        cachedEnvironment = EnvVars.getRemote(getChannel());\n        this.cachedEnvironment = cachedEnvironment;\n        return new EnvVars(cachedEnvironment);\n    }\n\n    /**\n     * Creates an environment variable override for launching processes on this node.\n     *\n     * @see ProcStarter#envs(Map)\n     * @since 1.489\n     */\n    public @Nonnull EnvVars buildEnvironment(@Nonnull TaskListener listener) throws IOException, InterruptedException {\n        EnvVars env = new EnvVars();\n\n        Node node = getNode();\n        if (node==null)     return env; // bail out\n\n        for (NodeProperty nodeProperty: Jenkins.getInstance().getGlobalNodeProperties()) {\n            nodeProperty.buildEnvVars(env,",
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Returns cached environment variables (copy to prevent modification) for the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        EnvVars cachedEnvironment = this.cachedEnvironment;\n        if (cachedEnvironment!= null) {\n            return new EnvVars(cachedEnvironment);\n        }\n\n        cachedEnvironment = EnvVars.getRemote(getChannel());\n        this.cachedEnvironment = cachedEnvironment;\n        return new EnvVars(cachedEnvironment);\n    }\n\n    /**\n     * Creates an environment variable override to be used for launching processes on this node.\n     *\n     * @see ProcStarter#envs(Map)\n     */\n    public EnvVars buildEnvironment(TaskListener listener) throws IOException, InterruptedException {\n        EnvVars env = new EnvVars();\n        \n        Node node = getNode();\n        if (node==null)     return env; // bail out\n\n        for (NodeProperty nodeProperty: Jenkins.getInstance().getGlobalNodeProperties()) {\n            nodeProperty.buildEnvVars(env,listener);\n        }\n\n        for (NodeProperty nodeProperty",
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    @Deprecated\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Returns cached environment variables (copy to prevent modification) for the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        EnvVars cachedEnvironment = this.cachedEnvironment;\n        if (cachedEnvironment!= null) {\n            return new EnvVars(cachedEnvironment);\n        }\n\n        cachedEnvironment = EnvVars.getRemote(getChannel());\n        this.cachedEnvironment = cachedEnvironment;\n        return new EnvVars(cachedEnvironment);\n    }\n\n    /**\n     * Creates an environment variable override for launching processes on this node.\n     *\n     * @see ProcStarter#envs(Map)\n     */\n    public @Nonnull EnvVars buildEnvironment(@Nonnull TaskListener listener) throws IOException, InterruptedException {\n        EnvVars env = new EnvVars();\n        \n        Node node = getNode();\n        if (node==null)     return env; // bail out\n\n        for (NodeProperty nodeProperty: Jenkins.getInstance().getGlobalNodeProperties()) {\n            nodeProperty.buildEnvVars(env,listener);\n        }",
        "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}\n\n    /**\n     * Gets the system properties of the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public Map<Object,Object> getSystemProperties() throws IOException, InterruptedException {\n        return RemotingDiagnostics.getSystemProperties(getChannel());\n    }\n\n    /**\n     * @deprecated as of 1.292\n     *      Use {@link #getEnvironment()} instead.\n     */\n    public Map<String,String> getEnvVars() throws IOException, InterruptedException {\n        return getEnvironment();\n    }\n\n    /**\n     * Returns cached environment variables (copy to prevent modification) for the JVM on this computer.\n     * If this is the master, it returns the system property of the master computer.\n     */\n    public EnvVars getEnvironment() throws IOException, InterruptedException {\n        EnvVars cachedEnvironment = this.cachedEnvironment;\n        if (cachedEnvironment!= null) {\n            return new EnvVars(cachedEnvironment);\n        }\n\n        cachedEnvironment = EnvVars.getRemote(getChannel());\n        this.cachedEnvironment = cachedEnvironment;\n        return new EnvVars(cachedEnvironment);\n    }\n\n    /**\n     * Creates an environment variable override to be used for launching processes on this node.\n     *\n     * @see ProcStarter#envs(Map)\n     */\n    public @Nonnull EnvVars buildEnvironment(@Nonnull TaskListener listener) throws IOException, InterruptedException {\n        EnvVars env = new EnvVars();\n        \n        Node node = getNode();\n        if (node==null)     return env; // bail out\n\n        for (NodeProperty nodeProperty: Jenkins.getInstance().getGlobalNodeProperties()) {\n            nodeProperty.buildEnvVars(env,listener);\n        }\n        "
    ],
    "validation_result": [
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "@Exported(inline=true)\npublic Map<String,Object> getMonitorData() {\n    Map<String,Object> r = new HashMap<String, Object>();\n    for (NodeMonitor n : getNodes()) {\n        Map<String,Object> data = n.getMonitorData();\n        if(data!=null) {\n            r.put(n.getNodeName(), data);\n        }\n    }\n    return r;\n}",
            "correctness": "uncompilable"
        }
    ]
}