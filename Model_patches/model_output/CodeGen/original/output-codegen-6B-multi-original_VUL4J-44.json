{
    "output": [
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tsb = new StringBuilder();\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb.append(encodeCharacter(immune, (char)bytes[i]));\n\t}\n\treturn sb.toString();\n}\n}\n",
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tsb = new StringBuilder();\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb.append(encodeCharacter(immune, bytes[i]));\n\t}\n\treturn sb.toString();\n}\n}\n",
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tsb = new StringBuilder();\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb.append(encodeCharacter(immune, (char)bytes[i]));\n\t}\n\treturn sb.toString();\n}\n\n}\n",
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tsb = new StringBuilder();\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb.append(encodeCharacter(immune, bytes[i]));\n\t}\n\treturn sb.toString();\n}\n\n}\n",
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tsb.append(String.valueOf(bytes[i]));\n\t\tcStr = sb.toString();\n\t}\n\treturn cStr;\n}\n}\n",
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tsb.append(String.valueOf(bytes[i]));\n\t\tcStr = sb.toString();\n\t}\n\treturn cStr;\n}\n\n}\n",
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tif (sb.indexOf(bytes[i]) == -1)\n\t\t{\n\t\t\tsb.append(bytes[i]);\n\t\t}\n\t}\n\treturn sb.toString();\n}\n}\n",
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tsb.append(Integer.toHexString(bytes[i]));\n\t\tsb.append(\" \");\n\t}\n\treturn sb.toString();\n}\n}\n",
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tif (sb.indexOf(bytes[i]) == -1)\n\t\t{\n\t\t\tsb.append(bytes[i]);\n\t\t}\n\t}\n\treturn sb.toString();\n}\n\n}\n",
        "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tsb.append(Integer.toHexString(bytes[i]));\n\t\tsb.append(\" \");\n\t}\n\treturn sb.toString();\n}\n\n}\n"
    ],
    "validation_result": [
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tsb = new StringBuilder();\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb.append(encodeCharacter(immune, (char)bytes[i]));\n\t}\n\treturn sb.toString();\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tsb = new StringBuilder();\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb.append(encodeCharacter(immune, bytes[i]));\n\t}\n\treturn sb.toString();\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tsb = new StringBuilder();\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb.append(encodeCharacter(immune, (char)bytes[i]));\n\t}\n\treturn sb.toString();\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tsb = new StringBuilder();\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb.append(encodeCharacter(immune, bytes[i]));\n\t}\n\treturn sb.toString();\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tsb.append(String.valueOf(bytes[i]));\n\t\tcStr = sb.toString();\n\t}\n\treturn cStr;\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tsb.append(String.valueOf(bytes[i]));\n\t\tcStr = sb.toString();\n\t}\n\treturn cStr;\n}",
            "correctness": "compile_success"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tif (sb.indexOf(bytes[i]) == -1)\n\t\t{\n\t\t\tsb.append(bytes[i]);\n\t\t}\n\t}\n\treturn sb.toString();\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tsb.append(Integer.toHexString(bytes[i]));\n\t\tsb.append(\" \");\n\t}\n\treturn sb.toString();\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tif (sb.indexOf(bytes[i]) == -1)\n\t\t{\n\t\t\tsb.append(bytes[i]);\n\t\t}\n\t}\n\treturn sb.toString();\n}",
            "correctness": "uncompilable"
        },
        {
            "patch": "public String encodeCharacter( char[] immune, Character c )\n{\n\tString cStr = String.valueOf(c.charValue());\n\tbyte[] bytes;\n\tStringBuilder sb;\n\ttry\n\t{\n\t\tbytes = cStr.getBytes(\"UTF-8\");\n\t}\n\tcatch (UnsupportedEncodingException e)\n\t{\n\t\tbytes = cStr.getBytes();\n\t}\n\tfor (int i = 0; i < bytes.length; i++)\n\t{\n\t\tsb = new StringBuilder();\n\t\tfor (int j = 0; j < immune.length; j++)\n\t\t{\n\t\t\tsb.append(immune[j]);\n\t\t}\n\t\tsb.append(Integer.toHexString(bytes[i]));\n\t\tsb.append(\" \");\n\t}\n\treturn sb.toString();\n}",
            "correctness": "uncompilable"
        }
    ]
}